<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第11章 Spring MVC执行流程</title>
      <link href="/posts/36092.html"/>
      <url>/posts/36092.html</url>
      
        <content type="html"><![CDATA[<p>‍</p><meta name="referrer" content="no-referrer"><h1 id="从源码角度看执行流程"><a href="#从源码角度看执行流程" class="headerlink" title="从源码角度看执行流程"></a>从源码角度看执行流程</h1><p>以下是核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 根据请求对象request获取</span></span><br><span class="line">        <span class="comment">// 这个对象是在每次发送请求时都创建一个，是请求级别的</span></span><br><span class="line">        <span class="comment">// 该对象中描述了本次请求应该执行的拦截器是哪些，顺序是怎样的，要执行的处理器是哪个</span></span><br><span class="line">        <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> getHandler(processedRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据处理器获取处理器适配器。（底层使用了适配器模式）</span></span><br><span class="line">        <span class="comment">// HandlerAdapter在web服务器启动的时候就创建好了。（启动时创建多个HandlerAdapter放在List集合中）</span></span><br><span class="line">        <span class="comment">// HandlerAdapter有多种类型：</span></span><br><span class="line">        <span class="comment">// RequestMappingHandlerAdapter：用于适配使用注解 @RequestMapping 标记的控制器方法</span></span><br><span class="line">        <span class="comment">// SimpleControllerHandlerAdapter：用于适配实现了 Controller 接口的控制器</span></span><br><span class="line">        <span class="comment">// 注意：此时还没有进行数据绑定（也就是说，表单提交的数据，此时还没有转换为pojo对象。）</span></span><br><span class="line">        <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行请求对应的所有拦截器中的 preHandle 方法</span></span><br><span class="line">        <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过处理器适配器调用处理器方法</span></span><br><span class="line">        <span class="comment">// 在调用处理器方法之前会进行数据绑定，将表单提交的数据绑定到处理器方法上。（底层是通过WebDataBinder完成的）</span></span><br><span class="line">        <span class="comment">// 在数据绑定的过程中会使用到消息转换器：HttpMessageConverter</span></span><br><span class="line">        <span class="comment">// 结束后返回ModelAndView对象</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  执行请求对应的所有拦截器中的 postHandle 方法</span></span><br><span class="line">        mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理分发结果（在这个方法中完成了响应）</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据每一次的请求对象来获取处理器执行链对象</span></span><br><span class="line">    <span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// HandlerMapping在服务器启动的时候就创建好了，放到了List集合中。HandlerMapping也有多种类型</span></span><br><span class="line">            <span class="comment">// RequestMappingHandlerMapping：将 URL 映射到使用注解 @RequestMapping 标记的控制器方法的处理器。</span></span><br><span class="line">            <span class="comment">// SimpleUrlHandlerMapping：将 URL 映射到处理器中指定的 URL 或 URL 模式的处理器。</span></span><br><span class="line"><span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line">                <span class="comment">// 重点：这是一次请求的开始，实际上是通过处理器映射器来获取的处理器执行链对象</span></span><br><span class="line">                <span class="comment">// 底层实际上会通过 HandlerMapping 对象获取 HandlerMethod对象，将HandlerMethod 对象传递给 HandlerExecutionChain对象。</span></span><br><span class="line">                <span class="comment">// 注意：HandlerMapping对象和HandlerMethod对象都是在服务器启动阶段创建的。</span></span><br><span class="line">                <span class="comment">// RequestMappingHandlerMapping对象中有多个HandlerMethod对象。</span></span><br><span class="line"><span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="comment">// 渲染完毕后，调用该请求对应的所有拦截器的 afterCompletion方法。</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 通过视图解析器返回视图对象</span></span><br><span class="line">        view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class="line">        <span class="comment">// 真正的渲染视图</span></span><br><span class="line">        view.render(mv.getModelInternal(), request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> View <span class="title function_">resolveViewName</span><span class="params">(String viewName, <span class="meta">@Nullable</span> Map&lt;String, Object&gt; model,</span></span><br><span class="line"><span class="params">Locale locale, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 通过视图解析器返回视图对象</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ViewResolver</span> &#123;</span><br><span class="line">    View <span class="title function_">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">(<span class="meta">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="从图片角度看执行流程"><a href="#从图片角度看执行流程" class="headerlink" title="从图片角度看执行流程"></a>从图片角度看执行流程</h1><p><img src="https://i0.hdslb.com/bfs/article/d23146b356e130ad57b99349d28d4e71645325325.png" alt="未命名文件.png"></p><p>‍</p><h1 id="WEB服务器启动时都做了什么"><a href="#WEB服务器启动时都做了什么" class="headerlink" title="WEB服务器启动时都做了什么"></a>WEB服务器启动时都做了什么</h1><p>先搞明白核心类的继承关系：<br>DispatcherServlet extends FrameworkServlet extends HttpServletBean extends HttpServlet extends GenericServlet implements Servlet</p><p>服务器启动阶段完成了：</p><ol><li>初始化Spring上下文，也就是创建所有的bean，让IoC容器将其管理起来。</li><li>初始化SpringMVC相关的对象：处理器映射器，处理器适配器等。。。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/4fadabc115a5b1680a19203dc836d145645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e6a1793e4d3d5723a24a3763dfc5978c645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/808e87045cf8f78309d12ebebb700fd4645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/908b6c1746d6b064425f36dd4ab6a58c645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/0e08037b2d40311a9cc3d2a29efc9a01645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/04714ee94f6996d505715b1a301e18ed645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/03d6090e567856766b601f7afd5637d1645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/0d691b3d896d742d84a17e872c46444c645325325.png" alt="image.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第10章 拦截器</title>
      <link href="/posts/51799.html"/>
      <url>/posts/51799.html</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer">‍</p><h1 id="拦截器概述"><a href="#拦截器概述" class="headerlink" title="拦截器概述"></a>拦截器概述</h1><p><strong>拦截器（Interceptor）类似于过滤器（Filter）</strong><br>Spring MVC的拦截器作用是在请求到达控制器之前或之后进行拦截，可以对请求和响应进行一些特定的处理。<br>拦截器可以用于很多场景下：</p><ol><li>登录验证：对于需要登录才能访问的网址，使用拦截器可以判断用户是否已登录，如果未登录则跳转到登录页面。</li><li>权限校验：根据用户权限对部分网址进行访问控制，拒绝未经授权的用户访问。</li><li>请求日志：记录请求信息，例如请求地址、请求参数、请求时间等，用于排查问题和性能优化。</li><li>更改响应：可以对响应的内容进行修改，例如添加头信息、调整响应内容格式等。</li></ol><p>拦截器和过滤器的区别在于它们的作用层面不同。</p><ul><li>过滤器更注重在请求和响应的流程中进行处理，可以修改请求和响应的内容，例如设置编码和字符集、请求头、状态码等。</li><li>拦截器则更加侧重于对控制器进行前置或后置处理，在请求到达控制器之前或之后进行特定的操作，例如打印日志、权限验证等。</li></ul><p><strong>Filter、Servlet、Interceptor、Controller的执行顺序：</strong><br><img src="https://i0.hdslb.com/bfs/article/79cbb9be95564046905158f53f34355d645325325.png" alt="image.png"></p><p>‍</p><h1 id="拦截器的创建与基本配置"><a href="#拦截器的创建与基本配置" class="headerlink" title="拦截器的创建与基本配置"></a>拦截器的创建与基本配置</h1><h2 id="定义拦截器"><a href="#定义拦截器" class="headerlink" title="定义拦截器"></a>定义拦截器</h2><p>实现<code>org.springframework.web.servlet.HandlerInterceptor</code> 接口，共有三个方法可以进行选择性的实现：</p><ul><li>preHandle：处理器方法调用之前执行<ul><li><strong>只有该方法有返回值，返回值是布尔类型，true放行，false拦截。</strong></li></ul></li><li>postHandle：处理器方法调用之后执行</li><li>afterCompletion：渲染完成后执行</li></ul><p>‍</p><h2 id="拦截器基本配置"><a href="#拦截器基本配置" class="headerlink" title="拦截器基本配置"></a>拦截器基本配置</h2><p>在springmvc.xml文件中进行如下配置：<br>第一种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.powernode.springmvc.interceptors.Interceptor1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方式的前提：</p><ul><li>前提1：包扫描</li></ul><p><img src="https://i0.hdslb.com/bfs/article/de2c702d90c837aac805a6a4a9a71398645325325.png" alt="image.png"></p><ul><li>前提2：使用 @Component 注解进行标注</li></ul><p><img src="https://i0.hdslb.com/bfs/article/f355646c9a791e26a0a4f529b761b7b8645325325.png" alt="image.png"></p><p><strong>注意：对于这种基本配置来说，拦截器是拦截所有请求的。</strong></p><p>‍</p><h2 id="拦截器部分源码分析"><a href="#拦截器部分源码分析" class="headerlink" title="拦截器部分源码分析"></a>拦截器部分源码分析</h2><h3 id="方法执行顺序的源码分析"><a href="#方法执行顺序的源码分析" class="headerlink" title="方法执行顺序的源码分析"></a>方法执行顺序的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 调用所有拦截器的 preHandle 方法</span></span><br><span class="line">        <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用处理器方法</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">        <span class="comment">// 调用所有拦截器的 postHandle 方法</span></span><br><span class="line">        mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        <span class="comment">// 处理视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 渲染页面</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="comment">// 调用所有拦截器的 afterCompletion 方法</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="拦截与放行的源码分析"><a href="#拦截与放行的源码分析" class="headerlink" title="拦截与放行的源码分析"></a>拦截与放行的源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 调用所有拦截器的 preHandle 方法</span></span><br><span class="line">        <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">            <span class="comment">// 如果 mappedHandler.applyPreHandle(processedRequest, response) 返回false，以下的return语句就会执行</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerExecutionChain</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line"><span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 如果 interceptor.preHandle(request, response, this.handler) 返回 false，以下的 return false;就会执行。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="拦截器的高级配置"><a href="#拦截器的高级配置" class="headerlink" title="拦截器的高级配置"></a>拦截器的高级配置</h1><p>采用以上基本配置方式，拦截器是拦截所有请求路径的。如果要针对某些路径进行拦截，某些路径不拦截，可以采用高级配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截所有路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--除 /test 路径之外--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的配置表示，除 /test 请求路径之外，剩下的路径全部拦截。</p><p>‍</p><h1 id="拦截器的执行顺序"><a href="#拦截器的执行顺序" class="headerlink" title="拦截器的执行顺序"></a>拦截器的执行顺序</h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><h3 id="如果所有拦截器preHandle都返回true"><a href="#如果所有拦截器preHandle都返回true" class="headerlink" title="如果所有拦截器preHandle都返回true"></a>如果所有拦截器preHandle都返回true</h3><p>按照springmvc.xml文件中配置的顺序，自上而下调用 preHandle：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行顺序：<br><img src="https://i0.hdslb.com/bfs/article/b7290a815b0dad51ac0bd3d78107487e645325325.png" alt="image.png"></p><p>‍</p><h3 id="如果其中一个拦截器preHandle返回false"><a href="#如果其中一个拦截器preHandle返回false" class="headerlink" title="如果其中一个拦截器preHandle返回false"></a>如果其中一个拦截器preHandle返回false</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;interceptor2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<code>interceptor2</code>的preHandle返回false，执行顺序：<br><img src="https://i0.hdslb.com/bfs/article/02df35250433d18b5c6645cf99470a70645325325.png" alt="image.png"><br>规则：只要有一个拦截器<code>preHandle</code>返回false，任何<code>postHandle</code>都不执行。但返回false的拦截器的前面的拦截器按照逆序执行<code>afterCompletion</code>。</p><p>‍</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>DispatcherServlet和 HandlerExecutionChain的部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 按照顺序执行所有拦截器的preHandle方法</span></span><br><span class="line">        <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行处理器方法</span></span><br><span class="line">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">        <span class="comment">// 按照逆序执行所有拦截器的 postHanle 方法</span></span><br><span class="line">        mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        <span class="comment">// 处理视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="comment">// 按照逆序执行所有拦截器的 afterCompletion 方法</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerExecutionChain</span> &#123;</span><br><span class="line">    <span class="comment">// 顺序执行 preHandle</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); i++) &#123;</span><br><span class="line">            <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">                <span class="comment">// 如果其中一个拦截器preHandle返回false</span></span><br><span class="line">                <span class="comment">// 将该拦截器前面的拦截器按照逆序执行所有的afterCompletion</span></span><br><span class="line">                triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.interceptorIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 逆序执行 postHanle</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">            interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 逆序执行 afterCompletion</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第9章 异常处理器</title>
      <link href="/posts/48817.html"/>
      <url>/posts/48817.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="什么是异常处理器"><a href="#什么是异常处理器" class="headerlink" title="什么是异常处理器"></a>什么是异常处理器</h1><p>Spring MVC在<code>处理器方法</code>执行过程中出现了异常，可以采用<code>异常处理器</code>进行应对。<br>一句话概括异常处理器作用：处理器方法执行过程中出现了异常，跳转到对应的视图，在视图上展示友好信息。</p><p>SpringMVC为异常处理提供了一个接口：HandlerExceptionResolver<br><img src="https://i0.hdslb.com/bfs/article/9770cb33ad36f0a6962bd10c285acc3a645325325.png" alt="image.png"><br>核心方法是：resolveException。<br>该方法用来编写具体的异常处理方案。返回值ModelAndView，表示异常处理完之后跳转到哪个视图。</p><p>HandlerExceptionResolver 接口有两个常用的默认实现：</p><ul><li>DefaultHandlerExceptionResolver</li><li>SimpleMappingExceptionResolver</li></ul><p>‍</p><h1 id="默认的异常处理器"><a href="#默认的异常处理器" class="headerlink" title="默认的异常处理器"></a>默认的异常处理器</h1><p>DefaultHandlerExceptionResolver 是默认的异常处理器。<br>核心方法：<br><img src="https://i0.hdslb.com/bfs/article/2d116fcd40c7489f971f3c7b57a08520645325325.png" alt="image.png"><br>当请求方式和处理方式不同时，DefaultHandlerExceptionResolver的默认处理态度是：<br><img src="https://i0.hdslb.com/bfs/article/32e928dac40f185a397a24eb765dc42a645325325.png" alt="image.png"></p><p>‍</p><h1 id="自定义的异常处理器"><a href="#自定义的异常处理器" class="headerlink" title="自定义的异常处理器"></a>自定义的异常处理器</h1><p>自定义异常处理器需要使用：SimpleMappingExceptionResolver<br>自定义异常处理机制有两种语法：</p><ul><li>通过XML配置文件</li><li>通过注解</li></ul><h2 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用来指定出现异常后，跳转的视图--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.Exception&quot;</span>&gt;</span>tip<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将异常信息存储到request域，value属性用来指定存储时的key。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;e&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在视图页面上展示异常信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>出错了<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>出错了，请联系管理员！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;e&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/e30d838098544c80d2e79b0591fddf25645325325.png" alt="image.png"></p><p>‍</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tip</span><span class="params">(Exception e, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;e&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第8章 文件上传与下载</title>
      <link href="/posts/26001.html"/>
      <url>/posts/26001.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>使用SpringMVC6版本，<strong>不需要</strong>添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件上传表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/file/up&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点是：form表单采用post请求，enctype是multipart/form-data，并且上传组件是：type=”file”</p><p>‍</p><p>web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置单个支持最大文件的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>102400<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置整个表单所有文件上传的最大值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>102400<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置最小上传文件大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重点：在DispatcherServlet配置时，添加 multipart-config 配置信息。（这是Spring6，如果是Spring5，则不是这样配置，而是在springmvc.xml文件中配置：CommonsMultipartResolver）</strong><br><strong>SpringMVC6中把这个类已经删除了。废弃了。</strong></p><p>‍</p><p>Controller中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/file/up&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fileUp</span><span class="params">(<span class="meta">@RequestParam(&quot;fileName&quot;)</span> MultipartFile multipartFile, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> multipartFile.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        System.out.println(originalFilename);</span><br><span class="line">        <span class="comment">// 将文件存储到服务器中</span></span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> multipartFile.getInputStream();</span><br><span class="line">        <span class="comment">// 获取上传之后的存放目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>));</span><br><span class="line">        <span class="comment">// 如果服务器目录不存在则新建</span></span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始写</span></span><br><span class="line">        <span class="comment">//BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file.getAbsolutePath() + &quot;/&quot; + originalFilename));</span></span><br><span class="line">        <span class="comment">// 可以采用UUID来生成文件名，防止服务器上传文件时产生覆盖</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file.getAbsolutePath() + <span class="string">&quot;/&quot;</span> + UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>))));</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((readCount = in.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bytes,<span class="number">0</span>,readCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 刷新缓冲流</span></span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>最终测试结果：<br><img src="https://i0.hdslb.com/bfs/article/66eca389b771de783c6c33137a4d61fd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/a737dc61c73877d23ecd1f13f4f82824645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/d4c59c64c39fa92fd801b665794210fb645325325.png" alt="image.png"></p><p><strong>建议：上传文件时，文件起名采用UUID。以防文件覆盖。</strong></p><p>‍</p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件下载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/download&#125;&quot;</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件下载核心程序，使用ResponseEntity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFile(HttpServletResponse response, HttpServletRequest request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>) + <span class="string">&quot;/1.jpeg&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建响应头对象</span></span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">// 设置响应内容类型</span></span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">    <span class="comment">// 设置下载文件的名称</span></span><br><span class="line">    headers.setContentDispositionFormData(<span class="string">&quot;attachment&quot;</span>, file.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载文件</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; entity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;<span class="type">byte</span>[]&gt;(Files.readAllBytes(file.toPath()), headers, HttpStatus.OK);</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://i0.hdslb.com/bfs/article/662562722dacd809d0eb2697339f1cb7645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/cc8380ffc7043aa33a5bee43f9aa8c93645325325.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第7章 HttpMessageConverter</title>
      <link href="/posts/13582.html"/>
      <url>/posts/13582.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h1><p>HttpMessageConverter是Spring MVC中非常重要的一个接口。翻译为：HTTP消息转换器。该接口下提供了很多实现类，不同的实现类有不同的转换方式。<br>​<img src="https://i0.hdslb.com/bfs/article/0a1ccc1a62b1fbef43b257ef6c5b59e4645325325.png" alt="image.png">​</p><h2 id="什么是HTTP消息"><a href="#什么是HTTP消息" class="headerlink" title="什么是HTTP消息"></a>什么是HTTP消息</h2><p>HTTP消息其实就是HTTP协议。HTTP协议包括请求协议和响应协议。<br>以下是一份HTTP POST请求协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /springmvc/user/login HTTP/1.1--请求行</span><br><span class="line">Content-Type: application/x-www-form-urlencoded--请求头</span><br><span class="line">Content-Length: 32</span><br><span class="line">Host: www.example.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">                                                                                          --空白行</span><br><span class="line">username=admin&amp;password=1234--请求体</span><br></pre></td></tr></table></figure><p>以下是一份HTTP GET请求协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /springmvc/user/del?id=1&amp;name=zhangsan HTTP/1.1--请求行</span><br><span class="line">Host: www.example.com--请求头</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br></pre></td></tr></table></figure><p>以下是一份HTTP响应协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK--状态行</span><br><span class="line">Date: Thu, 01 Jul 2021 06:35:45 GMT--响应头</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line">Content-Length: 12</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Server: Apache/2.4.43 (Win64) OpenSSL/1.1.1g</span><br><span class="line">                                                                                        --空白行</span><br><span class="line">&lt;!DOCTYPE html&gt;--响应体</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="转换器转换的是什么"><a href="#转换器转换的是什么" class="headerlink" title="转换器转换的是什么"></a>转换器转换的是什么</h2><p>转换的是<code>HTTP协议</code>与<code>Java程序中的对象</code>之间的互相转换。请看下图：<br><img src="https://i0.hdslb.com/bfs/article/a4b16aabdabe24a9f35602988ac93014645325325.png" alt="无标题.png"><br>上图是我们之前经常写的代码。请求体中的数据是如何转换成user对象的，底层实际上使用了<code>HttpMessageConverter</code>接口的其中一个实现类<code>FormHttpMessageConverter</code>。<br>通过上图可以看出<code>FormHttpMessageConverter</code>是负责将<code>请求协议</code>转换为<code>Java对象</code>的。</p><p>再看下图：<br><img src="https://i0.hdslb.com/bfs/article/27bede8be54c927b37edbb9a607b24b2645325325.png" alt="无标题.png"><br>上图的代码也是之前我们经常写的，Controller返回值看做逻辑视图名称，视图解析器将其转换成物理视图名称，生成视图对象，<code>StringHttpMessageConverter</code>负责将视图对象中的HTML字符串写入到HTTP协议的响应体中。最终完成响应。<br>通过上图可以看出<code>StringHttpMessageConverter</code>是负责将<code>Java对象</code>转换为<code>响应协议</code>的。</p><p>‍</p><p>通过以上内容的学习，大家应该能够了解到<code>HttpMessageConverter</code>接口是用来做什么的了：<br><img src="https://i0.hdslb.com/bfs/article/7a0d80473a3925a7b8c3034d1ed29c23645325325.png" alt="无标题.png"><br>如上图所示：HttpMessageConverter接口的可以将请求协议转换成Java对象，也可以把Java对象转换为响应协议。<br><strong>HttpMessageConverter是接口，SpringMVC帮我们提供了非常多而丰富的实现类。每个实现类都有自己不同的转换风格。</strong><br><strong>对于我们程序员来说，Spring MVC已经帮助我们写好了，我们只需要在不同的业务场景下，选择合适的HTTP消息转换器即可。</strong><br><strong>怎么选择呢？当然是通过SpringMVC为我们提供的注解，我们通过使用不同的注解来启用不同的消息转换器。</strong></p><p>在HTTP消息转换器这一小节，我们重点要掌握的是两个注解两个类：</p><ul><li>@ResponseBody</li><li>@RequestBody</li><li>ResponseEntity</li><li>RequestEntity</li></ul><p>‍</p><h1 id="Spring-MVC中的AJAX请求"><a href="#Spring-MVC中的AJAX请求" class="headerlink" title="Spring MVC中的AJAX请求"></a>Spring MVC中的AJAX请求</h1><p>SpringMVC+Vue3+Thymeleaf+Axios发送一个简单的AJAX请求。</p><p>引入Vue和Axios的js文件：<br><img src="https://i0.hdslb.com/bfs/article/6a554f00bbd7f62d19ee0bf7a0784341645325325.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/thymeleaf/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图控制器映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点是静态资源处理、开启注解驱动、视图控制器映射等相关配置。</p><p>‍</p><p>Vue3+Thymeleaf+Axios发送AJAX请求:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue3.4.21.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getMessage&quot;</span>&gt;</span>获取消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                message : <span class="string">&quot;这里的信息将被刷新&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="title function_">getMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>([[@&#123;/&#125;]] + <span class="string">&#x27;hello&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">message</span> = response.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p><strong>重点来了，Controller怎么写呢，之前我们都是传统的请求，Controller返回一个</strong>​<code>**逻辑视图名**</code>​ <strong>，然后交给</strong>​<code>**视图解析器**</code>​<strong>解析。最后跳转页面。而AJAX请求是不需要跳转页面的，因为AJAX是页面局部刷新，以前我们在Servlet中使用</strong>​<code>**response.getWriter().print(&quot;message&quot;)**</code>​<strong>的方式响应。在Spring MVC中怎么办呢？当然，我们在Spring MVC中也可以使用Servlet原生API来完成这个功能，代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者这样也行：不需要有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>启动服务器测试：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a><br><img src="https://i0.hdslb.com/bfs/article/79f69ec7fc020aca539db7450faae701645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/0041ad80c0b114c649de400c7396e091645325325.png" alt="image.png"><br><strong>注意：如果采用这种方式响应，则和 springmvc.xml 文件中配置的视图解析器没有关系，不走视图解析器了。</strong></p><p>‍</p><p>难道我们以后AJAX请求都要使用原生Servlet API吗？</p><ul><li>不需要，我们可以使用SpringMVC中提供的HttpMessageConverter消息转换器。</li></ul><p>我们要向前端响应一个字符串”hello”，这个”hello”就是响应协议中的响应体。<br>我们可以使用 @ResponseBody 注解来启用对应的消息转换器。而这种消息转换器只负责将Controller返回的信息以响应体的形式写入响应协议。</p><p>‍</p><h1 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h1><h2 id="StringHttpMessageConverter"><a href="#StringHttpMessageConverter" class="headerlink" title="StringHttpMessageConverter"></a>StringHttpMessageConverter</h2><p>上面的AJAX案例，Controller的代码可以修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 由于你使用了 @ResponseBody 注解</span></span><br><span class="line">        <span class="comment">// 以下的return语句返回的字符串则不再是“逻辑视图名”了</span></span><br><span class="line">        <span class="comment">// 而是作为响应协议的响应体进行响应。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最核心需要理解的位置是：return “hello”;<br>这里的”hello”不是逻辑视图名了，而是作为响应体的内容进行响应。直接输出到浏览器客户端。<br>以上程序中使用的消息转换器是：<strong>StringHttpMessageConverter</strong>，为什么会启用这个消息转换器呢？因为你添加<code>@ResponseBody</code>这个注解。</p><p>通常AJAX请求需要服务器给返回一段JSON格式的字符串，可以返回JSON格式的字符串吗？当然可以，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;,\&quot;password\&quot;:\&quot;1234\&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试：<br><img src="https://i0.hdslb.com/bfs/article/0bd79b716a5796ecd6d81ed9e9fd01b2645325325.png" alt="image.png"><br>这是完全可以的，此时底层使用的消息转换器还是：<strong>StringHttpMessageConverter</strong></p><p>那如果在程序中是一个POJO对象，怎么将POJO对象以JSON格式的字符串响应给浏览器呢？两种方式：</p><ul><li>第一种方式：自己写代码将POJO对象转换成JSON格式的字符串，用上面的方式直接return即可。</li><li>第二种方式：启用<code>MappingJackson2HttpMessageConverter</code>消息转换器。</li></ul><p>‍</p><h2 id="MappingJackson2HttpMessageConverter"><a href="#MappingJackson2HttpMessageConverter" class="headerlink" title="MappingJackson2HttpMessageConverter"></a>MappingJackson2HttpMessageConverter</h2><p>启用MappingJackson2HttpMessageConverter消息转换器的步骤如下：</p><p>第一步：引入jackson依赖，可以将java对象转换为json格式字符串</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：开启注解驱动<br>这一步非常关键，开启注解驱动后，在HandlerAdapter中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>第三步：准备一个POJO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>第四步：控制器方法使用 @ResponseBody 注解标注(非常重要），控制器方法返回这个POJO对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.springmvc.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;22222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>测试：<br><img src="https://i0.hdslb.com/bfs/article/28d50f7952b9d68589355f634dbbc477645325325.png" alt="image.png"></p><p>以上代码底层启用的就是 MappingJackson2HttpMessageConverter 消息转换器。<br>他的功能很强大，可以将POJO对象转换成JSON格式的字符串，响应给前端。<br>其实这个消息转换器<code>MappingJackson2HttpMessageConverter</code>本质上只是比<code>StringHttpMessageConverter</code>多了一个json字符串的转换，其他的还是一样。</p><p>‍</p><h1 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h1><p>因为我们现代的开发方式都是基于AJAX方式的，因此 @ResponseBody 注解非常重要，很常用。<br>为了方便，Spring MVC中提供了一个注解 @RestController。这一个注解代表了：@Controller + @ResponseBody。<br>@RestController 标注在类上即可。被它标注的Controller中所有的方法上都会自动标注 @ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.springmvc.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;22222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>测试：<br><img src="https://i0.hdslb.com/bfs/article/dfa4fe42e727f6c267a55d73bdfb03f7645325325.png" alt="image.png"></p><p>‍</p><h1 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h1><h2 id="FormHttpMessageConverter"><a href="#FormHttpMessageConverter" class="headerlink" title="FormHttpMessageConverter"></a>FormHttpMessageConverter</h2><p>这个注解的作用是直接将请求体传递给Java程序，在Java程序中可以直接使用一个String类型的变量接收这个请求体的内容。</p><p>在没有使用这个注解的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行保存的业务逻辑</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    <span class="comment">// 保存成功跳转到成功页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当请求体提交的数据是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=zhangsan&amp;password=1234&amp;email=zhangsan@powernode.com</span><br></pre></td></tr></table></figure><p>那么Spring MVC会自动使用 <code>FormHttpMessageConverter</code>消息转换器，将请求体转换成user对象。</p><p>‍</p><p>当使用这个注解的时候：<strong>这个注解只能出现在方法的参数上。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> String requestBodyStr)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求体：&quot;</span> + requestBodyStr);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC仍然会使用 <code>FormHttpMessageConverter</code>消息转换器，将请求体直接以字符串形式传递给 requestBodyStr 变量。<br>测试输出结果：<br><img src="https://i0.hdslb.com/bfs/article/7529f6d9db381301b2f0362a7237959f645325325.png" alt="image.png"></p><p>‍</p><h2 id="MappingJackson2HttpMessageConverter-1"><a href="#MappingJackson2HttpMessageConverter-1" class="headerlink" title="MappingJackson2HttpMessageConverter"></a>MappingJackson2HttpMessageConverter</h2><p>另外，如果在请求体中提交的是一个JSON格式的字符串，这个JSON字符串传递给Spring MVC之后，能不能将JSON字符串转换成POJO对象呢？答案是可以的。<br>此时必须使用@RequestBody 注解来完成 。并且底层使用的消息转换器是：<code>MappingJackson2HttpMessageConverter</code>。实现步骤如下：</p><ul><li>第一步：引入jackson依赖</li><li>第二步：开启注解驱动</li><li>第三步：创建POJO类，将POJO类作为控制器方法的参数，并使用 @RequestBody 注解标注该参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    System.out.println(user.getPassword());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四步：在请求体中提交json格式的数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue3.4.21.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendJSON&quot;</span>&gt;</span>通过POST请求发送JSON给服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> jsonObj = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="title function_">sendJSON</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendjson&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/springmvc/send&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonObj), &#123;</span></span><br><span class="line"><span class="language-javascript">                        headers : &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;Content-Type&quot;</span> : <span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">message</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/2371b4f5cd00d032337c2191fe332bf0645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/86a638a6017de2b7ee7f8f6255dc9945645325325.png" alt="image.png"></p><p>‍</p><h1 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h1><p>RequestEntity不是一个注解，是一个普通的类。这个类的实例封装了整个请求协议：包括请求行、请求头、请求体所有信息。<br>出现在控制器方法的参数上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue3.4.21.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendJSON&quot;</span>&gt;</span>通过POST请求发送JSON给服务器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> jsonObj = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">async</span> <span class="title function_">sendJSON</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendjson&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/springmvc/send&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonObj), &#123;</span></span><br><span class="line"><span class="language-javascript">                        headers : &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="string">&quot;Content-Type&quot;</span> : <span class="string">&quot;application/json&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">message</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(RequestEntity&lt;User&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请求方式：&quot;</span> + requestEntity.getMethod());</span><br><span class="line">    System.out.println(<span class="string">&quot;请求URL：&quot;</span> + requestEntity.getUrl());</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> requestEntity.getHeaders();</span><br><span class="line">    System.out.println(<span class="string">&quot;请求的内容类型：&quot;</span> + headers.getContentType());</span><br><span class="line">    System.out.println(<span class="string">&quot;请求头：&quot;</span> + headers);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> requestEntity.getBody();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    System.out.println(user.getPassword());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/0181e79944fcb17d23843aa350c8159f645325325.png" alt="image.png"><br>在实际的开发中，如果你需要获取更详细的请求协议中的信息。可以使用<code>RequestEntity</code></p><p>‍</p><h1 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h1><p>ResponseEntity不是注解，是一个类。用该类的实例可以封装响应协议，包括：状态行、响应头、响应体。也就是说：如果你想定制属于自己的响应协议，可以使用该类。<br>假如我要完成这样一个需求：前端提交一个id，后端根据id进行查询，如果返回null，请在前端显示404错误。如果返回不是null，则输出返回的user。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUserById(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试：当用户不存在时<br><img src="https://i0.hdslb.com/bfs/article/9237a517bcdf21f29590aea6406d41ff645325325.png" alt="image.png"></p><p>测试：当用户存在时<br><img src="https://i0.hdslb.com/bfs/article/5b35bf7a226ac41641abb15ba1cc07e3645325325.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第6章 RESTFul编程风格</title>
      <link href="/posts/22844.html"/>
      <url>/posts/22844.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="RESTFul编程风格"><a href="#RESTFul编程风格" class="headerlink" title="RESTFul编程风格"></a>RESTFul编程风格</h1><h2 id="RESTFul是什么"><a href="#RESTFul是什么" class="headerlink" title="RESTFul是什么"></a>RESTFul是什么</h2><p>RESTFul是<code>WEB服务接口</code>的一种设计风格。<br>RESTFul定义了一组约束条件和规范，可以让<code>WEB服务接口</code>更加简洁、易于理解、易于扩展、安全可靠。</p><p>RESTFul对一个<code>WEB服务接口</code>都规定了哪些东西？</p><ul><li>对请求的URL格式有约束和规范</li><li>对HTTP的请求方式有约束和规范</li><li>对请求和响应的数据格式有约束和规范</li><li>对HTTP状态码有约束和规范</li><li>等 ……</li></ul><p>REST对请求方式的约束是这样的：</p><ul><li>查询必须发送GET请求</li><li>新增必须发送POST请求</li><li>修改必须发送PUT请求</li><li>删除必须发送DELETE请求</li></ul><p>REST对URL的约束是这样的：</p><ul><li>传统的URL：get请求，/springmvc/getUserById?id=1</li><li>REST风格的URL：get请求，/springmvc/user/1</li><li>传统的URL：get请求，/springmvc/deleteUserById?id=1</li><li>REST风格的URL：delete请求, /springmvc/user/1</li></ul><p>‍</p><p>RESTFul对URL的约束和规范的核心是：<strong>通过采用</strong>​<code>**不同的请求方式**</code><strong>+ </strong><code>**URL**</code>​<strong>来确定WEB服务中的资源。</strong></p><p><strong>RESTful 的英文全称是 Representational State Transfer（表述性状态转移）。简称REST。</strong><br>表述性（Representational）是：URI + 请求方式。<br>状态（State）是：服务器端的数据。<br>转移（Transfer）是：变化。<br>表述性状态转移是指：通过 URI + 请求方式 来控制服务器端数据的变化。</p><p>‍</p><h2 id="RESTFul风格与传统方式对比"><a href="#RESTFul风格与传统方式对比" class="headerlink" title="RESTFul风格与传统方式对比"></a>RESTFul风格与传统方式对比</h2><p>传统的 URL 与 RESTful URL 的区别是传统的 URL 是基于方法名进行资源访问和操作，而 RESTful URL 是基于资源的结构和状态进行操作的。下面是一张表格，展示两者之间的具体区别：</p><div class="table-container"><table><thead><tr><th><strong>传统的 URL</strong></th><th><strong>RESTful URL</strong></th></tr></thead><tbody><tr><td>GET /getUserById?id=1</td><td>GET /user/1</td></tr><tr><td>GET /getAllUser</td><td>GET /user</td></tr><tr><td>POST /addUser</td><td>POST /user</td></tr><tr><td>POST /modifyUser</td><td>PUT /user</td></tr><tr><td>GET /deleteUserById?id=1</td><td>DELETE /user/1</td></tr></tbody></table></div><p>从上表中我们可以看出，传统的URL是基于动作的，而 RESTful URL 是基于资源和状态的，因此 RESTful URL 更加清晰和易于理解，这也是 REST 架构风格被广泛使用的主要原因之一。</p><p>‍</p><h2 id="RESTFul方式演示查询"><a href="#RESTFul方式演示查询" class="headerlink" title="RESTFul方式演示查询"></a>RESTFul方式演示查询</h2><p>RESTFul规范中规定，如果要查询数据，需要发送GET请求。</p><h3 id="根据id查询-GET-api-user-1"><a href="#根据id查询-GET-api-user-1" class="headerlink" title="根据id查询(GET /api/user/1)"></a>根据id查询(GET /api/user/1)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/thymeleaf/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图控制器映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>首页index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--根据id查询：GET /api/user/1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/api/user/1&#125;&quot;</span>&gt;</span>根据id查询用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/api/user/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;根据用户id查询用户信息，用户id是&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>ok<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试：<a href="http://localhost:8080/springmvc">http://localhost:8080/springmvc</a><br><img src="https://i0.hdslb.com/bfs/article/625e85f7992097366e2829bf47f8499f645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/d158f4702410c84f07a17812cb526899645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/1a72d233d1b5d740203650b63aaf0a06645325325.png" alt="image.png"></p><p>‍</p><h3 id="查询所有-GET-api-user"><a href="#查询所有-GET-api-user" class="headerlink" title="查询所有(GET /api/user)"></a>查询所有(GET /api/user)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/api/user&#125;&quot;</span>&gt;</span>查询所有<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/api/user&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询所有用户信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/17f76b15ea3d3fbdae69a7f99e1db6ce645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/f46515bf3f05a82ff5c1723056148ec5645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/dfb02feb1951025fa98990e1c705b232645325325.png" alt="image.png"></p><p>‍</p><h2 id="RESTFul方式演示增加-POST-api-user"><a href="#RESTFul方式演示增加-POST-api-user" class="headerlink" title="RESTFul方式演示增加(POST /api/user)"></a>RESTFul方式演示增加(POST /api/user)</h2><p>RESTFul规范中规定，如果要进行保存操作，需要发送POST请求。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--保存用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/api/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/api/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;保存用户信息&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/83c7e84c1d59a699a56ef4d8111eada0645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/4d36f8c9ea44904d23ad25b9c64f61fd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/ff7445b1985d9aec134890b965c5f587645325325.png" alt="image.png"></p><p>‍</p><h2 id="RESTFul方式演示修改"><a href="#RESTFul方式演示修改" class="headerlink" title="RESTFul方式演示修改"></a>RESTFul方式演示修改</h2><p>RESTFul规范中规定，如果要进行保存操作，需要发送PUT请求。<br><strong>如何发送PUT请求？</strong><br><strong>第一步：首先你必须是一个POST请求。</strong><br><strong>第二步：在发送POST请求的时候，提交这样的数据：</strong>​<code>**_method=PUT**</code><br><strong>第三步：在web.xml文件配置SpringMVC提供的过滤器：HiddenHttpMethodFilter</strong></p><p>实践一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/api/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--隐藏域的方式提交 _method=put --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--隐藏的HTTP请求方式过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/api/user&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;修改用户信息，用户名：&quot;</span> + username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>注意pom.xml文件中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>21<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>21<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一定要重新build一下：</strong><br><img src="https://i0.hdslb.com/bfs/article/1a24cb21ecf8c233a89f6f2b98fe9fbe645325325.png" alt="image.png"></p><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/648dcc130f8cf132ce82ae2c4f8c0930645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/09b1c8c3c4500a6294d05987ec749816645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/b2a82003c63d537a00a8f090baf55022645325325.png" alt="image.png"></p><p>‍</p><h2 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h2><p>HiddenHttpMethodFilter是Spring MVC框架提供的，专门用于RESTFul编程风格。<br>实现原理可以通过源码查看：<br><img src="https://i0.hdslb.com/bfs/article/da982a3870caf43969213b5aca6c3acf645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/c0adbca97098d20ce348b05d9a4a5ed2645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/f91b5cf247b36be51736a6df48c1240b645325325.png" alt="image.png"><br>通过源码可以看到，if语句中，首先判断是否为POST请求，如果是POST请求，调用<code>request.getParameter(this.methodParam)</code>。可以看到<code>this.methodParam</code>是<code>_method</code>，这样就要求我们在提交请求方式的时候必须采用这个格式：<code>_method=put</code>。获取到请求方式之后，调用了toUpperCase转换成大写了。因此前端页面中小写的put或者大写的PUT都是可以的。if语句中嵌套的if语句说的是，只有请求方式是 PUT,DELETE,PATCH的时候会创建HttpMethodRequestWrapper对象。而HttpMethodRequestWrapper对象的构造方法是这样的：<br><img src="https://i0.hdslb.com/bfs/article/66a95e4558c2006888592913271931a5645325325.png" alt="image.png"><br>这样method就从POST变成了：PUT/DELETE/PATCH。</p><p>‍</p><p><strong>重点注意事项：CharacterEncodingFilter和HiddenHttpMethodFilter的顺序</strong><br>细心的同学应该注意到了，在HiddenHttpMethodFilter源码中有这样一行代码：<br><img src="https://i0.hdslb.com/bfs/article/fde801a9c9916124d7288079d279909c645325325.png" alt="image.png"><br>大家是否还记得，字符编码过滤器执行之前不能调用 request.getParameter方法，如果提前调用了，乱码问题就无法解决了。因为request.setCharacterEncoding()方法的执行必须在所有request.getParameter()方法之前执行。因此这两个过滤器就有先后顺序的要求，在web.xml文件中，应该先配置CharacterEncodingFilter，然后再配置HiddenHttpMethodFilter。</p><p>‍</p><h1 id="使用RESTFul实现用户管理系统"><a href="#使用RESTFul实现用户管理系统" class="headerlink" title="使用RESTFul实现用户管理系统"></a>使用RESTFul实现用户管理系统</h1><h2 id="静态页面准备"><a href="#静态页面准备" class="headerlink" title="静态页面准备"></a>静态页面准备</h2><p>文件包括：user.css、user_index.html、user_list.html、user_add.html、user_edit.html。代码如下：</p><h3 id="user-css"><a href="#user-css" class="headerlink" title="user.css"></a>user.css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style-type</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;email&quot;</span>]</span>, <span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3e8e41</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.add-button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.add-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3e8e41</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="user-index-html"><a href="#user-index-html" class="headerlink" title="user_index.html"></a>user_index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user_list.html&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/d58c30d191bd5e5a0fe36bdc3f121b34645325325.png" alt="image.png"></p><p>‍</p><h3 id="user-list-html"><a href="#user-list-html" class="headerlink" title="user_list.html"></a>user_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-button-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user_add.html&quot;</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>zhangsan@powernode.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          修改</span><br><span class="line">          删除</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>lisi@powernode.com<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          修改</span><br><span class="line">          删除</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/61f4737a6badd08a7300a00668f96acb645325325.png" alt="image.png"></p><p>‍</p><h3 id="user-add-html"><a href="#user-add-html" class="headerlink" title="user_add.html"></a>user_add.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/360c71d8da0411768ff6bd083ee2b7ac645325325.png" alt="image.png"></p><p>‍</p><h3 id="user-edit-html"><a href="#user-edit-html" class="headerlink" title="user_edit.html"></a>user_edit.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@powernode.com&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/7dacb26d0ec4b6293cea7ca20c89e623645325325.png" alt="image.png"></p><p>‍</p><h2 id="SpringMVC环境搭建"><a href="#SpringMVC环境搭建" class="headerlink" title="SpringMVC环境搭建"></a>SpringMVC环境搭建</h2><h3 id="创建module：usermgt"><a href="#创建module：usermgt" class="headerlink" title="创建module：usermgt"></a>创建module：usermgt</h3><p><img src="https://i0.hdslb.com/bfs/article/2c2d33056e3f79f4a3bdc30e77213aa3645325325.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>usermgt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet api--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--logback--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf+spring6整合依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>21<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>21<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h3 id="添加web支持"><a href="#添加web支持" class="headerlink" title="添加web支持"></a>添加web支持</h3><p><img src="https://i0.hdslb.com/bfs/article/50a79b2d01f6701c55e2fb686a3aaec2645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e0fe6352bf9481c08e6b9549441956f5645325325.png" alt="image.png"></p><p>‍</p><h3 id="配置web-xml文件"><a href="#配置web-xml文件" class="headerlink" title="配置web.xml文件"></a>配置web.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;6.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--HTTP请求方式过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意两个过滤器Filter的配置顺序：</p><ul><li>先配置 CharacterEncodingFilter</li><li>再配置 HiddenHttpMethodFilter</li></ul><p>‍</p><h3 id="配置springmvc-xml文件"><a href="#配置springmvc-xml文件" class="headerlink" title="配置springmvc.xml文件"></a>配置springmvc.xml文件</h3><p><img src="https://i0.hdslb.com/bfs/article/5eae001b474aaef1d023190aadc8d1b9645325325.png" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.usermgt.controller,com.powernode.usermgt.dao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/thymeleaf/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启默认Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在WEB-INF目录下新建：thymeleaf目录<br>创建package：<br><img src="https://i0.hdslb.com/bfs/article/3f214b27333ffe90a81a48670f6e7e25645325325.png" alt="image.png"></p><p>‍</p><h2 id="显示首页"><a href="#显示首页" class="headerlink" title="显示首页"></a>显示首页</h2><p>在应用的根下新建目录：static，将user.css文件拷贝进去。<br><img src="https://i0.hdslb.com/bfs/article/c2bfd601502301f6ade04e7c3eb84579645325325.png" alt="image.png"><br>将user_index.html拷贝到WEB-INF/thymeleaf目录下：<br><img src="https://i0.hdslb.com/bfs/article/4ece5b1a5994dafa29c1dfe1f9fe220d645325325.png" alt="image.png"><br>代码有两处需要修改：<br><img src="https://i0.hdslb.com/bfs/article/09ba728d660f85cbb0f5ead971d92131645325325.png" alt="image.png"></p><p>‍</p><p>重要：在springmvc.xml文件中配置视图控制器映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图控制器映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;user_index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>部署，启动服务器，测试：<br><img src="https://i0.hdslb.com/bfs/article/e1065f6d47f3bde9dd898bd560e7fc5b645325325.png" alt="image.png"></p><p>‍</p><h2 id="实现用户列表"><a href="#实现用户列表" class="headerlink" title="实现用户列表"></a>实现用户列表</h2><p>修改user_index.html中的超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写bean：User<br><img src="https://i0.hdslb.com/bfs/article/bebb93dd06d8f157e12552b5d432deab645325325.png" alt="image.png"></p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.usermgt.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String name, String email, Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写UserDao，提供selectAll方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.usermgt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.usermgt.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10001L</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;zhangsan@powernode.com&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10002L</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;lisi@powernode.com&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10003L</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;wangwu@powernode.com&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10004L</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;zhaoliu@powernode.com&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">10005L</span>, <span class="string">&quot;钱七&quot;</span>, <span class="string">&quot;qianqi@powernode.com&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line">        users.add(user3);</span><br><span class="line">        users.add(user4);</span><br><span class="line">        users.add(user5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写控制器UserController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.usermgt.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.usermgt.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.powernode.usermgt.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有的用户</span></span><br><span class="line">        List&lt;User&gt; users = userDao.selectAll();</span><br><span class="line">        <span class="comment">// 存储到request域</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, users);</span><br><span class="line">        <span class="comment">// 跳转视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将user_list.html拷贝到thymeleaf目录下，并进行代码修改，显示用户列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-button-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span> <span class="attr">href</span>=<span class="string">&quot;user_add.html&quot;</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.gender == 1 ? &#x27;男&#x27; : &#x27;女&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：<br>​<img src="https://i0.hdslb.com/bfs/article/dd314712d4884807a8f3470103662027645325325.png" alt="image.png">​</p><p>‍</p><h2 id="实现新增功能"><a href="#实现新增功能" class="headerlink" title="实现新增功能"></a>实现新增功能</h2><h3 id="跳转到新增页面"><a href="#跳转到新增页面" class="headerlink" title="跳转到新增页面"></a>跳转到新增页面</h3><p>在用户列表页面，修改<code>新增用户</code>的超链接：<br><img src="https://i0.hdslb.com/bfs/article/a23856670b4428e38a50e4cef82bfdb2645325325.png" alt="image.png"><br>将user_add.html拷贝到thymeleaf目录下，并进行代码修改如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http:www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>在springmvc.xml文件中配置<code>视图控制器映射</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toSave&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;user_add&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/9e993f9fca8c5ee3a5f20e0f02bde54f645325325.png" alt="image.png"></p><p>‍</p><h3 id="实现新增功能-1"><a href="#实现新增功能-1" class="headerlink" title="实现新增功能"></a>实现新增功能</h3><p>前端页面发送POST请求，提交表单，user_add.html代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http:www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写控制器UserController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="comment">// 保存用户</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    <span class="comment">// 重定向到列表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：保存成功后，采用重定向的方式跳转到用户列表。</strong></p><p>‍</p><p>编写UserDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">generateId</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// Stream API</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">maxId</span> <span class="operator">=</span> users.stream().map(user -&gt; user.getId()).reduce((id1, id2) -&gt; id1 &gt; id2 ? id1 : id2).get();</span><br><span class="line">    <span class="keyword">return</span> maxId + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="comment">// 设置id</span></span><br><span class="line">    user.setId(generateId());</span><br><span class="line">    <span class="comment">// 保存</span></span><br><span class="line">    users.add(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：单独写了一个方法生成id，内部使用了Stream API，不会这块内容的可以看老杜最新发布的2024版JavaSE。</strong></p><p>‍</p><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/f4096115b9d69a22a7127d1f86ff4778645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/9875eab0fe5c14e3cc920227def63c64645325325.png" alt="image.png"></p><p>‍</p><h2 id="跳转到修改页面"><a href="#跳转到修改页面" class="headerlink" title="跳转到修改页面"></a>跳转到修改页面</h2><p>修改user_list.html中<code>修改</code>超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/user/&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdate</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">// 根据id查询用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(id);</span><br><span class="line">    <span class="comment">// 将对象存储到request域</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="comment">// 跳转视图</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_edit&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写UserDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">selectById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> users.stream().filter(user -&gt; user.getId().equals(id)).findFirst().get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将user_edit.html拷贝thymeleaf目录下，并修改代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/dc0469c1a65009143de9c9d6c9287e5e645325325.png" alt="image.png"></p><p>‍</p><h2 id="实现修改功能"><a href="#实现修改功能" class="headerlink" title="实现修改功能"></a>实现修改功能</h2><p>将user_edit.html页面中的form表单修改一下，添加action，添加method，隐藏域的方式提交请求方式put，隐藏域的方式提交id：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--隐藏域的方式设置请求方式为put请求--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--隐藏域的方式提交id--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>-- 请选择 --<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">modify</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="comment">// 更新数据</span></span><br><span class="line">    userDao.update(user);</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写UserDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(user.getId().equals(users.get(i).getId()))&#123;</span><br><span class="line">            users.set(i, user);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/1584209d64995c182a6058e43fbae31f645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/281ad1f67e2fdca6222745693d2adb70645325325.png" alt="image.png"></p><p>‍</p><h2 id="实现删除功能"><a href="#实现删除功能" class="headerlink" title="实现删除功能"></a>实现删除功能</h2><p>删除应该发送DELETE请求，要模拟DELETE请求，就需要使用表单方式提交。因此我们点击<code>删除</code>超链接时需要采用表单方式提交。<br>在user_list.html页面添加form表单，并且点击超链接时应该提交表单，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/user.css&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;add-button-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toSave&#125;&quot;</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.gender == 1 ? &#x27;男&#x27; : &#x27;女&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/user/&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--为删除提供一个鼠标单击事件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/user/&#x27; + $&#123;user.id&#125;&#125;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del(event)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--为删除操作准备一个form表单，点击删除时提交form表单--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;delForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取表单</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> delForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delForm&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置表单action</span></span></span><br><span class="line"><span class="language-javascript">      delForm.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;您确定要删除吗？&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 提交表单</span></span></span><br><span class="line"><span class="language-javascript">        delForm.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 阻止超链接默认行为</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>编写Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    userDao.deleteById(id);</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写UserDao:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(id.equals(users.get(i).getId()))&#123;</span><br><span class="line">            users.remove(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/e780536823a6f892ce8f52f314429ffd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/f37c96a855c80547ceec7ff24ffa9393645325325.png" alt="image.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章 视图View</title>
      <link href="/posts/55583.html"/>
      <url>/posts/55583.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="SpringMVC中视图的实现原理"><a href="#SpringMVC中视图的实现原理" class="headerlink" title="SpringMVC中视图的实现原理"></a>SpringMVC中视图的实现原理</h1><h2 id="Spring-MVC视图支持可配置"><a href="#Spring-MVC视图支持可配置" class="headerlink" title="Spring MVC视图支持可配置"></a>Spring MVC视图支持可配置</h2><p>在Spring MVC中，视图View是支持定制的，例如我们之前在 springmvc.xml 文件中进行了如下的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的配置表明当前SpringMVC框架使用的视图View是Thymeleaf的。<br>如果你需要换成其他的视图View，修改以上的配置即可。这样就可以非常轻松的完成视图View的扩展。<br>这种设计是完全符合OCP开闭原则的。视图View和框架是解耦合的，耦合度低扩展能力强。视图View可以通过配置文件进行灵活切换。</p><p>‍</p><h2 id="Spring-MVC支持的常见视图"><a href="#Spring-MVC支持的常见视图" class="headerlink" title="Spring MVC支持的常见视图"></a>Spring MVC支持的常见视图</h2><p>Spring MVC支持的常见视图包括：</p><ol><li>InternalResourceView：内部资源视图（Spring MVC框架内置的，专门为<code>JSP模板语法</code>准备的）</li><li>RedirectView：重定向视图（Spring MVC框架内置的，用来完成重定向效果）</li><li>ThymeleafView：Thymeleaf视图（第三方的，为<code>Thymeleaf模板语法</code>准备的）</li><li>FreeMarkerView：FreeMarker视图（第三方的，为<code>FreeMarker模板语法</code>准备的）</li><li>VelocityView：Velocity视图（第三方的，为<code>Velocity模板语法</code>准备的）</li><li>PDFView：PDF视图（第三方的，专门用来生成pdf文件视图）</li><li>ExcelView：Excel视图（第三方的，专门用来生成excel文件视图）</li><li>……</li></ol><p>‍</p><h2 id="实现视图机制的核心接口"><a href="#实现视图机制的核心接口" class="headerlink" title="实现视图机制的核心接口"></a>实现视图机制的核心接口</h2><p>实现视图的核心类与接口包括：</p><ol><li>DispatcherServlet类（前端控制器）：<ol><li>职责：在整个Spring MVC执行流程中，负责中央调度。</li><li>核心方法：doDispatch</li></ol></li></ol><p><img src="https://i0.hdslb.com/bfs/article/98987f09d87f34949a169aa61b392e06645325325.png" alt="image.png"></p><ol><li>ViewResolver接口（视图解析器）：<ol><li>职责：负责将<code>逻辑视图名</code>转换为<code>物理视图名</code>，最终创建View接口的实现类，即视图实现类对象。</li><li>核心方法：resolveViewName</li></ol></li></ol><p><img src="https://i0.hdslb.com/bfs/article/ca1becbfcb573bc4d96b57b8d88b154e645325325.png" alt="image.png"></p><p>‍</p><ol><li>View接口（视图）:<ol><li>职责：负责将模型数据Model渲染为视图格式（HTML代码），并最终将生成的视图（HTML代码）输出到客户端。（它负责将模板语言转换成HTML代码）</li><li>核心方法：render</li></ol></li></ol><p><img src="https://i0.hdslb.com/bfs/article/f0621896fe85ce061ba006e8f081318c645325325.png" alt="image.png"></p><ol><li>ViewResolverRegistry（视图解析器注册器）：<ol><li>负责在web容器（Tomcat）启动的时候，完成视图解析器的注册。如果有多个视图解析器，会将视图解析器对象按照order的配置放入List集合。</li></ol></li></ol><p><strong>总结：</strong></p><ul><li><strong>实现视图的核心类和接口包括：ViewResolverRegistry、DispatcherServlet、ViewResolver、View</strong></li><li><strong>如果你想定制自己的视图组件：</strong><ul><li><strong>编写类实现ViewResolver接口，实现resolveViewName方法，在该方法中完成</strong>​<code>逻辑视图名</code>​<strong>转换为</strong>​<code>物理视图名</code>​ <strong>，并返回View对象。</strong></li><li><strong>编写类实现View接口，实现render方法，在该方法中将模板语言转换成HTML代码，并将HTML代码响应到浏览器。</strong></li></ul></li><li><strong>如果Spring MVC框架中使用Thymeleaf作为视图技术。那么相关的类包括：</strong><ul><li><strong>ThymeleafView</strong></li><li><strong>ThymeleafViewResolver</strong></li></ul></li></ul><p>‍</p><h2 id="实现视图机制的原理描述"><a href="#实现视图机制的原理描述" class="headerlink" title="实现视图机制的原理描述"></a>实现视图机制的原理描述</h2><p>假设我们SpringMVC中使用了Thymeleaf作为视图。<br>第一步：浏览器发送请求给web服务器<br>第二步：Spring MVC中的DispatcherServlet接收到请求<br>第三步：DispatcherServlet根据请求路径分发到对应的Controller<br>第四步：DispatcherServlet调用Controller的方法<br>第五步：Controller的方法处理业务并返回一个<code>逻辑视图名</code>给DispatcherServlet<br>第六步：DispatcherServlet调用ThymeleafViewResolver的resolveViewName方法，将<code>逻辑视图名</code>转换为<code>物理视图名</code>，并创建ThymeleafView对象返回给DispatcherServlet<br>第七步：DispatcherServlet再调用ThymeleafView的render方法，render方法将模板语言转换为HTML代码，响应给浏览器，完成最终的渲染。</p><p>假设我们SpringMVC中使用了JSP作为视图。<br>第一步：浏览器发送请求给web服务器<br>第二步：Spring MVC中的DispatcherServlet接收到请求<br>第三步：DispatcherServlet根据请求路径分发到对应的Controller<br>第四步：DispatcherServlet调用Controller的方法<br>第五步：Controller的方法处理业务并返回一个<code>逻辑视图名</code>给DispatcherServlet<br>第六步：DispatcherServlet调用<code>InternalResourceViewResolver</code>的<code>resolveViewName</code>方法，将<code>逻辑视图名</code>转换为<code>物理视图名</code>，并创建<code>InternalResourceView</code>对象返回给DispatcherServlet<br>第七步：DispatcherServlet再调用<code>InternalResourceView</code>的<code>render</code>方法，render方法将模板语言转换为HTML代码，响应给浏览器，完成最终的渲染。</p><p>‍</p><h2 id="逻辑视图名到物理视图名的转换"><a href="#逻辑视图名到物理视图名的转换" class="headerlink" title="逻辑视图名到物理视图名的转换"></a>逻辑视图名到物理视图名的转换</h2><p>逻辑视图名最终转换的物理视图名是什么，取决再springmvc.xml文件中视图解析器的配置：<br>假如视图解析器配置的是ThymeleafViewResolver，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下程序返回逻辑视图名：index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终逻辑视图名”index” 转换为物理视图名：/WEB-INF/templates/index.html</p><p>假如视图解析器配置的是InternalResourceViewResolver，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下程序返回逻辑视图名：index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终逻辑视图名”index” 转换为物理视图名：/WEB-INF/templates/index.jsp</p><p>‍</p><h1 id="Thymeleaf视图"><a href="#Thymeleaf视图" class="headerlink" title="Thymeleaf视图"></a>Thymeleaf视图</h1><p>我们在学习前面内容的时候，采用的都是Thymeleaf视图。我们再来测试一下，看看底层创建的视图对象是不是<code>ThymeleafView</code><br>springmvc.xml配置内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/thymeleaf/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>添加断点：在DispatcherServlet的doDispatch方法的下图位置添加断点<br><img src="https://i0.hdslb.com/bfs/article/448ca794d3d06e82731002f58ad5074e645325325.png" alt="image.png"></p><p>启动Tomcat，在浏览器地址栏上发送请求：<a href="http://localhost:8080/springmvc/index">http://localhost:8080/springmvc/index</a><br><img src="https://i0.hdslb.com/bfs/article/d577cf493f5febe24ba7f8e73c58f2a6645325325.png" alt="image.png"><br>程序走到以上位置，这行代码是调用对应的Controller，并且Controller最终会返回ModelAndView对象：mv<br>按照我们之前所讲，返回mv之后，接下来就是视图处理与渲染，接着往下走，走到下图这一行：<br><img src="https://i0.hdslb.com/bfs/article/a6424153f8d414f2162c6e1fb19e7d97645325325.png" alt="image.png"><br>这个方法的作用是处理分发结果，就是在这个方法当中进行了视图的处理与渲染，进入该方法：<br><img src="https://i0.hdslb.com/bfs/article/a619a35942688b2791fc7577b0a2cff8645325325.png" alt="image.png"><br>进去之后走到上图位置：这个方法就是用来渲染页面的方法，再进入该方法：<br><img src="https://i0.hdslb.com/bfs/article/fef86fd0730aae041bc90af766a72e6f645325325.png" alt="image.png"><br>走到上图位置就可以看到底层创建的是ThymeleafView对象。</p><p>‍</p><h1 id="JSP视图（了解）"><a href="#JSP视图（了解）" class="headerlink" title="JSP视图（了解）"></a>JSP视图（了解）</h1><p>我们再来跟一下源码，看看JSP视图底层创建的是不是InternalResourceView对象。<br>我们前面说过 InternalResourceView是SpringMVC框架内置的，翻译为内部资源视图，SpringMVC把JSP看做是内部资源。可见JSP在之前的技术栈中有很高的地位。<br>不过，当下流行的开发中JSP使用较少，这里不再详细讲解。只是测试一下。<br>springmvc.xml配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index jsp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index jsp!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动web容器，添加断点跟踪：<br><img src="https://i0.hdslb.com/bfs/article/b375c445ff38c5c7fcfdf81eea988ad7645325325.png" alt="image.png"><br>通过测试得知：对于JSP视图来说，底层创建的视图对象是InternalResourceView。</p><p>‍</p><h1 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h1><h2 id="回顾转发和重定向区别"><a href="#回顾转发和重定向区别" class="headerlink" title="回顾转发和重定向区别"></a>回顾转发和重定向区别</h2><ol><li>转发是一次请求。因此浏览器地址栏上的地址不会发生变化。</li><li>重定向是两次请求。因此浏览器地址栏上的地址会发生变化。</li><li>转发的代码实现：request.getRequestDispatcher(“/index”).forward(request, response);</li><li>重定向的代码实现：response.sendRedirect(“/webapproot/index”);</li><li>转发是服务器内部资源跳转，由服务器来控制。不可实现跨域访问。</li><li>重定向可以完成内部资源的跳转，也可以完成跨域跳转。</li><li>转发的方式可以访问WEB-INF目录下受保护的资源。</li><li>重定向相当于浏览器重新发送了一次请求，在浏览器直接发送的请求是无法访问WEB-INF目录下受保护的资源的。</li><li>转发原理：<ol><li>假设发送了 /a 请求，执行了 AServlet</li><li>在AServlet 中通过<code>request.getRequestDispatcher(&quot;/b&quot;).forward(request,response);</code>转发到BServlet</li><li>从AServlet跳转到BServlet是服务器内部来控制的。对于浏览器而言，浏览器只发送了一个 /a 请求。</li></ol></li><li>重定向原理：</li><li>假设发送了 /a 请求，执行了 AServlet</li><li>在AServlet 中通过<code>response.sendRedirect(&quot;/webapproot/b&quot;)</code>重定向到BServlet</li><li>此时服务器会将请求路径<code>/webapproot/b</code>响应给浏览器</li><li>浏览器会自发的再次发送<code>/webapproot/b</code>请求来访问BServlet</li><li>因此对于重定向来说，发送了两次请求，一次是 <code>/webapproot/a</code>，另一次是<code>/webapproot/b</code>。</li></ol><p>以上所描述的是使用原生Servlet API来完成转发和重定向。在Spring MVC中是如何转发和重定向的呢？</p><p>‍</p><h2 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h2><p>在Spring MVC中默认就是转发的方式，我们之前所写的程序，都是转发的方式。只不过都是转发到Thymeleaf的模板文件xxx.html上。<br>那么，在Spring MVC中如何转发到另一个Controller上呢？可以使用Spring MVC的<code>forward</code><br>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/b&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>b<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page B!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，浏览器地址栏上输入：<a href="http://localhost:8080/springmvc/a">http://localhost:8080/springmvc/a</a><br><img src="https://i0.hdslb.com/bfs/article/eefe5be709252bc578736ab2e39f17b0645325325.png" alt="image.png"><br>通过测试，可以顺利的完成转发，转发是一次请求，可以看到地址栏上的地址没有发生改变。</p><p>我们来跟踪一下源码，看看以上程序执行过程中，创建了几个视图对象，分别是什么？<br><img src="https://i0.hdslb.com/bfs/article/ce74ff1512779abdac3eb78910e547ec645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/baed80a5261d35c29899ee5319a1de2f645325325.png" alt="image.png"></p><p>‍</p><p>通过源码的跟踪得知：整个请求处理过程中，一共创建了两个视图对象</p><ul><li>InternalResourceView</li><li>ThymeleafView</li></ul><p>这说明转发底层创建的视图对象是：InternalResourceView。<br><strong>思考：既然会创建InternalResourceView，应该会对应一个视图解析器呀（InternalResourceViewResolver）？但是我在springmvc.xml文件中只配置了ThymeleafViewResolver，并没有配置InternalResourceViewResolver呀？这是为什么？</strong><br><strong>这是因为</strong>​<code>**forward:**</code><strong> 后面的不是</strong><code>**逻辑视图名**</code>​ <strong>，而是一个</strong>​<code>**请求路径**</code>​ <strong>。因此转发是不需要视图解析器的。</strong><br><strong>另外，转发使用的是InternalResourceView，也说明了转发是内部资源的跳转。（Internal是内部的意思，Resource是资源的意思。）</strong></p><p>‍</p><h2 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h2><p>redirect是专门完成重定向效果的。和forward语法类似，只需要将之前的 <code>return &quot;forward:/b&quot;</code>修改为 <code>return &quot;redirect:/b&quot;</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/a&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/b&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>b<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page B!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，浏览器地址栏上输入：<a href="http://localhost:8080/springmvc/a">http://localhost:8080/springmvc/a</a><br><img src="https://i0.hdslb.com/bfs/article/d5f0a386c26dadd11febc61f57ca72b8645325325.png" alt="image.png"><br>可见，重定向是两次请求，地址栏上的地址发生了改变。</p><p>可以看一下源码，在重定向的时候，Spring MVC创建哪个视图对象？<br><img src="https://i0.hdslb.com/bfs/article/78e9c083aec37383c3e047a1dfd0a437645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/702d084b981289940ddc32af49838942645325325.png" alt="image.png"><br>通过断点调试可以看出，当重定向的时候，SpringMVC会创建一个重定向视图对象：<strong>RedirectView</strong>。这个视图对象也是SpringMVC框架内置的。<br>另外可以看出重定向之后的第二次请求创建的视图对象就是ThymeleafView了。</p><p>‍</p><p>注意：从springmvc应用重定向到springmvc2应用（跨域），语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">a</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:http://localhost:8080/springmvc2/b&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以自行测试一下！！！</p><p>‍</p><h1 id="mvc-view-controller"><a href="#mvc-view-controller" class="headerlink" title="mvc:view-controller"></a><a href="mvc:view-controller">mvc:view-controller</a></h1><p><code>&lt;mvc:view-controller&gt;</code> 配置用于将某个请求映射到特定的视图上，即指定某一个 URL 请求到一个视图资源的映射，使得这个视图资源可以被访问。它相当于是一个独立的处理程序，不需要编写任何 Controller，只需要指定 URL 和对应的视图名称就可以了。<br>一般情况下，<code>&lt;mvc:view-controller&gt;</code> 配置可以替代一些没有业务逻辑的 Controller，例如首页、错误页面等。当用户访问配置的 URL 时，框架将直接匹配到对应的视图，而无需再经过其他控制器的处理。<br><code>&lt;mvc:view-controller&gt;</code> 配置的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/如何访问该页面&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;对应的逻辑视图名称&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>path</code>：被映射的 URL 路径。</li><li><code>view-name</code>：对应的逻辑视图名称。</li></ul><p>例如，配置首页的映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上述配置将会匹配上访问应用程序的根路径，如：<a href="http://localhost:8080/。当用户在浏览器中访问该根路径时，就会直接渲染名为">http://localhost:8080/。当用户在浏览器中访问该根路径时，就会直接渲染名为</a> <code>index</code> 的视图。</p><p>‍</p><h1 id="mvc-annotation-driven"><a href="#mvc-annotation-driven" class="headerlink" title="mvc:annotation-driven/"></a><a href="mvc:annotation-driven/">mvc:annotation-driven/</a></h1><p>在SpringMVC中，如果在springmvc.xml文件中配置了 <code>&lt;mvc:view-controller&gt;</code>，就需要同时在springmvc.xml文件中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>该配置的作用是：启用Spring MVC的注解。<br>如果没有以上的配置，Controller就无法访问到。访问之前的Controller会发生 404 问题。</p><p>‍</p><h1 id="访问静态资源"><a href="#访问静态资源" class="headerlink" title="访问静态资源"></a>访问静态资源</h1><p>一个项目可能会包含大量的静态资源，比如：css、js、images等。<br>由于我们DispatcherServlet的url-pattern配置的是“/”，之前我们说过，这个”/“代表的是除jsp请求之外的所有请求，也就是说访问应用中的静态资源，也会走DispatcherServlet，这会导致404错误，无法访问静态资源，如何解决，两种方案：</p><ul><li>使用默认 Servlet 处理静态资源</li><li>使用 <code>mvc:resources</code> 标签配置静态资源处理</li></ul><p>这两种方式都可以。自行选择。</p><p>‍</p><h2 id="使用默认Servlet处理静态资源"><a href="#使用默认Servlet处理静态资源" class="headerlink" title="使用默认Servlet处理静态资源"></a>使用默认Servlet处理静态资源</h2><p>首先需要在springmvc.xml文件中添加以下配置，开启 <code>默认Servlet处理静态资源</code> 功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启默认Servlet处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在web.xml文件中指定什么样的路径走其他Servlet：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置url-pattern使用的也是”/“，和DispatcherServlet一样。表示的含义是：<strong>同一个请求路径，先走DispatcherServlet，如果找不到则走默认的Servlet。</strong><br>默认的 Servlet 类中的代码已经由 Tomcat 服务器提供了实现，一般不需要开发者自己编写。在上面的示例中，我们指定了 <code>org.apache.catalina.servlets.DefaultServlet</code>，则 Tomcat 服务器会自动将请求转发给该类处理。在处理时，该类会根据请求的 URL 去查询 Web 应用的静态资源（如 HTML、CSS、JavaScript 和图片等），并将其返回给用户。<br>告诉大家一个好消息，以上在web.xml文件中的配置我们也可以省略了，因为在Tomcat服务器中已经为我们提前配置好了，在CATALINA_HOME/conf/web.xml文件中，如下：<br><img src="https://i0.hdslb.com/bfs/article/ce3e160f547a74fac283cacfc0887ce5645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/3f047b37da086b30fb41cf87d7a1519c645325325.png" alt="image.png"><br>因此我们只需要在springmvc.xml文件中启用这个默认的Servlet即可：<code>&lt;mvc:default-servlet-handler&gt;</code></p><p>‍</p><h2 id="使用-mvc-resources-标签配置静态资源"><a href="#使用-mvc-resources-标签配置静态资源" class="headerlink" title="使用 mvc:resources 标签配置静态资源"></a>使用 mvc:resources 标签配置静态资源</h2><p>访问静态资源，也可以在springmvc.xml文件中添加如下的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置静态资源处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/static/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/static/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>表示凡是请求路径是”/static/“开始的，都会去”/static/“目录下找该资源。<br>注意：要想使用 <code>&lt;mvc:resources&gt;</code> 配置，必须开启注解驱动 <code>&lt;mvc:annotation-driven /&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 三个域对象</title>
      <link href="/posts/57760.html"/>
      <url>/posts/57760.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet中的三个域对象"><a href="#Servlet中的三个域对象" class="headerlink" title="Servlet中的三个域对象"></a>Servlet中的三个域对象</h1><p>请求域：request<br>会话域：session<br>应用域：application<br>三个域都有以下三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向域中存储数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(String name, Object obj)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从域中读取数据</span></span><br><span class="line">Object <span class="title function_">getAttribute</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除域中的数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeAttribute</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><p>主要是通过：setAttribute + getAttribute方法来完成在域中数据的传递和共享。</p><p>‍</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>接口名：HttpServletRequest<br>简称：request<br>request对象代表了一次请求。一次请求一个request。<br>使用请求域的业务场景：在A资源中通过转发的方式跳转到B资源，因为是转发，因此从A到B是一次请求，如果想让A资源和B资源共享同一个数据，可以将数据存储到request域中。</p><p>‍</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>接口名：HttpSession<br>简称：session<br>session对象代表了一次会话。从打开浏览器开始访问，到最终浏览器关闭，这是一次完整的会话。每个会话session对象都对应一个JSESSIONID，而JSESSIONID生成后以cookie的方式存储在浏览器客户端。浏览器关闭，JSESSIONID失效，会话结束。</p><p>使用会话域的业务场景：</p><ol><li>在A资源中通过重定向的方式跳转到B资源，因为是重定向，因此从A到B是两次请求，如果想让A资源和B资源共享同一个数据，可以将数据存储到session域中。</li><li>登录成功后保存用户的登录状态。</li></ol><p>‍</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>接口名：ServletContext<br>简称：application<br>application对象代表了整个web应用，服务器启动时创建，服务器关闭时销毁。对于一个web应用来说，application对象只有一个。<br>使用应用域的业务场景：记录网站的在线人数。</p><p>‍</p><h1 id="request域对象"><a href="#request域对象" class="headerlink" title="request域对象"></a>request域对象</h1><p>在SpringMVC中，在request域中共享数据有以下几种方式：</p><ol><li>使用原生Servlet API方式。</li><li>使用Model接口。</li><li>使用Map接口。</li><li>使用ModelMap类。</li><li>使用ModelAndView类。</li></ol><p>‍</p><h2 id="使用原生Servlet-API方式"><a href="#使用原生Servlet-API方式" class="headerlink" title="使用原生Servlet API方式"></a>使用原生Servlet API方式</h2><p>在Controller的方法上使用HttpServletRequest：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: RequestScopeTestController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/18 15:20</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestScopeTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">// 向request域中存储数据</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;在SpringMVC中使用原生Servlet API实现request域数据共享&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>view<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;testRequestScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testServletAPI&#125;&quot;</span>&gt;</span>在SpringMVC中使用原生Servlet API实现request域数据共享<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710747192867-9c718af0-41ad-4be9-8d48-c2ecdbd90789-20240819075200-3guwvn3.png" alt="image.png"></p><p>这种方式当然可以，用SpringMVC框架，不建议使用原生Servlet API。</p><p>‍</p><h2 id="使用Model接口"><a href="#使用Model接口" class="headerlink" title="使用Model接口"></a>使用Model接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    <span class="comment">// 向request域中存储数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;在SpringMVC中使用Model接口实现request域数据共享&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="使用Map接口"><a href="#使用Map接口" class="headerlink" title="使用Map接口"></a>使用Map接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    <span class="comment">// 向request域中存储数据</span></span><br><span class="line">    map.put(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;在SpringMVC中使用Map接口实现request域数据共享&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用ModelMap类"><a href="#使用ModelMap类" class="headerlink" title="使用ModelMap类"></a>使用ModelMap类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    <span class="comment">// 向request域中存储数据</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;在SpringMVC中使用ModelMap实现request域数据共享&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h3 id="Model、Map、ModelMap的关系"><a href="#Model、Map、ModelMap的关系" class="headerlink" title="Model、Map、ModelMap的关系"></a>Model、Map、ModelMap的关系</h3><p>可以在以上Model、Map、ModelMap的测试程序中将其输出，看看输出什么：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710748328132-7ec71a48-8879-4758-824a-a9d669f1594a-20240819075200-hx2srie.png" alt="image.png"><br>看不出来什么区别，从输出结果上可以看到都是一样的。<br>可以将其运行时类名输出：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710748490407-0ab2044c-0261-498d-b55d-ce563afda27d-20240819075201-bxica5i.png" alt="image.png"><br>通过输出结果可以看出，无论是Model、Map还是ModelMap，底层实例化的对象都是：BindingAwareModelMap。</p><p>‍</p><p>可以查看BindingAwareModelMap的继承结构：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710748694354-caf9941e-9ce9-4215-bfe7-2d2a759ef206-20240819075201-l0md79a.png" alt="image.png"><br>通过继承结构可以看出：BindingAwareModelMap继承了ModelMap，而ModelMap又实现了Map接口。<br>另外，请看以下源码：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710748884799-5bad9d0f-9926-4ef0-a29e-7f9e5d6bd383-20240819075201-q7nuqeo.png" alt="image.png"><br>可以看出ModelMap又实现了Model接口。因此表面上是采用了不同方式，底层本质上是相同的。<br>SpringMVC之所以提供了这些方式，目的就是方便程序员的使用，提供了多样化的方式，可见它的重要性。</p><p>‍</p><h2 id="使用ModelAndView类"><a href="#使用ModelAndView类" class="headerlink" title="使用ModelAndView类"></a>使用ModelAndView类</h2><p>在SpringMVC框架中为了更好的体现MVC架构模式，提供了一个类：ModelAndView。这个类的实例封装了Model和View。也就是说这个类既封装业务处理之后的数据，也体现了跳转到哪个视图。使用它也可以完成request域数据共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 创建“模型与视图对象”</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 绑定数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;testRequestScope&quot;</span>, <span class="string">&quot;在SpringMVC中使用ModelAndView实现request域数据共享&quot;</span>);</span><br><span class="line">    <span class="comment">// 绑定视图</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;view&quot;</span>);</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式需要注意的是：</p><ol><li>方法的返回值类型不是String，而是ModelAndView对象。</li><li>ModelAndView不是出现在方法的参数位置，而是在方法体中new的。</li><li>需要调用addObject向域中存储数据。</li><li>需要调用setViewName设置视图的名字。</li></ol><p>‍</p><h3 id="ModelAndView源码分析"><a href="#ModelAndView源码分析" class="headerlink" title="ModelAndView源码分析"></a>ModelAndView源码分析</h3><p>以上我们通过了五种方式完成了request域数据共享，包括：原生Servlet API，Model、Map、ModelMap、ModelAndView<br>其中后四种：Model、Map、ModelMap、ModelAndView。这四种方式在底层DispatcherServlet调用我们的Controller之后，返回的对象都是ModelAndView，这个可以通过源码进行分析。</p><p>在以上四种方式中，拿Model举例，添加断点进行调试：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710750710855-53e8ffdd-b563-453e-afb4-70648684e619-20240819075201-lzs58bv.png" alt="image.png"><br>启动服务器，发送请求，走到断点：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710750795816-555dfc56-ccf2-43b4-b516-a737336d1e4f-20240819075201-s95u6wa.png" alt="image.png"><br>查看VM Stack信息：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710750881676-99c9c130-a6d5-4751-8e71-6de12d3ba642-20240819075201-o18igug.png" alt="image.png"><br>查看DispatcherServlet的1089行，源码如下：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710750933440-8254f738-2716-4f56-8610-4814e6fdecbf-20240819075201-k9bkvkg.png" alt="image.png"><br>可以看到这里，无论你使用哪种方式，最终都要返回一个ModelAndView对象。</p><p>提醒：大家可以通过以下断点调试方式，采用一级一级返回，最终可以看到都会返回ModelAndView对象。<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1710751055879-078ad592-a894-45fe-8d4d-1a74d9c8db79-20240819075201-s3z9sib.png" alt="image.png"></p><p>‍</p><h1 id="session域对象"><a href="#session域对象" class="headerlink" title="session域对象"></a>session域对象</h1><p>在SpringMVC中使用session域共享数据，实现方式有多种，其中比较常见的两种方式：</p><ol><li>使用原生Servlet API</li><li>使用SessionAttributes注解</li></ol><h2 id="使用原生Servlet-API"><a href="#使用原生Servlet-API" class="headerlink" title="使用原生Servlet API"></a>使用原生Servlet API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: SessionScopeTestController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/18 17:18</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionScopeTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testSessionScope1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 向会话域中存储数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;testSessionScope1&quot;</span>, <span class="string">&quot;使用原生Servlet API实现session域共享数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.testSessionScope1&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testSessionScope1&#125;&quot;</span>&gt;</span>在SpringMVC中使用原生Servlet API实现session域共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用SessionAttributes注解"><a href="#使用SessionAttributes注解" class="headerlink" title="使用SessionAttributes注解"></a>使用SessionAttributes注解</h2><p>使用SessionAttributes注解标注Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: SessionScopeTestController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/18 17:18</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;x&quot;, &quot;y&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionScopeTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testSessionScope2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testSessionAttributes</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">        <span class="comment">// 向session域中存储数据</span></span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;我是埃克斯&quot;</span>);</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;y&quot;</span>, <span class="string">&quot;我是歪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：SessionAttributes注解使用在Controller类上。标注了当key是 x 或者 y 时，数据将被存储到会话session中。如果没有 SessionAttributes注解，默认存储到request域中。</p><h1 id="application域对象"><a href="#application域对象" class="headerlink" title="application域对象"></a>application域对象</h1><p>在SpringMVC实现application域数据共享，最常见的方案就是直接使用Servlet API了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: ApplicationScopeTestController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/18 17:37</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationScopeTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testApplicationScope&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testApplicationScope</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向应用域中存储数据</span></span><br><span class="line">        application.setAttribute(<span class="string">&quot;applicationScope&quot;</span>, <span class="string">&quot;我是应用域当中的一条数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.applicationScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testApplicationScope&#125;&quot;</span>&gt;</span>在SpringMVC中使用ServletAPI实现application域共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 获取请求数据</title>
      <link href="/posts/52432.html"/>
      <url>/posts/52432.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>假设有这样一个请求：<a href="http://localhost:8080/springmvc/register?name=zhangsan&amp;password=123&amp;email=zhangsan@powernode.com">http://localhost:8080/springmvc/register?name=zhangsan&amp;password=123&amp;email=zhangsan@powernode.com</a><br>在SpringMVC中应该如何获取请求提交的数据呢？<br>在SpringMVC中又应该如何获取请求头信息呢？<br>在SpringMVC中又应该如何获取客户端提交的Cookie数据呢？</p><p>‍</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="创建模块，添加依赖"><a href="#创建模块，添加依赖" class="headerlink" title="创建模块，添加依赖"></a>创建模块，添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode.springmvc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springmvc依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--logback依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf和spring6整合的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>21<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>21<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="添加web支持"><a href="#添加web支持" class="headerlink" title="添加web支持"></a>添加web支持</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710418588238-98865609-699f-4cb6-8ce4-d85a48da0469.png#averageHue=%23f4f6f9&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=850&amp;id=u181a21ca&amp;originHeight=850&amp;originWidth=1604&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86035&amp;status=done&amp;style=none&amp;taskId=u2634e762-bd7d-476a-a5d1-8d6f119b2cb&amp;title=&amp;width=1604" alt="image.png"></p><p>‍</p><h2 id="编写web-xml文件"><a href="#编写web-xml文件" class="headerlink" title="编写web.xml文件"></a>编写web.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;6.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数来指定springmvc配置文件的路径和名字。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在服务器启动的时候初始化DispatcherServlet，提高第一次访问的效率--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="创建UserController"><a href="#创建UserController" class="headerlink" title="创建UserController"></a>创建UserController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: UserController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/14 20:05</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toRegisterPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h2 id="编写springmvc-xml"><a href="#编写springmvc-xml" class="headerlink" title="编写springmvc.xml"></a>编写springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="编写register-html文件"><a href="#编写register-html文件" class="headerlink" title="编写register.html文件"></a>编写register.html文件</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710418693211-64c3f53c-31a0-4ccd-9f2e-0023ef97afb4.png#averageHue=%23f0f3f8&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=312&amp;id=uaa19a950&amp;originHeight=312&amp;originWidth=325&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17530&amp;status=done&amp;style=none&amp;taskId=u6af9fd77-6684-4bab-9e84-264271d8332&amp;title=&amp;width=325" alt="image.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="部署测试"><a href="#部署测试" class="headerlink" title="部署测试"></a>部署测试</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710418729572-558f5f1f-b30c-48f6-be0b-be0e58ce8af9.png#averageHue=%23fafaf9&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=161&amp;id=u9fd0ed57&amp;originHeight=161&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7113&amp;status=done&amp;style=none&amp;taskId=u20f63d6b-9334-4b6f-8bf0-3e4c7ff66b8&amp;title=&amp;width=431" alt="image.png"></p><p>‍</p><h1 id="使用原生的Servlet-API进行获取"><a href="#使用原生的Servlet-API进行获取" class="headerlink" title="使用原生的Servlet API进行获取"></a>使用原生的Servlet API进行获取</h1><p>原生的Servlet API指的是：HttpServletRequest<br>在SpringMVC当中，一个Controller类中的方法参数上如果有HttpServletRequest，SpringMVC会自动将<code>**当前请求对象**</code>传递给这个参数，因此我们可以通过这个参数来获取请求提交的数据。测试一下。</p><p>在 register.html 中准备一个注册的表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先测试这个页面是否可以正常打开，是否可以正常提交数据：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710419419412-530f021a-4b19-43de-bac8-800866cfe619.png#averageHue=%23fbfafa&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=448&amp;id=u513b4a69&amp;originHeight=448&amp;originWidth=528&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16298&amp;status=done&amp;style=none&amp;taskId=ua1ab7921-0cf4-4da0-8951-30e90d9579c&amp;title=&amp;width=528" alt="image.png"></p><p>‍</p><p>点击注册：F12的方式查看是否提交了数据：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710419495559-af90ea42-1002-4cab-8e38-c455b3b0a16d.png#averageHue=%23eac989&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=106&amp;id=u8fe6a988&amp;originHeight=106&amp;originWidth=714&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8446&amp;status=done&amp;style=none&amp;taskId=u1e08d80d-c03f-4c2a-afdc-342241e7725&amp;title=&amp;width=714" alt="image.png"><br>通过测试得知：可以正常提交数据。</p><p>接下来在控制器添加一个方法来处理这个注册的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">// 通过当前请求对象获取提交的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">intro</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;intro&quot;</span>);</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + Arrays.toString(hobbies) + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>测试：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710419827530-70740ef1-28a3-4766-9825-6d0cb5ebbf4a.png#averageHue=%23fafaf9&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=361&amp;id=ufbf91ed1&amp;originHeight=361&amp;originWidth=559&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11349&amp;status=done&amp;style=shadow&amp;taskId=u8c5d516a-57fd-4c32-9b95-54bd42ad933&amp;title=&amp;width=559" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710419792573-b4d36148-dff4-45f6-ab97-e6de4e74a362.png#averageHue=%23f8f8f7&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=186&amp;id=u9190ef01&amp;originHeight=186&amp;originWidth=485&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9784&amp;status=done&amp;style=shadow&amp;taskId=udb2f3c31-74ad-428b-adb6-434939d6e31&amp;title=&amp;width=485" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710419813547-5bb0218a-f11c-4438-982c-fc06964e7d45.png#averageHue=%23f7f4f0&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=102&amp;id=ud56d10fb&amp;originHeight=102&amp;originWidth=644&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19165&amp;status=done&amp;style=shadow&amp;taskId=ufe093b32-8c7e-421c-9d97-c24aab5cb22&amp;title=&amp;width=644" alt="image.png"></p><p><strong>这样通过Servlet原生的API获取到提交的数据。但是这种方式不建议使用，因为方法的参数依赖Servlet原生API，Controller的测试将不能单独测试，必须依赖WEB服务器才能测试。另外，换句话说，如果在SpringMVC中使用了原生的Servlet，你为什么还要用SpringMVC框架呢！！！！！</strong></p><p>‍</p><h1 id="使用RequestParam注解标注"><a href="#使用RequestParam注解标注" class="headerlink" title="使用RequestParam注解标注"></a>使用RequestParam注解标注</h1><h2 id="RequestParam注解的基本使用"><a href="#RequestParam注解的基本使用" class="headerlink" title="RequestParam注解的基本使用"></a>RequestParam注解的基本使用</h2><p>RequestParam注解作用：将<code>请求参数</code>与方法上的<code>形参</code>映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">        String a,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;password&quot;)</span></span></span><br><span class="line"><span class="params">        String b,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;sex&quot;)</span></span></span><br><span class="line"><span class="params">        String c,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value=&quot;hobby&quot;)</span></span></span><br><span class="line"><span class="params">        String[] d,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name=&quot;intro&quot;)</span></span></span><br><span class="line"><span class="params">        String e)</span> &#123;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    System.out.println(Arrays.toString(d));</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：对于@RequestParam注解来说，属性有value和name，这两个属性的作用相同，都是用来指定提交数据的name。<br><img src="https://cdn.nlark.com/yuque/0/2024/png/21376908/1710428008416-73b3a547-46ab-47bb-922c-b3d090e0cfc9.png#averageHue=%23fdfbf8&amp;clientId=u9d1e8f4e-33cf-4&amp;from=paste&amp;height=331&amp;id=uaf3c3ba7&amp;originHeight=331&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30298&amp;status=done&amp;style=shadow&amp;taskId=u950651dd-684e-4de9-af50-2e721a82b8c&amp;title=&amp;width=494" alt="image.png"><br>例如：发送请求时提交的数据是：name1=value1&amp;name2=value2，则这个注解应该这样写：@RequestParam(value=”name1”)、@RequestParam(value=”name2”)</p><p>‍</p><p>启动服务器测试：<br><img src="https://i0.hdslb.com/bfs/article/2e1c6aa7325b6c3ac5cd24711352754e645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/258da1ef4593d0841dc8aad4be7c4b6a645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/0b1b9130513e353562edec86c03ae109645325325.png" alt="image.png"></p><p>一定要注意： @RequestParam(value=”name2”) 中value一定不要写错，写错就会出现以下问题：<br><img src="https://i0.hdslb.com/bfs/article/8499c2f92aac36cf58cdce4c7df5286a645325325.png" alt="image.png"><br>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/f4d9917978bfaf4ea1a962b9c33d3417645325325.png" alt="image.png"></p><p>‍</p><h2 id="RequestParam注解的required属性"><a href="#RequestParam注解的required属性" class="headerlink" title="RequestParam注解的required属性"></a>RequestParam注解的required属性</h2><p><img src="https://i0.hdslb.com/bfs/article/a41c4956303741a6fdde932259cabfaf645325325.png" alt="image.png"><br>required属性用来设置该方法参数是否为必须的。<br>默认情况下，这个参数为 <code>true</code>，表示方法参数是必需的。如果请求中缺少对应的参数，则会抛出异常。<br>可以将其设置为<code>false</code>，false表示不是必须的，如果请求中缺少对应的参数，则方法的参数为null。</p><p>测试，修改register方法，如下：<br><img src="https://i0.hdslb.com/bfs/article/05e42dad396c294dee5273e2c5e55f4d645325325.png" alt="image.png"></p><p>‍</p><p>添加了一个 age 形参，没有指定 required 属性时，默认是true，表示必需的，但前端表单中没有年龄age，我们来看报错信息：<br><img src="https://i0.hdslb.com/bfs/article/99c291101e7b5b92df12e0a54b470519645325325.png" alt="image.png"><br>错误信息告诉我们：参数age是必需的。没有提供这个请求参数，HTTP状态码 400</p><p>如果将 required 属性设置为 false。则该参数则不是必须的，如果请求参数仍然未提供时，我们来看结果：<br><img src="https://i0.hdslb.com/bfs/article/9ac32cb0f0095284b7d1b60b31e43369645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/30a026f302bfe1df921e88b5918b01eb645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/0d6c57f24ff351df360b6401f784c7cf645325325.png" alt="image.png"><br>通过测试得知，如果一个参数被设置为<code>不是必需的</code>，当没有提交对应的请求参数时，形参默认值null。<br>当然，如果请求参数中提供了age，则age为真实提交的数据：<br><img src="https://i0.hdslb.com/bfs/article/a18ea4d7b6d27d72f258aa818c06dadb645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/2e76f3855ceb4a933b2788c16bffda8a645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/651455217742328e55734fcba4d68bca645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/2782c675e4d97d98a541e2d3e93ef904645325325.png" alt="image.png"></p><p>‍</p><h2 id="RequestParam注解的defaultValue属性"><a href="#RequestParam注解的defaultValue属性" class="headerlink" title="RequestParam注解的defaultValue属性"></a>RequestParam注解的defaultValue属性</h2><p>defaultValue属性用来设置形参的默认值，当<code>没有提供对应的请求参数</code>或者<code>请求参数的值是空字符串&quot;&quot;</code>的时候，方法的形参会采用默认值。<br><img src="https://i0.hdslb.com/bfs/article/c7131f94f6ebc1be47d72a83ee7f64f5645325325.png" alt="image.png"></p><p>当前端页面没有提交email的时候：<br><img src="https://i0.hdslb.com/bfs/article/dd5abb3aba7ec2884e0379fe220b5ed3645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/792b12c9b86f211bae9201df70abc2d9645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e571208c034b4eb4098b857d7cd26141645325325.png" alt="image.png"></p><p>当前端页面提交的email是空字符串的时候：<br><img src="https://i0.hdslb.com/bfs/article/8390df2df637a41f1574593371437bf7645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/f81a7222c87d8e2a892668dd619bb526645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/73253ae4f64abd609f4d0d664a84423e645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/a541b49316ed964705e6811844f7eb29645325325.png" alt="image.png"></p><p>‍</p><p>当前端提交的email不是空字符串的时候：<br><img src="https://i0.hdslb.com/bfs/article/d204a1a766ac96ff84470a2fcefdbddd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/2676126a0da43e1fec769c03d769a9cd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/fb538b02ab600bca1e55aa41fdade479645325325.png" alt="image.png"></p><p>‍</p><h1 id="依靠控制器方法上的形参名来接收"><a href="#依靠控制器方法上的形参名来接收" class="headerlink" title="依靠控制器方法上的形参名来接收"></a>依靠控制器方法上的形参名来接收</h1><p>@RequestParam 这个注解是可以省略的，如果方法形参的名字和提交数据时的name相同，则 @RequestParam 可以省略。</p><p>但有一个前提：如果你采用的是Spring6+版本，你需要在pom.xml文件中指定编译参数’-parameter’，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>21<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>21<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果你使用的是Spring5的版本，以上的配置是不需要的。</strong></p><p>Controller中的方法只需要这样写：<strong>形参的名字必须和提交的数据的name一致！！！！！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(String username, String password, String sex, String[] hobby, String intro)</span>&#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + Arrays.toString(hobby) + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/d2ecd901d29dfc4dfe539ee17ae5255f645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/12623e827c2050db38c5ef7909338755645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/0e79c33e64e89077c757dc522a9bf62d645325325.png" alt="image.png"></p><p>‍</p><p>如果形参名和提交的数据的name不一致时：<br><img src="https://i0.hdslb.com/bfs/article/2d6638a5f1f5921258cc8843e1dc2830645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/eaba95bbda1b1f21a68812513d37125e645325325.png" alt="image.png"></p><p>另外，还有一点，对于提交的hobby数据，也可以采用String来接收，不一定使用数组方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value=&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(String username, String password, String sex, String hobby, String intro)</span>&#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot;,&quot;</span> + password + <span class="string">&quot;,&quot;</span> + sex + <span class="string">&quot;,&quot;</span> + hobby + <span class="string">&quot;,&quot;</span> + intro);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/7025e8995ff1c991e91a8f4a9bbe8629645325325.png" alt="image.png"><br>根据输出结果可以看到多个hobby是采用“,”进行连接的。</p><p>‍</p><h1 id="使用POJO类-JavaBean接收请求参数"><a href="#使用POJO类-JavaBean接收请求参数" class="headerlink" title="使用POJO类/JavaBean接收请求参数"></a>使用POJO类/JavaBean接收请求参数</h1><p>以上方式大家可以看到，当提交的数据非常多时，方法的形参个数会非常多，这不是很好的设计。在SpringMVC中也可以使用POJO类/JavaBean来接收请求参数。不过有一个非常重要的要求：<code>POJO类的属性名</code>必须和<code>请求参数的参数名</code>保持一致。提供以下的JavaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: User</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/15 10:51</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String username, String password, String sex, String[] hobby, String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">        <span class="built_in">this</span>.intro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIntro</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntro</span><span class="params">(String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.intro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobby=&quot;</span> + Arrays.toString(hobby) +</span><br><span class="line">                <span class="string">&quot;, intro=&#x27;&quot;</span> + intro + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在控制器方法的形参位置上使用javabean来接收请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/3cad9ae2abe9fb4eed7cdbf24ec29837645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/bf294322ffe69511c7c0f2320db04e6b645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/ee71a858d9c54888361c5fe92bf9dd8f645325325.png" alt="image.png"></p><p><strong>底层的实现原理：反射机制。先获取请求参数的名字，因为请求参数的名字就是JavaBean的属性名，通过这种方式给对应的属性赋值</strong>。</p><p>‍</p><p>我们来测试一下：当JavaBean的属性名和请求参数的参数名不一致时，会出现什么问题？（注意：<strong>getter和setter的方法名不修改，只修改属性名</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: User</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/15 10:51</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String upwd;</span><br><span class="line">    <span class="keyword">private</span> String usex;</span><br><span class="line">    <span class="keyword">private</span> String[] uhobby;</span><br><span class="line">    <span class="keyword">private</span> String uintro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String username, String password, String sex, String[] hobby, String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.uname = username;</span><br><span class="line">        <span class="built_in">this</span>.upwd = password;</span><br><span class="line">        <span class="built_in">this</span>.usex = sex;</span><br><span class="line">        <span class="built_in">this</span>.uhobby = hobby;</span><br><span class="line">        <span class="built_in">this</span>.uintro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uname = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upwd = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> uhobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uhobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIntro</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uintro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntro</span><span class="params">(String intro)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uintro = intro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + uname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + upwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + usex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hobby=&quot;</span> + Arrays.toString(uhobby) +</span><br><span class="line">                <span class="string">&quot;, intro=&#x27;&quot;</span> + uintro + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/77dd40d88a195c0e4e0fecfc00597c95645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/512a4c3373355f2715cae453942fcb09645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/ce25946c95a255b3aeceddadea81f646645325325.png" alt="image.png"><br>通过测试，我们得知：<code>请求参数名</code>可以和<code>JavaBean的属性名</code>不一致。</p><p>我们继续将其中一个属性的setter和getter方法名修改一下：<br><img src="https://i0.hdslb.com/bfs/article/30fe627055ff07bb8c16c14d3e0f9542645325325.png" alt="image.png"></p><p>‍</p><p>再次测试：<br><img src="https://i0.hdslb.com/bfs/article/a14146ebc05d424e8a6748a09bc7c10f645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/470d26e7c490544e941cbb171548c165645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/ffc42f2686716f8b9bd739605ebb7e2d645325325.png" alt="image.png"></p><p><strong>通过测试可以看到：username属性没有赋上值。可见请求参数是否可以赋值到JavaBean对应的属性上，不是取决于属性名，而是setter方法名</strong>。</p><p>‍</p><h1 id="RequestHeader注解"><a href="#RequestHeader注解" class="headerlink" title="RequestHeader注解"></a>RequestHeader注解</h1><p>该注解的作用是：将<code>请求头信息</code>映射到<code>方法的形参上</code>。<br>和RequestParam注解功能相似，RequestParam注解的作用：将<code>请求参数</code>映射到<code>方法的形参</code>上。<br>当然，对于RequestHeader注解来说，也有三个属性：value、required、defaultValue，和RequestParam一样，这里就不再赘述了。</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user, </span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestHeader(value=&quot;Referer&quot;, required = false, defaultValue = &quot;&quot;)</span> </span></span><br><span class="line"><span class="params">                       String referer)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(referer);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/b8fec90fb82bb8c5b89f532460ac4e47645325325.png" alt="image.png"></p><p>‍</p><h1 id="CookieValue注解"><a href="#CookieValue注解" class="headerlink" title="CookieValue注解"></a>CookieValue注解</h1><p>该注解的作用：将<code>请求提交的Cookie数据</code>映射到<code>方法形参</code>上<br>同样是有三个属性：value、required、defaultValue</p><p>前端页面中编写发送cookie的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendCookie</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;id=123456789; expires=Thu, 18 Dec 2025 12:00:00 UTC; path=/&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">location</span> = <span class="string">&quot;/springmvc/register&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;sendCookie()&quot;</span>&gt;</span>向服务器端发送Cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端UserController代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestHeader(value=&quot;Referer&quot;, required = false, defaultValue = &quot;&quot;)</span></span></span><br><span class="line"><span class="params">                       String referer,</span></span><br><span class="line"><span class="params">                       <span class="meta">@CookieValue(value=&quot;id&quot;, required = false, defaultValue = &quot;2222222222&quot;)</span></span></span><br><span class="line"><span class="params">                       String id)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    System.out.println(referer);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/e1fcf42b7803d2bfeb75c6b0a71151e3645325325.png" alt="image.png"></p><p>‍</p><h1 id="请求的中文乱码问题"><a href="#请求的中文乱码问题" class="headerlink" title="请求的中文乱码问题"></a>请求的中文乱码问题</h1><h2 id="get请求乱码"><a href="#get请求乱码" class="headerlink" title="get请求乱码"></a>get请求乱码</h2><p>get请求数据在URI后面提交，这个乱码问题怎么解决呢？解决办法是找到 CATALINA_HOME/config/server.xml文件，找到其中配置端口号的标签<Connector>，在该标签中添加  URIEncoding=”UTF-8”。但是对于高版本的Tomcat服务器来说，是不需要设置的，例如Tomcat10，Tomcat9，有如下的默认配置，在默认情况下URIEncoding使用的就是UTF-8的编码方式。<br><img src="https://i0.hdslb.com/bfs/article/80c264336dd8bf417154da438301c932645325325.png" alt="image.png"><br>但对于低版本的Tomcat服务器，例如：Tomcat8。URIEncoding的默认配置是ISO-8859-1，因此在Tomcat8中需要手动配置server.xml文件：<br><img src="https://i0.hdslb.com/bfs/article/ab293b183e6e6be1f4476c34d66a6f6f645325325.png" alt="image.png"><br>配置如下：<br><img src="https://i0.hdslb.com/bfs/article/9f93d2200648b5a3add983b61f3ed4da645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e770c35c247f60d09e9dda8d999d1921645325325.png" alt="image.png"></p><p>‍</p><p>接下来，我们测试一下，在默认情况下，Tomcat10是否已经解决了get请求乱码问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，以上表单已经修改为get请求了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/d940f1571eac34dc8086fc1ca5761e38645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/30dd7c1ba8e6e5b2c3db470a4afceff6645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/b4ac209e5e88fc918dc80630864e08ea645325325.png" alt="image.png"></p><p>‍</p><h2 id="post请求乱码"><a href="#post请求乱码" class="headerlink" title="post请求乱码"></a>post请求乱码</h2><p>post请求是解决请求体的中文乱码问题。解决办法大家都知道：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>同样，对于高版本的<strong>Tomcat10</strong>服务器来说，针对请求体中的字符编码也是配置好的，默认也是采用了UTF-8，中文乱码问题也解决了，在这个文件中配置的：apache-tomcat-10.1.19\conf\web.xml<br>配置内容如下：<br><img src="https://i0.hdslb.com/bfs/article/e6352cac44a08491591720565589461a645325325.png" alt="image.png"><br>通过以上配置可以看到，Tomcat10对请求和响应都设置了默认的字符编码方式为UTF-8<br><strong>一定要注意：Tomcat9以及之前的版本，以上的配置是没有的。</strong></p><p>我们来测试一下，针对Tomcat10来说，SpringMVC会不会有乱码问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：以上表单已经修改为post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user, HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/9446c1bdf39ee3ff38c5ab2b08826ff2645325325.png" alt="image.png"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/238e0beab97e5d4fda9d341982866b27645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/d2c185173a29fd40b0a4545733589bae645325325.png" alt="image.png"><br>通过测试可以看到在Tomcat10当中，默认SpringMVC，发送POST请求，是不会出现乱码问题的。</p><p>有可能很多同学使用的不是Tomcat10，如果不是Tomcat10，则会出现乱码问题，我们来模拟一下乱码的产生，将apache-tomcat-10.1.19\conf\web.xml文件中的UTF-8配置修改为ISO-8859-1：<br><img src="https://i0.hdslb.com/bfs/article/c4c0bf941d80cf3ed5a93ef37c257842645325325.png" alt="image.png"><br><strong>一定要重启Tomcat10</strong>，新的配置才能生效，来测试一下是否存在乱码：<br><img src="https://i0.hdslb.com/bfs/article/63e6c577881c4f2427798d16b36c13b9645325325.png" alt="image.png"></p><p>那么，在SpringMVC中如何解决请求体的中文乱码问题呢？当然，还是使用<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code><br>使用它有一个前提条件，要想解决请求体乱码问题，以上代码必须在 <code>request.getParameter(&quot;username&quot;)</code>执行之前执行才有效。<br>也就是说以上代码如果放在Controller的相关方法中执行是无效的，因为Controller的方法在执行之前 DispatcherServlet已经调用了 <code>request.getParameter(&quot;username&quot;)</code>方法。因此在Controller方法中使用<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code>无效我们来测试一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/register&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">        男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        抽烟 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span></span><br><span class="line">        喝酒 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span></span><br><span class="line">        烫头 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;60&quot;</span> <span class="attr">name</span>=<span class="string">&quot;intro&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：以上表单已经修改为post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(User user, HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>测试结果：<br><img src="https://i0.hdslb.com/bfs/article/9446c1bdf39ee3ff38c5ab2b08826ff2645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/63e6c577881c4f2427798d16b36c13b9645325325.png" alt="image.png"><br>通过测试可以看到：在Controller当中调用<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>是无法解决POST乱码问题的。</p><p>‍</p><p>那怎么办呢？怎么样才能在DispatcherServlet之前执行<code>request.setCharacterEncoding(&quot;UTF-8&quot;)</code>呢？没错，我相信大家想到了：过滤器Filter。过滤器Filter可以在Servlet执行之前执行。有同学又说了：监听器不行吗？不行。因为我们需要对每一次请求解决乱码，而监听器只在服务器启动阶段执行一次。因此这里解决每一次请求的乱码问题，应该使用过滤器Filter。并且，告诉大家一个好消息，SpringMVC已经将这个字符编码的过滤器提前写好了，我们直接配置好即可：<code>CharacterEncodingFilter</code>，我们一起看一下它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2018 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet Filter that allows one to specify a character encoding for requests.</span></span><br><span class="line"><span class="comment"> * This is useful because current browsers typically do not set a character</span></span><br><span class="line"><span class="comment"> * encoding even if specified in the HTML page or form.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This filter can either apply its encoding if the request does not already</span></span><br><span class="line"><span class="comment"> * specify an encoding, or enforce this filter&#x27;s encoding in any case</span></span><br><span class="line"><span class="comment"> * (&quot;forceEncoding&quot;=&quot;true&quot;). In the latter case, the encoding will also be</span></span><br><span class="line"><span class="comment"> * applied as default response encoding (although this will usually be overridden</span></span><br><span class="line"><span class="comment"> * by a full content type set in the view).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 15.03.2004</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setEncoding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceEncoding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> jakarta.servlet.http.HttpServletRequest#setCharacterEncoding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> jakarta.servlet.http.HttpServletResponse#setCharacterEncoding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> String encoding;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">forceRequestEncoding</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">forceResponseEncoding</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a default &#123;<span class="doctag">@code</span> CharacterEncodingFilter&#125;,</span></span><br><span class="line"><span class="comment"> * with the encoding to be set via &#123;<span class="doctag">@link</span> #setEncoding&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setEncoding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CharacterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> CharacterEncodingFilter&#125; for the given encoding.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoding the encoding to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setEncoding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CharacterEncodingFilter</span><span class="params">(String encoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(encoding, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> CharacterEncodingFilter&#125; for the given encoding.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoding the encoding to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> forceEncoding whether the specified encoding is supposed to</span></span><br><span class="line"><span class="comment"> * override existing request and response encodings</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setEncoding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceEncoding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CharacterEncodingFilter</span><span class="params">(String encoding, <span class="type">boolean</span> forceEncoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(encoding, forceEncoding, forceEncoding);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a &#123;<span class="doctag">@code</span> CharacterEncodingFilter&#125; for the given encoding.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encoding the encoding to apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> forceRequestEncoding whether the specified encoding is supposed to</span></span><br><span class="line"><span class="comment"> * override existing request encodings</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> forceResponseEncoding whether the specified encoding is supposed to</span></span><br><span class="line"><span class="comment"> * override existing response encodings</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setEncoding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceRequestEncoding(boolean)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceResponseEncoding(boolean)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CharacterEncodingFilter</span><span class="params">(String encoding, <span class="type">boolean</span> forceRequestEncoding, <span class="type">boolean</span> forceResponseEncoding)</span> &#123;</span><br><span class="line">Assert.hasLength(encoding, <span class="string">&quot;Encoding must not be empty&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.encoding = encoding;</span><br><span class="line"><span class="built_in">this</span>.forceRequestEncoding = forceRequestEncoding;</span><br><span class="line"><span class="built_in">this</span>.forceResponseEncoding = forceResponseEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the encoding to use for requests. This encoding will be passed into a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> jakarta.servlet.http.HttpServletRequest#setCharacterEncoding&#125; call.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Whether this encoding will override existing request encodings</span></span><br><span class="line"><span class="comment"> * (and whether it will be applied as default response encoding as well)</span></span><br><span class="line"><span class="comment"> * depends on the &#123;<span class="doctag">@link</span> #setForceEncoding &quot;forceEncoding&quot;&#125; flag.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncoding</span><span class="params">(<span class="meta">@Nullable</span> String encoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.encoding = encoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the configured encoding for requests and/or responses.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEncoding</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.encoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set whether the configured &#123;<span class="doctag">@link</span> #setEncoding encoding&#125; of this filter</span></span><br><span class="line"><span class="comment"> * is supposed to override existing request and response encodings.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Default is &quot;false&quot;, i.e. do not modify the encoding if</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> jakarta.servlet.http.HttpServletRequest#getCharacterEncoding()&#125;</span></span><br><span class="line"><span class="comment"> * returns a non-null value. Switch this to &quot;true&quot; to enforce the specified</span></span><br><span class="line"><span class="comment"> * encoding in any case, applying it as default response encoding as well.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is the equivalent to setting both &#123;<span class="doctag">@link</span> #setForceRequestEncoding(boolean)&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@link</span> #setForceResponseEncoding(boolean)&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceRequestEncoding(boolean)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setForceResponseEncoding(boolean)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setForceEncoding</span><span class="params">(<span class="type">boolean</span> forceEncoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.forceRequestEncoding = forceEncoding;</span><br><span class="line"><span class="built_in">this</span>.forceResponseEncoding = forceEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set whether the configured &#123;<span class="doctag">@link</span> #setEncoding encoding&#125; of this filter</span></span><br><span class="line"><span class="comment"> * is supposed to override existing request encodings.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Default is &quot;false&quot;, i.e. do not modify the encoding if</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> jakarta.servlet.http.HttpServletRequest#getCharacterEncoding()&#125;</span></span><br><span class="line"><span class="comment"> * returns a non-null value. Switch this to &quot;true&quot; to enforce the specified</span></span><br><span class="line"><span class="comment"> * encoding in any case.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setForceRequestEncoding</span><span class="params">(<span class="type">boolean</span> forceRequestEncoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.forceRequestEncoding = forceRequestEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return whether the encoding should be forced on requests.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isForceRequestEncoding</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.forceRequestEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set whether the configured &#123;<span class="doctag">@link</span> #setEncoding encoding&#125; of this filter</span></span><br><span class="line"><span class="comment"> * is supposed to override existing response encodings.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Default is &quot;false&quot;, i.e. do not modify the encoding.</span></span><br><span class="line"><span class="comment"> * Switch this to &quot;true&quot; to enforce the specified encoding</span></span><br><span class="line"><span class="comment"> * for responses in any case.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setForceResponseEncoding</span><span class="params">(<span class="type">boolean</span> forceResponseEncoding)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.forceResponseEncoding = forceResponseEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return whether the encoding should be forced on responses.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isForceResponseEncoding</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.forceResponseEncoding;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getEncoding();</span><br><span class="line"><span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="literal">null</span>) &#123;</span><br><span class="line">request.setCharacterEncoding(encoding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">response.setCharacterEncoding(encoding);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><p>最核心的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> getEncoding();</span><br><span class="line">    <span class="keyword">if</span> (encoding != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">            response.setCharacterEncoding(encoding);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析以上核心方法得知该过滤器对请求和响应都设置了字符编码方式。</p><ul><li>当<code>强行使用请求字符编码方式为true</code>时，或者<code>请求对象的字符编码方式为null</code>时，设置请求的字符编码方式。</li><li>当<code>强行使用响应字符编码方式为true</code>时，设置响应的字符编码方式。</li></ul><p>‍</p><p>根据以上代码，可以得出以下配置信息，在web.xml文件中对过滤器进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>我们再来测试，重启Tomcat10，看看乱码是否能够解决？<br><img src="https://i0.hdslb.com/bfs/article/058d2ceed044f778af88dc050aa49130645325325.png" alt="image.png"></p><p>注意：针对于我们当前的Tomcat10的配置来说，它有默认的字符集ISO-8859-1，因此以下在web.xml文件中的配置是不能缺少的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果缺少它，仍然是会存在乱码问题的。自行测试一下！！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 RequestMapping注解</title>
      <link href="/posts/45168.html"/>
      <url>/posts/45168.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-RequestMapping的作用"><a href="#1-RequestMapping的作用" class="headerlink" title="1. RequestMapping的作用"></a>1. RequestMapping的作用</h1><p><code>@RequestMapping</code>​ 注解是 Spring MVC 框架中的一个控制器映射注解，用于将请求映射到相应的处理方法上。具体来说它可以将指定 URL 的请求绑定到一个特定的方法或类上，从而实现对请求的处理和响应。</p><h1 id="2-RequestMapping的出现位置"><a href="#2-RequestMapping的出现位置" class="headerlink" title="2. RequestMapping的出现位置"></a>2. RequestMapping的出现位置</h1><p><img src="https://i0.hdslb.com/bfs/article/4837fc0e3d61efbe3fd0efcf50abc81b645325325.png" alt="img">​</p><p><span data-type="text" style="background-color: var(--b3-font-background12);">通过RequestMapping的源码可以看到RequestMapping注解只能出现在类上或者方法上。</span></p><h1 id="3-类上与方法上结合使用"><a href="#3-类上与方法上结合使用" class="headerlink" title="3. 类上与方法上结合使用"></a>3. 类上与方法上结合使用</h1><p>我们先来看，在同一个web应用中，是否可以有两个完全一样的RequestMapping。测试一下：假设两个RequestMapping，其中一个是展示用户详细信息，另一个是展示商品详细信息。提供两个Controller，一个是UserController，另一个是ProductController。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: UserController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: ProductController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两个Controller的RequestMapping相同，都是”/detail”，我们来启动服务器看会不会出现问题：异常发生了，异常信息如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: </span><br><span class="line">Error creating bean with name <span class="string">&#x27;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#x27;</span>: </span><br><span class="line">Ambiguous mapping. Cannot map <span class="string">&#x27;userController&#x27;</span> method </span><br><span class="line">com.powernode.springmvc.controller.UserController#toDetail()</span><br><span class="line">to &#123; [/detail]&#125;: There is already <span class="string">&#x27;productController&#x27;</span> bean method</span><br><span class="line">com.powernode.springmvc.controller.ProductController#toDetail() mapped.</span><br></pre></td></tr></table></figure><p>以上异常信息大致的意思是：不明确的映射。无法映射UserController中的toDetail()方法，因为已经在ProductController中映射过了！！！！</p><p>通过测试得知，<span data-type="text" style="color: var(--b3-font-color4);">在同一个webapp中，RequestMapping必须具有唯一性</span>。怎么解决以上问题？两种解决方案：</p><ul><li>第一种方案：将方法上RequestMapping的映射路径修改的不一样。</li><li>第二种方案：在类上添加RequestMapping的映射路径，以类上的RequestMapping作为命名空间，来加以区分两个不同的映射。</li></ul><h2 id="3-1-第一种方案"><a href="#3-1-第一种方案" class="headerlink" title="3.1. 第一种方案"></a>3.1. 第一种方案</h2><p>将方法上RequestMapping的映射路径修改的不一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product/detail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动web服务器，会发现没有再报错了。</p><p>为这两个请求分别提供对应的视图页面：</p><p><img src="https://i0.hdslb.com/bfs/article/bf0ee5e6bc496add07c446062db1fa5a645325325.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户详情页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在首页面添加两个超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Tomcat服务器，并测试：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a></p><p><img src="https://i0.hdslb.com/bfs/article/c4544dcfcc4431cb0cf7413b7df2e10d645325325.png" alt="img"></p><p>点击用户详情，点击商品详情，都可以正常显示：</p><p><img src="https://i0.hdslb.com/bfs/article/348184437e12748e693f98aa1a530506645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/daf264c8c4f4f838744bf03538ae6517645325325.png" alt="img"></p><p>‍</p><h2 id="3-2-第二种方案"><a href="#3-2-第二种方案" class="headerlink" title="3.2. 第二种方案"></a>3.2. 第二种方案</h2><p>在类上和方法上都使用RequestMapping注解来进行路径的映射。假设在类上映射的路径是”/a”，在方法上映射的路径是”/b”，那么整体表示映射的路径就是：”/a/b”</p><p>在第一种方案中，假设UserController类中有很多方法，每个方法的 RequestMapping注解中都需要以”/user”开始，显然比较啰嗦，干脆将”/user”提升到类级别上，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: UserController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/user/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: ProductController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 16:40</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/detail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toDetail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/product/detail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试，程序可以正常执行！！！</p><p>‍</p><h1 id="4-RequestMapping注解的value属性"><a href="#4-RequestMapping注解的value属性" class="headerlink" title="4. RequestMapping注解的value属性"></a>4. RequestMapping注解的value属性</h1><h2 id="4-1-value属性的使用"><a href="#4-1-value属性的使用" class="headerlink" title="4.1. value属性的使用"></a>4.1. value属性的使用</h2><p>value属性是该注解最核心的属性，value属性填写的是请求路径，也就是说通过该请求路径与对应的控制器的方法绑定在一起。另外通过源码可以看到value属性是一个字符串数组：</p><p><img src="https://i0.hdslb.com/bfs/article/32623ec8a99f868b6edd8c44c5deaa8a645325325.png" alt="img"></p><p>既然是数组，就表示可以提供多个路径，也就是说，在SpringMVC中，多个不同的请求路径可以映射同一个控制器的同一个方法：</p><p>编写新的控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: RequestMappingTestController</span></span><br><span class="line"><span class="comment"> * Description: 测试 RequestMapping 注解</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/14 9:14</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingTestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/testValue1&quot;, &quot;/testValue2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;testValue&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test RequestMapping&#x27;s Value<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在index.html文件中添加两个超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/detail&#125;&quot;</span>&gt;</span>用户详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/detail&#125;&quot;</span>&gt;</span>商品详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试RequestMapping的value属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue1&#125;&quot;</span>&gt;</span>testValue1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testValue2&#125;&quot;</span>&gt;</span>testValue2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试，点击以下的两个超链接，发送请求，都可以正常访问到同一个控制器上的同一个方法：</p><p><img src="https://i0.hdslb.com/bfs/article/ea54be9c0e969d7e6ed68644b0804f82645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/d84cb34aea3e7c89b3270eecd4c6c9df645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/7a8ca7e38f816e1adf46ae67af375d41645325325.png" alt="img"></p><p>‍</p><h2 id="4-2-Ant风格的value"><a href="#4-2-Ant风格的value" class="headerlink" title="4.2. Ant风格的value"></a>4.2. Ant风格的value</h2><p>value是可以用来匹配路径的，路径支持模糊匹配，我们把这种模糊匹配称之为Ant风格。关于路径中的通配符包括：</p><ul><li>?，代表任意一个字符</li><li>*，代表0到N个任意字符</li><li>**，代表0到N个任意字符，并且路径中可以出现路径分隔符 /</li></ul><p>注意：** 通配符在使用时，左右不能出现字符，只能是 /</p><p>测试一下这些通配符，在 RequestMappingTestController 中添加以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x?z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Value Ant<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的value属性支持模糊匹配<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在index.html页面中编写超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持模糊匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/xyz/testValueAnt&#125;&quot;</span>&gt;</span>测试value属性的模糊匹配<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/79e8416fbcf4c0956e200fa55b4bc46c645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/296b59ad5f6ec363c19238f1cf6c4e0e645325325.png" alt="img"></p><p>‍</p><p>通过修改浏览器地址栏上的路径，可以反复测试通配符 ? 的语法：</p><p><img src="https://i0.hdslb.com/bfs/article/606c49b520a6617be681be58bf98384f645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/3f11ea780c7bdce1f6ffce6ae2d2ba6c645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/43eff59f9f96e9d5d9a1b82397565ae9645325325.png" alt="img"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/6081085c4b12d329c8eb482cf2943f2c645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/209d58737207e360177a8c0a3ab9ca2e645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/40d641667bc4675e9f0f379fa1b3bf4f645325325.png" alt="img"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/a8c7a89b84a9c2fc5dee09a00f36096b645325325.png" alt="img"></p><p>将 ? 通配符修改为 * 通配符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(&quot;/x?z/testValueAnt&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/x*z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器直接在地址栏上输入路径进行测试：</p><p><img src="https://i0.hdslb.com/bfs/article/305f0246360e3dff2c7e4d18c8df6e5c645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/cc2d84761990c913743e6116416d2061645325325.png" alt="img"></p><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/26e6945755772beeef248d599bbe69c2645325325.png" alt="img"></p><p>将 <em> 通配符修改为 *</em> 通配符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/x**z/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/6f4e22e3d90f2f555e6a6ab4fcfebdd6645325325.png" alt="img"></p><p>‍</p><p>注意：/x<strong>z/ 实际上并没有使用通配符 </strong>，本质上还是使用的 <em>，因为通配符 *</em> 在使用的时候，左右两边都不能有任何字符，必须是 /。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/**/testValueAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务器发现报错了：</p><p><img src="https://i0.hdslb.com/bfs/article/15f248094b6651c23fb44d0ceb3b0c26645325325.png" alt="img"></p><p>以上写法在Spring5的时候是支持的，但是在Spring6中进行了严格的规定，** 通配符只能出现在路径的末尾，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testValueAnt/**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testValueAnt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testValueAnt&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://i0.hdslb.com/bfs/article/5bfdc63c5735185e4bc2e78abbd4cfd6645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/264b14086d4d9b08ead56ef25e3bf815645325325.png" alt="img"></p><p>‍</p><h2 id="4-3-value中的占位符（重点）"><a href="#4-3-value中的占位符（重点）" class="headerlink" title="4.3. value中的占位符（重点）"></a>4.3. value中的占位符（重点）</h2><p>到目前为止，我们的请求路径是这样的格式：uri?name1=value1&amp;name2=value2&amp;name3=value3</p><p>其实除了这种方式，还有另外一种格式的请求路径，格式为：uri/value1/value2/value3，我们将这样的请求路径叫做 RESTful 风格的请求路径。</p><p><span data-type="text" style="background-color: var(--b3-font-background12);">RESTful风格的请求路径在现代的开发中使用较多。</span></p><p>普通的请求路径：<a href="http://localhost:8080/springmvc/login?username=admin&amp;password=123&amp;age=20">http://localhost:8080/springmvc/login?username=admin&amp;password=123&amp;age=20</a></p><p>RESTful风格的请求路径：<a href="http://localhost:8080/springmvc/login/admin/123/20">http://localhost:8080/springmvc/login/admin/123/20</a></p><p>如果使用RESTful风格的请求路径，在控制器中应该如何获取请求中的数据呢？可以在value属性中使用占位符，例如：/login/{id}/{username}/{password}</p><p>在 RequestMappingTestController 类中添加一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testRESTful/&#123;id&#125;/&#123;username&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRESTful</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;id&quot;)</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> id,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">        String username,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;age&quot;)</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(id + <span class="string">&quot;,&quot;</span> + username + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testRESTful&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test RESTful<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 index.html 页面中添加超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping注解的value属性支持占位符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRESTful/1/zhangsan/20&#125;&quot;</span>&gt;</span>测试value属性使用占位符<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器测试：</p><p><img src="https://i0.hdslb.com/bfs/article/e2d46f55ed4ce61d7985c62adbf35b00645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/7dee90d891f845e2c4edfb87531050b0645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/056013c968c3e7a3d0640b5ae2b3a2aa645325325.png" alt="img"></p><p>‍</p><h1 id="5-RequestMapping注解的method属性"><a href="#5-RequestMapping注解的method属性" class="headerlink" title="5. RequestMapping注解的method属性"></a>5. RequestMapping注解的method属性</h1><h2 id="5-1-method属性的作用"><a href="#5-1-method属性的作用" class="headerlink" title="5.1. method属性的作用"></a>5.1. method属性的作用</h2><p>在Servlet当中，如果后端要求前端必须发送一个post请求，后端可以通过重写doPost方法来实现。后端要求前端必须发送一个get请求，后端可以通过重写doGet方法来实现。当重写的方法是doPost时，前端就必须发送post请求，当重写doGet方法时，前端就必须发送get请求。如果前端发送请求的方式和后端的处理方式不一致时，会出现405错误。</p><p>HTTP状态码405，这种机制的作用是：限制客户端的请求方式，以保证服务器中数据的安全。</p><p>假设后端程序要处理的请求是一个登录请求，为了保证登录时的用户名和密码不被显示到浏览器的地址栏上，后端程序有义务要求前端必须发送一个post请求，如果前端发送get请求，则应该拒绝。</p><p>那么在SpringMVC框架中应该如何实现这种机制呢？可以使用RequestMapping注解的method属性来实现。</p><p>通过RequestMapping源码可以看到，method属性也是一个数组：</p><p><img src="https://i0.hdslb.com/bfs/article/bba53b4d31aed860922c8c0efa58a785645325325.png" alt="img"></p><p>数组中的每个元素是 RequestMethod，而RequestMethod是一个枚举类型的数据：</p><p><img src="https://i0.hdslb.com/bfs/article/5f2eaa077f9840d302fb40e33a33eebf645325325.png" alt="img"></p><p>因此如果要求前端发送POST请求，该注解应该这样用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来测试一下：</p><p>在RequestMappingTestController类中添加以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Method<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Success!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><p>在index.html页面中提供一个登录的form表单，后端要求发送post请求，则form表单的method属性应设置为post：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试：</p><p><img src="https://i0.hdslb.com/bfs/article/7514eaeee872ed1b0ee0aa4d871bbe0d645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/00a450225a9d8adf9dfc2f3155f1f2eb645325325.png" alt="img"></p><p>‍</p><p>通过测试，前端发送的请求方式post，后端处理请求的方式也是post，就不会有问题。</p><p>当然，如果后端要求前端必须发送post请求，而前端发送了get请求，则会出现405错误，将index.html中form表单提交方式修改为get：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://i0.hdslb.com/bfs/article/840e9b27667fd5283beece99ea7c524d645325325.png" alt="img"></p><p><strong>因此，可以看出，对于RequestMapping注解来说，多一个属性，就相当于多了一个映射的条件，如果value和method属性都有，则表示只有前端发送的请求路径 + 请求方式都满足时才能与控制器上的方法建立映射关系，只要有一个不满足，则无法建立映射关系。例如：@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST) 表示当前端发送的请求路径是 /login，并且发送请求的方式是POST的时候才会建立映射关系。如果前端发送的是get请求，或者前端发送的请求路径不是 /login，则都是无法建立映射的。</strong></p><p>‍</p><h2 id="5-2-衍生Mapping"><a href="#5-2-衍生Mapping" class="headerlink" title="5.2. 衍生Mapping"></a>5.2. 衍生Mapping</h2><p>对于以上的程序来说，SpringMVC提供了另一个注解，使用这个注解更加的方便，它就是：PostMapping，使用该注解时，不需要指定method属性，因为它默认采用的就是POST处理方式：修改RequestMappingTestController代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前端发送get请求时，测试一下：</p><p><img src="https://i0.hdslb.com/bfs/article/f42bb20936e8d3c267e056281ccc6ad9645325325.png" alt="img"></p><p>当前端发送post请求时，测试一下：</p><p><img src="https://i0.hdslb.com/bfs/article/29ef913bf6d8a6c05ea15f0f13fd6374645325325.png" alt="img"></p><p>在SpringMVC中不仅提供了 <strong>PostMaping</strong>注解，像这样的注解还有四个，包括：</p><ul><li><strong>GetMapping</strong>：要求前端必须发送get请求</li><li><strong>PutMapping</strong>：要求前端必须发送put请求</li><li><strong>DeleteMapping</strong>：要求前端必须发送delete请求</li><li><strong>PatchMapping</strong>：要求前端必须发送patch请求</li></ul><p>‍</p><h2 id="5-3-web的请求方式"><a href="#5-3-web的请求方式" class="headerlink" title="5.3. web的请求方式"></a>5.3. web的请求方式</h2><p>前端向服务器发送请求的方式包括哪些？共9种，前5种常用，后面作为了解：</p><ul><li><strong>GET：获取资源，只允许读取数据，不影响数据的状态和功能。使用 URL 中传递参数或者在 HTTP 请求的头部使用参数，服务器返回请求的资源。</strong></li><li><strong>POST：向服务器提交资源，可能还会改变数据的状态和功能。通过表单等方式提交请求体，服务器接收请求体后，进行数据处理。</strong></li><li><strong>PUT：更新资源，用于更新指定的资源上所有可编辑内容。通过请求体发送需要被更新的全部内容，服务器接收数据后，将被更新的资源进行替换或修改。</strong></li><li><strong>DELETE：删除资源，用于删除指定的资源。将要被删除的资源标识符放在 URL 中或请求体中。</strong></li><li><strong>HEAD：请求服务器返回资源的头部，与 GET 命令类似，但是所有返回的信息都是头部信息，不能包含数据体。主要用于资源检测和缓存控制。</strong></li><li>PATCH：部分更改请求。当被请求的资源是可被更改的资源时，请求服务器对该资源进行部分更新，即每次更新一部分。</li><li>OPTIONS：请求获得服务器支持的请求方法类型，以及支持的请求头标志。“OPTIONS *”则返回支持全部方法类型的服务器标志。</li><li>TRACE：服务器响应输出客户端的 HTTP 请求，主要用于调试和测试。</li><li>CONNECT：建立网络连接，通常用于加密 SSL/TLS 连接。</li></ul><p>注意：</p><ol><li>使用超链接以及原生的form表单只能提交get和post请求，put、delete、head请求可以使用发送ajax请求的方式来实现。</li><li>使用超链接发送的是get请求</li><li>使用form表单，如果没有设置method，发送get请求</li><li>使用form表单，设置method=”get”，发送get请求</li><li>使用form表单，设置method=”post”，发送post请求</li><li><strong>使用form表单，设置method=&quot;put/delete/head&quot;，发送get请求。（针对这种情况，可以测试一下）</strong></li></ol><p>‍</p><p>将index.html中登录表单的提交方式method设置为put：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的method属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改RequestMappingTestController类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="comment">//@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://i0.hdslb.com/bfs/article/e63f48c4740e8120452c8bc23f508ed6645325325.png" alt="img"></p><p>通过测试得知，即使form中method设置为put方式，但仍然采用get方式发送请求。</p><p>再次修改RequestMappingTestController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testMethod&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://i0.hdslb.com/bfs/article/17713a1ac69f61724d45b582c884fde6645325325.png" alt="img"></p><p>‍</p><h2 id="5-4-GET和POST的区别"><a href="#5-4-GET和POST的区别" class="headerlink" title="5.4. GET和POST的区别"></a>5.4. GET和POST的区别</h2><p>在之前发布的JavaWEB视频中对HTTP请求协议的GET和POST进行了详细讲解，这里就不再赘述，大致回顾一下。</p><p>HTTP请求协议之GET请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /springmvc/login?username=lucy&amp;userpwd=1111 HTTP/1.1                           请求行</span><br><span class="line">Host: localhost:8080                                                                    请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                        空白行</span><br><span class="line">                                                                                        请求体</span><br></pre></td></tr></table></figure><p>HTTP请求协议之POST请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /springmvc/login HTTP/1.1                                                  请求行</span><br><span class="line">Host: localhost:8080                                                                  请求头</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 25</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Referer: http://localhost:8080/springmvc/index.html</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                      空白行</span><br><span class="line">username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure><h3 id="5-4-1-区别是什么"><a href="#5-4-1-区别是什么" class="headerlink" title="5.4.1. 区别是什么"></a>5.4.1. 区别是什么</h3><ol><li>get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，”?”后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。</li></ol><p><a href="http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111">http://localhost:8080/springmvc/login?username=zhangsan&amp;userpwd=1111</a></p><ol><li>post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。</li><li>get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。<span data-type="text" style="color: var(--b3-font-color13);">get请求无法发送大数据量。</span></li><li>post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。<span data-type="text" style="color: var(--b3-font-color13);">post请求可以发送大数据量，理论上没有长度限制。</span></li><li>get请求在W3C中是这样说的：get请求比较适合从服务器端获取数据。</li><li>post请求在W3C中是这样说的：post请求比较适合向服务器端传送数据。</li><li>get请求是安全的。因为在正确使用get请求的前提下，get请求只是为了从服务器上获取数据，不会对服务器数据进行修改。</li><li>post请求是危险的。因为post请求是修改服务器端的资源。</li><li>get请求支持缓存。 也就是说当第二次发送get请求时，会走浏览器上次的缓存结果，不再真正的请求服务器。（有时需要避免，怎么避免：在get请求路径后添加时间戳）</li><li><span data-type="text" style="color: var(--b3-font-color10);">post请求不支持缓存。每一次发送post请求都会真正的走服务器。</span></li></ol><h3 id="5-4-2-怎么选择"><a href="#5-4-2-怎么选择" class="headerlink" title="5.4.2. 怎么选择"></a>5.4.2. 怎么选择</h3><ol><li>如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</li><li>大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存/修改等。</li><li>如果表单中有敏感信息，建议使用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</li><li>做文件上传，一定是post请求。要传的数据不是普通文本。</li><li>其他情况大部分都是使用get请求。</li></ol><p>‍</p><h1 id="6-RequestMapping注解的params属性"><a href="#6-RequestMapping注解的params属性" class="headerlink" title="6. RequestMapping注解的params属性"></a>6. RequestMapping注解的params属性</h1><h2 id="6-1-params属性的理解"><a href="#6-1-params属性的理解" class="headerlink" title="6.1. params属性的理解"></a>6.1. params属性的理解</h2><p>params属性用来设置通过请求参数来映射请求。</p><p>对于RequestMapping注解来说：</p><ul><li>value属性是一个数组，只要满足数组中的任意一个路径，就能映射成功</li><li>method属性也是一个数组，只要满足数组中任意一个请求方式，就能映射成功。</li><li><strong>params属性也是一个数组，不过要求请求参数必须和params数组中要求的所有参数完全一致后，才能映射成功。</strong></li></ul><p><img src="https://i0.hdslb.com/bfs/article/351e9ec4b90151db8abcdf835973c4d5645325325.png" alt="img"></p><p>‍</p><h2 id="6-2-params属性的4种用法"><a href="#6-2-params属性的4种用法" class="headerlink" title="6.2. params属性的4种用法"></a>6.2. params属性的4种用法</h2><ol><li><span data-type="text" style="background-color: var(--b3-font-background8);">@RequestMapping(value=&quot;/login&quot;, params={</span> <strong>&quot;username&quot;</strong> <span data-type="text" style="background-color: var(--b3-font-background8);">, &quot;password&quot;})</span> 表示：<span data-type="text" style="background-color: var(--b3-font-background13);">请求参数中必须包含 username 和 password，才能与当前标注的方法进行映射。</span></li><li>@RequestMapping(value=”/login”, params={ <strong>&quot;!username&quot;</strong> , “password”}) 表示：请求参数中不能包含username参数，但必须包含password参数，才能与当前标注的方法进行映射。</li><li>@RequestMapping(value=”/login”, params={ <strong>&quot;username=admin&quot;</strong> , “password”}) 表示：请求参数中必须包含username参数，并且参数的值必须是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。</li><li>@RequestMapping(value=”/login”, params={ <strong>&quot;username!=admin&quot;</strong> , “password”}) 表示：请求参数中必须包含username参数，但参数的值不能是admin，另外也必须包含password参数，才能与当前标注的方法进行映射。</li></ol><p>注意：如果前端提交的参数，和后端要求的请求参数不一致，则出现400错误！！！</p><p><strong>HTTP状态码400的原因：请求参数格式不正确而导致的。</strong></p><p>‍</p><h2 id="6-3-测试params属性"><a href="#6-3-测试params属性" class="headerlink" title="6.3. 测试params属性"></a>6.3. 测试params属性</h2><p>在 RequestMappingTestController 类中添加如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testParams&quot;, params = &#123;&quot;username&quot;, &quot;password&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testParams&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testParams<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的Params属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在index.html文件中添加超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的params属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(username=&#x27;admin&#x27;,password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，你也可以这样写：这样写IDEA会报错，但不影响使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams?username=admin&amp;password=123&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试：</p><p><img src="https://i0.hdslb.com/bfs/article/3ef27bd7f200a503ad64805910c3b0e1645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/61eb3c42780e61b516911486ac73557b645325325.png" alt="img"></p><p>‍</p><p>假如发送请求时，没有传递username参数会怎样？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(password=&#x27;123&#x27;)&#125;&quot;</span>&gt;</span>测试params属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试：</p><p><img src="https://i0.hdslb.com/bfs/article/fb17ec72cc460febcf96248fa51b83ea645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/c44492eb4b1632770c6929ee1c2e740c645325325.png" alt="img"></p><p>提示无效的请求参数，服务器无法或不会处理当前请求。</p><p>params属性剩下的三种情况，自行测试！！！！</p><h1 id="7-RequestMapping注解的headers属性"><a href="#7-RequestMapping注解的headers属性" class="headerlink" title="7. RequestMapping注解的headers属性"></a>7. RequestMapping注解的headers属性</h1><h2 id="7-1-认识headers属性"><a href="#7-1-认识headers属性" class="headerlink" title="7.1. 认识headers属性"></a>7.1. 认识headers属性</h2><p>headers和params原理相同，用法也相同。</p><p>当前端提交的请求头信息和后端要求的请求头信息一致时，才能映射成功。</p><p>请求头信息怎么查看？在chrome浏览器中，F12打开控制台，找到Network，可以查看具体的请求协议和响应协议。在请求协议中可以看到请求头信息，例如：</p><p><img src="https://i0.hdslb.com/bfs/article/12248e375f0574aa02a5c47ed08c4a68645325325.png" alt="img"></p><p>请求头信息和请求参数信息一样，都是键值对形式，例如上图中：</p><ul><li>Referer: <a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a>     键是Referer，值是<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a></li><li>Host: localhost:8080     键是Host，值是localhost:8080</li></ul><h2 id="7-2-headers属性的4种用法"><a href="#7-2-headers属性的4种用法" class="headerlink" title="7.2. headers属性的4种用法"></a>7.2. headers属性的4种用法</h2><ol><li>@RequestMapping(value=”/login”, headers={ <strong>&quot;Referer&quot;</strong> , “Host”}) 表示：请求头信息中必须包含Referer和Host，才能与当前标注的方法进行映射。</li><li>@RequestMapping(value=”/login”, headers={ <strong>&quot;Referer&quot;</strong> , “!Host”}) 表示：请求头信息中必须包含Referer，但不包含Host，才能与当前标注的方法进行映射。</li><li>@RequestMapping(value=”/login”, headers={ <strong>&quot;Referer=<a href="http://localhost:8080/springmvc/&amp;quot">http://localhost:8080/springmvc/&amp;quot</a>;</strong> , “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值必须是<a href="http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。">http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。</a></li><li>@RequestMapping(value=”/login”, headers={ <strong>&quot;Referer!=<a href="http://localhost:8080/springmvc/&amp;quot">http://localhost:8080/springmvc/&amp;quot</a>;</strong> , “Host”}) 表示：请求头信息中必须包含Referer和Host，并且Referer的值不是<a href="http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。">http://localhost:8080/springmvc/，才能与当前标注的方法进行映射。</a></li></ol><blockquote><p>注意：如果前端提交的请求头信息，和后端要求的请求头信息不一致，则出现404错误！！！</p></blockquote><h2 id="7-3-测试headers属性"><a href="#7-3-测试headers属性" class="headerlink" title="7.3. 测试headers属性"></a>7.3. 测试headers属性</h2><p>在 RequestMappingTestController 类中添加以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8080/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供视图页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test Headers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试RequestMapping注解的headers属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在index.html页面中添加超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试RequestMapping的headers属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testHeaders&#125;&quot;</span>&gt;</span>测试headers属性<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动服务器，测试结果：</p><p><img src="https://i0.hdslb.com/bfs/article/1f61a91aa4539c70309005ddaee4b2dc645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/a1441a1e9030ecadf4860dcb038c9132645325325.png" alt="img"></p><p>将后端控制器中的headers属性值进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/testHeaders&quot;, headers = &#123;&quot;Referer=http://localhost:8888/springmvc/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHeaders&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试：</p><p><img src="https://i0.hdslb.com/bfs/article/5b1be4b96b376fa628235804b3d053d7645325325.png" alt="img"></p><p>其他情况自行测试！！！！</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章 初识SpringMVC</title>
      <link href="/posts/50697.html"/>
      <url>/posts/50697.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-学习本套教程前的知识储备"><a href="#1-学习本套教程前的知识储备" class="headerlink" title="1. 学习本套教程前的知识储备"></a>1. 学习本套教程前的知识储备</h1><ul><li><strong>JavaSE</strong></li><li><strong>HTML+CSS+JavaScript</strong></li><li><strong>Vue</strong></li><li><strong>AJAX + axios</strong></li><li><strong>Thymeleaf</strong></li><li><strong>Servlet</strong></li><li><strong>Maven</strong></li><li><strong>Spring</strong></li></ul><h1 id="2-什么是MVC"><a href="#2-什么是MVC" class="headerlink" title="2. 什么是MVC"></a>2. 什么是MVC</h1><p>MVC架构模式相关课程，在老杜的JavaWeb课程中已经详细的讲解了，如果没有学过的，可以看这个视频：<a href="https://www.bilibili.com/video/BV1Z3411C7NZ/?share_source=copy_web&amp;vd_source=ec35128d1000684f9b28e503d6278a41">https://www.bilibili.com/video/BV1Z3411C7NZ</a></p><p>MVC是一种软件架构模式（是一种软件架构设计思想，不止Java开发中用到，其它语言也需要用到），它将应用分为三块：</p><ul><li>M：Model（模型）</li><li>V：View（视图）</li><li>C：Controller（控制器）</li></ul><p>应用为什么要被分为三块，优点是什么？</p><ul><li>低耦合，扩展能力增强</li><li>代码复用性增强</li><li>代码可维护性增强</li><li>高内聚，让程序员更加专注业务的开发</li></ul><p>MVC将应用分为三块，每一块各司其职，都有自己专注的事情要做，他们属于分工协作，互相配合：</p><ul><li>Model：负责业务处理及数据的收集。</li><li>View：负责数据的展示</li><li>Controller：负责调度。它是一个调度中心，它来决定什么时候调用Model来处理业务，什么时候调用View视图来展示数据。</li></ul><p>MVC架构模式如下所示：</p><p><img src="https://i0.hdslb.com/bfs/article/9115cd75c4954ca52f659ef7371d08f9645325325.png" alt="img">​</p><p><strong>MVC架构模式的描述：前端浏览器发送请求给web服务器，web服务器中的Controller接收到用户的请求，Controller负责将前端提交的数据进行封装，然后Controller调用Model来处理业务，当Model处理完业务后会返回处理之后的数据给Controller，Controller再调用View来完成数据的展示，最终将结果响应给浏览器，浏览器进行渲染展示页面。</strong> </p><p>面试题：什么是三层模型，并说一说MVC架构模式与三层模型的区别？</p><p>三层模型：</p><p><img src="https://i0.hdslb.com/bfs/article/54a177d72493aa0935cb23c2ba396462645325325.png" alt="img" style="zoom:50%;" /></p><p><img src="https://i0.hdslb.com/bfs/article/973f76f0f06499d58195014b31f33fd8645325325.png" alt="img" style="zoom:50%;" />​</p><p>‍</p><p>MVC 和三层模型都采用了分层结构来设计应用程序，都是降低耦合度，提高扩展力，提高组件复用性。<span data-type="text" style="color: var(--b3-font-color1);">区别在于：他们的关注点不同，三层模型更加关注业务逻辑组件的划分。</span></p><p><span data-type="text" style="color: var(--b3-font-color6);">MVC架构模式关注的是整个应用程序的层次关系和分离思想。现代的开发方式大部分都是MVC架构模式结合三层模型一起用。</span></p><p>‍</p><h1 id="3-什么是SpringMVC"><a href="#3-什么是SpringMVC" class="headerlink" title="3. 什么是SpringMVC"></a>3. 什么是SpringMVC</h1><h2 id="3-1-SpringMVC概述"><a href="#3-1-SpringMVC概述" class="headerlink" title="3.1. SpringMVC概述"></a>3.1. SpringMVC概述</h2><p>SpringMVC是一个实现了MVC架构模式的Web框架，<span data-type="text" style="background-color: var(--b3-font-background4);">底层基于Servlet实现。</span></p><p>SpringMVC已经将MVC架构模式实现了，因此只要我们是基于SpringMVC框架写代码，编写的程序就是符合MVC架构模式的。（<strong>MVC的架子搭好了，我们只需要添添补补</strong>）</p><p>Spring框架中有一个子项目叫做Spring Web，Spring Web子项目当中包含很多模块，例如：</p><ul><li>Spring MVC</li><li>Spring WebFlux</li><li>Spring Web Services</li><li>Spring Web Flow</li><li>Spring WebSocket</li><li>Spring Web Services Client</li></ul><p>可见 SpringMVC是Spring Web子项目当中的一个模块。因此也可以说SpringMVC是Spring框架的一部分。</p><p>所以学习SpringMVC框架之前要先学习Spring框架中的IoC和AOP等内容。</p><p>另外，使用SpringMVC框架的时候同样也可以使用IoC和AOP。</p><p>以下就是Spring官方给出的Spring架构图，其中Web中的servlet指的就是Spring MVC：</p><p><img src="https://i0.hdslb.com/bfs/article/99b0175cc940ae5155f24a2da09d7062645325325.png" alt="img">​</p><h2 id="3-2-SpringMVC帮我们做了什么"><a href="#3-2-SpringMVC帮我们做了什么" class="headerlink" title="3.2. SpringMVC帮我们做了什么"></a>3.2. SpringMVC帮我们做了什么</h2><p>SpringMVC框架帮我们做了什么，与纯粹的Servlet开发有什么区别？</p><ol><li>入口控制：SpringMVC框架通过DispatcherServlet作为入口控制器，负责接收请求和分发请求。而在Servlet开发中，需要自己编写Servlet程序，并在web.xml中进行配置，才能接受和处理请求。</li><li>在SpringMVC中，表单提交时可以自动将表单数据绑定到相应的JavaBean对象中，只需要在控制器方法的参数列表中声明该JavaBean对象即可，无需手动获取和赋值表单数据。而在纯粹的Servlet开发中，这些都是需要自己手动完成的。</li><li>IoC容器：SpringMVC框架通过IoC容器管理对象，只需要在配置文件中进行相应的配置即可获取实例对象，而在Servlet开发中需要手动创建对象实例。</li><li>统一处理请求：SpringMVC框架提供了拦截器、异常处理器等统一处理请求的机制，并且可以灵活地配置这些处理器。而在Servlet开发中，需要自行编写过滤器、异常处理器等，增加了代码的复杂度和开发难度。</li><li>视图解析：SpringMVC框架提供了多种视图模板，如JSP、Freemarker、Velocity等，并且支持国际化、主题等特性。而在Servlet开发中需要手动处理视图层，增加了代码的复杂度。</li></ol><p><strong>总之，与Servlet开发相比，SpringMVC框架可以帮我们节省很多时间和精力，减少代码的复杂度，更加专注于业务开发。同时，也提供了更多的功能和扩展性，可以更好地满足企业级应用的开发需求。</strong> </p><h2 id="3-3-SpringMVC框架的特点"><a href="#3-3-SpringMVC框架的特点" class="headerlink" title="3.3. SpringMVC框架的特点"></a>3.3. SpringMVC框架的特点</h2><ol><li>轻量级：相对于其他Web框架，Spring MVC框架比较小巧轻便。（只有几个几百KB左右的Jar包文件）</li><li>模块化：请求处理过程被分成多个模块，以模块化的方式进行处理。</li><li><ol><li>控制器模块：Controller</li><li>业务逻辑模块：Model</li><li>视图模块：View</li></ol></li><li>依赖注入：Spring MVC框架利用Spring框架的依赖注入功能实现对象的管理，实现松散耦合。</li><li>易于扩展：提供了很多口子，允许开发者根据需要插入自己的代码，以扩展实现应用程序的特殊需求。</li><li><ol><li>Spring MVC框架允许开发人员通过自定义模块和组件来扩展和增强框架的功能。</li><li>Spring MVC框架与其他Spring框架及第三方框架集成得非常紧密，这使得开发人员可以非常方便地集成其他框架，以获得更好的功能。</li></ol></li><li>易于测试：支持单元测试框架，提高代码质量和可维护性。 （对SpringMVC中的Controller测试时，不需要依靠Web服务器。）</li><li>自动化配置：提供自动化配置，减少配置细节。</li><li><ol><li>Spring MVC框架基于约定大于配置的原则，对常用的配置约定进行自动化配置。</li></ol></li><li>灵活性：Spring MVC框架支持多种视图技术，如JSP、FreeMarker、Thymeleaf、FreeMarker等，针对不同的视图配置不同的视图解析器即可。</li></ol><h1 id="4-本套教程相关版本"><a href="#4-本套教程相关版本" class="headerlink" title="4. 本套教程相关版本"></a>4. 本套教程相关版本</h1><ul><li>JDK版本：Java21</li><li>Maven版本：3.9.6</li><li>Tomcat版本：10</li><li>Spring版本：6.1.4</li><li>SpringMVC版本：6.1.4</li><li>IDEA版本：2023.3</li><li>Thymeleaf版本：3.1.2</li></ul><h1 id="5-第一个SpringMVC程序"><a href="#5-第一个SpringMVC程序" class="headerlink" title="5. 第一个SpringMVC程序"></a>5. 第一个SpringMVC程序</h1><h2 id="5-1-创建Maven模块"><a href="#5-1-创建Maven模块" class="headerlink" title="5.1. 创建Maven模块"></a>5.1. 创建Maven模块</h2><p>第一步：创建Empty Project，起名：springmvc。</p><p><img src="https://i0.hdslb.com/bfs/article/b61f1465cfdfd20e4fdb04b16c80bea2645325325.png" alt="img">​</p><p>第二步：设置springmvc工程的JDK版本：Java21。</p><p><img src="https://i0.hdslb.com/bfs/article/e2a81a4b9527756b291fd6782ef0de65645325325.png" alt="img">​</p><p>第三步：设置maven。</p><p><img src="https://i0.hdslb.com/bfs/article/32f51c42f9a5cd02cca53fa7ca8087ec645325325.png" alt="img">​</p><p>第四步：创建Maven模块</p><p><img src="https://i0.hdslb.com/bfs/article/5a16521937f5efb9d38f34569a4d1c7c645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/5899cc298534db5380c104512ced2f11645325325.png" alt="img">​</p><p>第五步：将pom.xml文件中的打包方式修改为war</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode.springmvc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springmvc-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 打包方式设置为war方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第六步：添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志框架Logback依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring6和Thymeleaf整合依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="5-2-添加web支持"><a href="#5-2-添加web支持" class="headerlink" title="5.2. 添加web支持"></a>5.2. 添加web支持</h2><p>第一步：在main目录下创建一个webapp目录</p><p><img src="https://i0.hdslb.com/bfs/article/9a963aba2fe8cb52b303c4bb61715996645325325.png" alt="img"></p><p>第二步：添加web.xml配置文件</p><p><img src="https://i0.hdslb.com/bfs/article/fe0e1da20b10608041be945a037f458c645325325.png" alt="img">​</p><p>注意 web.xml 文件的位置：E:\Spring MVC\code\springmvc\springmvc-001\<em>src\main\webapp\WEB-INF\web.xml</em></p><p>注意版本选择：6.0</p><p><img src="https://i0.hdslb.com/bfs/article/d9bf9504ef973574dd8bbc319593670b645325325.png" alt="img"></p><p>添加web支持后的目录结构：</p><p><img src="https://i0.hdslb.com/bfs/article/278b7977dc875e068afd706f293e0e2a645325325.png" alt="img">​</p><h2 id="5-3-配置web-xml文件"><a href="#5-3-配置web-xml文件" class="headerlink" title="5.3. 配置web.xml文件"></a>5.3. 配置web.xml文件</h2><p>Spring MVC是一个web框架，在javaweb中谁来负责接收请求，处理请求，以及响应呢？<span data-type="text" style="color: var(--b3-font-color6);">当然是Servlet</span>。在SpringMVC框架中已经为我们写好了一个Servlet，它的名字叫做：<strong>DispatcherServlet，我们称其为前端控制器</strong>。既然是Servlet，那么它就需要在web.xml文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;6.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC提供的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /* 表示任何一个请求都交给DispatcherServlet来处理 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- / 表示当请求不是xx.jsp的时候，DispatcherServlet来负责处理本次请求--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jsp本质就是Servlet，因此如果请求是jsp的话，应该走它自己的Servlet，而不应该走DispatcherServlet --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 因此我们的 url-pattern 使用 / --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DispatcherServlet是SpringMVC框架为我们提供的最核心的类，它是整个SpringMVC框架的前端控制器，负责接收HTTP请求、将请求路由到处理程序、处理响应信息，最终将响应返回给客户端。DispatcherServlet是Web应用程序的主要入口点之一，它的职责包括：</p><ol><li>接收客户端的HTTP请求：DispatcherServlet监听来自Web浏览器的HTTP请求，然后根据请求的URL将请求数据解析为Request对象。</li><li>处理请求的URL：DispatcherServlet将请求的URL（Uniform Resource Locator）与处理程序进行匹配，确定要调用哪个控制器（Controller）来处理此请求。</li><li><span data-type="text" style="color: var(--b3-font-color9);">调用相应的控制器</span><span data-type="text" style="color: var(--b3-font-color13);">：</span>DispatcherServlet将请求发送给找到的控制器处理，控制器将执行业务逻辑，然后返回一个模型对象（Model）。</li><li>渲染视图：DispatcherServlet将调用视图引擎，将模型对象呈现为用户可以查看的HTML页面。</li><li>返回响应给客户端：DispatcherServlet将为用户生成的响应发送回浏览器，响应可以包括表单、JSON、XML、HTML以及其它类型的数据</li></ol><h2 id="5-4-编写控制器FirstController"><a href="#5-4-编写控制器FirstController" class="headerlink" title="5.4. 编写控制器FirstController"></a>5.4. 编写控制器FirstController</h2><p>DispatcherServlet接收到请求之后，会根据请求路径分发到对应的Controller，Controller来负责处理请求的核心业务。在SpringMVC框架中Controller是一个普通的Java类（一个普通的POJO类，不需要继承任何类或实现任何接口），需要注意的是：POJO类要纳入IoC容器来管理，POJO类的生命周期由Spring来管理，因此要使用注解标注：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: FirstController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 11:56</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-配置springmvc-servlet-xml文件"><a href="#5-5-配置springmvc-servlet-xml文件" class="headerlink" title="5.5. 配置springmvc-servlet.xml文件"></a>5.5. 配置springmvc-servlet.xml文件</h2><p>SpringMVC框架有它自己的配置文件，该配置文件的名字默认为：<servlet-name>-servlet.xml，默认存放的位置是WEB-INF 目录下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.springmvc.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;thymeleafViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用于视图渲染的过程中，可以设置视图渲染后输出时采用的编码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果配置多个视图解析器，它来决定优先使用哪个视图解析器，它的值越小优先级越高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当 ThymeleafViewResolver 渲染模板时，会使用该模板引擎来解析、编译和渲染模板--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用于指定 Thymeleaf 模板引擎使用的模板解析器。模板解析器负责根据模板位置、模板资源名称、文件编码等信息，加载模板并对其进行解析--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件的位置（前缀）--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板文件后缀（后缀），Thymeleaf文件扩展名不一定是html，也可以是其他，例如txt，大部分都是html--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--设置模板类型，例如：HTML,TEXT,JAVASCRIPT,CSS等--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--用于模板文件在读取和解析过程中采用的编码字符集--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在WEB-INF目录下新建springmvc-servlet.xml文件，并且提供以上配置信息。</p><p><img src="https://i0.hdslb.com/bfs/article/0498dc611da2628ccc91e7a17531d33f645325325.png" alt="img"></p><p>以上配置主要两项：</p><ul><li>第一项：组件扫描。spring扫描这个包中的类，将这个包中的类实例化并纳入IoC容器的管理。</li><li>第二项：视图解析器。视图解析器（View Resolver）的作用主要是将Controller方法返回的逻辑视图名称解析成实际的视图对象。视图解析器将解析出的视图对象返回给DispatcherServlet，并最终由DispatcherServlet将该视图对象转化为响应结果，呈现给用户。</li></ul><p>注意：如果采用了其它视图，请配置对应的视图解析器，例如：</p><ul><li>JSP的视图解析器：InternalResourceViewResolver</li><li>FreeMarker视图解析器：FreeMarkerViewResolver</li><li>Velocity视图解析器：VelocityViewResolver</li></ul><h2 id="5-6-提供视图"><a href="#5-6-提供视图" class="headerlink" title="5.6. 提供视图"></a>5.6. 提供视图</h2><p>在WEB-INF目录下新建templates目录，在templates目录中新建html文件，例如：first.html，并提供以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf语法，需要被 Thymeleaf识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于每一个Thymeleaf文件来说 xmlns:th=”<a href="http://www.thymeleaf.org">http://www.thymeleaf.org</a>“ 是必须要写的，为了方便后续开发，可以将其添加到html模板文件中：</p><p><img src="https://i0.hdslb.com/bfs/article/1a30df6aed4a0ea06a61cab9b7ad4f27645325325.png" alt="img">​</p><p>‍</p><h2 id="5-7-控制器FirstController处理请求返回逻辑视图名称"><a href="#5-7-控制器FirstController处理请求返回逻辑视图名称" class="headerlink" title="5.7. 控制器FirstController处理请求返回逻辑视图名称"></a>5.7. 控制器FirstController处理请求返回<span data-type="text" style="color: var(--b3-font-color13);">逻辑视图名称</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: FirstController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 11:56</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/ce6f38c88e02dc0b843c6aca3d0685df645325325.png" alt="image">​</p><h2 id="5-8-测试"><a href="#5-8-测试" class="headerlink" title="5.8. 测试"></a>5.8. 测试</h2><p>第一步：配置Tomcat服务器</p><p><img src="https://i0.hdslb.com/bfs/article/fb3794e5d72bed5702fe1858341c5a95645325325.png" alt="img">​</p><p>第二步：部署web模块到Tomcat服务器</p><p><img src="https://i0.hdslb.com/bfs/article/0323dd10348d1d9acae1740d50f586dc645325325.png" alt="img">​</p><p>第三步：启动Tomcat服务器。如果在控制台输出的信息有中文乱码，请修改tomcat服务器配置文件：apache-tomcat-10.1.19\conf\logging.properties</p><p><img src="https://i0.hdslb.com/bfs/article/f916a13d6d532e9515c5495963856266645325325.png" alt="img">​</p><p>第四步：打开浏览器，在浏览器地址栏上输入地址：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></p><p><img src="https://i0.hdslb.com/bfs/article/72886133877b44bfb3700f069bd175b3645325325.png" alt="img"></p><p>后端控制台输出：</p><p><img src="https://i0.hdslb.com/bfs/article/bbb6e5413eb5e76f02a8debb27f21e11645325325.png" alt="img">​</p><h2 id="5-9-执行流程总结"><a href="#5-9-执行流程总结" class="headerlink" title="5.9. 执行流程总结"></a>5.9. 执行流程总结</h2><ol><li>浏览器发送请求：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></li><li>SpringMVC的前端控制器DispatcherServlet接收到请求</li><li>DispatcherServlet根据请求路径 /haha 映射到 FirstController#名字随意()，调用该方法</li><li>FirstController#名字随意() 处理请求</li><li>FirstController#名字随意() 返回逻辑视图名称 first 给视图解析器</li><li>视图解析器找到 /WEB-INF/templates/first.html 文件，并进行解析，生成视图解析对象返回给前端控制器DispatcherServlet</li><li>前端控制器DispatcherServlet响应结果到浏览器。</li></ol><h2 id="5-10-一个Controller可以编写多个方法"><a href="#5-10-一个Controller可以编写多个方法" class="headerlink" title="5.10. 一个Controller可以编写多个方法"></a>5.10. 一个Controller可以编写多个方法</h2><p>一个Controller可以提供多个方法，每个方法通常是处理对应的请求，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/haha&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String 名字随意()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理请求....&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回逻辑视图名称（决定跳转到哪个页面）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/other&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">other</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理其它请求...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;other&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供 other.html 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>other<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>other ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 first.html 文件中，添加超链接，用超链接发送 /other 请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定 th 命名空间，让 Thymeleaf 标准表达式可以被解析和执行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--th不是固定的，可以指定其它的命名空间，只不过大部分情况下用th--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示程序中出现的 th 开头的后面代码都是 Thymeleaf语法，需要被 Thymeleaf识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first springmvc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个Spring MVC程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- th: 表示后面的代码可以编写Thymeleaf语法，可以被Thymeleaf语法解析 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Thymeleaf检测到以 / 开始，表示绝对路径，自动会将webapp的上下文路径加上去 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最终的效果是：href=&quot;/springmvc/other&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/other&#125;&quot;</span>&gt;</span>other请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Tomcat，打开浏览器，输入请求路径：<a href="http://localhost:8080/springmvc/haha">http://localhost:8080/springmvc/haha</a></p><p><img src="https://i0.hdslb.com/bfs/article/9dfabc56cf5d8d11578572650ed1e6e5645325325.png" alt="img"></p><p>点击超链接：other请求</p><p><img src="https://i0.hdslb.com/bfs/article/fa0ccfae2fdf6bd65f572c64c5ff3c77645325325.png" alt="img">​</p><h1 id="6-第二个SpringMVC程序"><a href="#6-第二个SpringMVC程序" class="headerlink" title="6. 第二个SpringMVC程序"></a>6. 第二个SpringMVC程序</h1><h2 id="6-1-创建Maven模块"><a href="#6-1-创建Maven模块" class="headerlink" title="6.1. 创建Maven模块"></a>6.1. 创建Maven模块</h2><ol><li>pom.xml文件中添加依赖</li><li><ol><li>springmvc依赖</li><li>logback依赖</li><li>servlet依赖（scope为provided）</li><li>thymeleaf与spring6整合依赖</li></ol></li><li>打包方式war</li></ol><h2 id="6-2-添加web支持"><a href="#6-2-添加web支持" class="headerlink" title="6.2. 添加web支持"></a>6.2. 添加web支持</h2><p><img src="https://i0.hdslb.com/bfs/article/d3bd7a2dc3aafda1c65cb14128d73c51645325325.png" alt="img"></p><p>webapp目录没有小蓝点怎么办？添加web支持</p><p><img src="https://i0.hdslb.com/bfs/article/e14f7a30154071f0f3b969ac03d1669f645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/881a1bddcc74e4eafda007e0d29fb257645325325.png" alt="img">​</p><h2 id="6-3-配置web-xml文件"><a href="#6-3-配置web-xml文件" class="headerlink" title="6.3. 配置web.xml文件"></a>6.3. 配置web.xml文件</h2><p>重点：SpringMVC配置文件的名字和路径是可以手动设置的，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动设置springmvc配置文件的路径及名字--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为了提高用户的第一次访问效率，建议在web服务器启动时初始化前端控制器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过&lt;init-param&gt;来设置SpringMVC配置文件的路径和名字。在DispatcherServlet的init方法执行时设置的。</strong></p><p> <strong>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;建议加上，这样可以提高用户第一次访问的效率。表示在web服务器启动时初始化DispatcherServlet。</strong></p><h2 id="6-4-编写IndexController"><a href="#6-4-编写IndexController" class="headerlink" title="6.4. 编写IndexController"></a>6.4. 编写IndexController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.springmvc.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: IndexController</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/3/13 15:47</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示请求路径如果是：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a> ，则进入 /WEB-INF/templates/index.html 页面。</p><p><strong>这就是项目的首页效果！！！！！</strong></p><h2 id="6-5-在resources目录下配置springmvc-xml文件"><a href="#6-5-在resources目录下配置springmvc-xml文件" class="headerlink" title="6.5. 在resources目录下配置springmvc.xml文件"></a>6.5. 在resources目录下配置springmvc.xml文件</h2><p><img src="https://i0.hdslb.com/bfs/article/58f1db7275d43f981176879a19e91175645325325.png" alt="img"></p><p>配置内容和之前一样，一个是视图解析器，一个是组件扫描。</p><h2 id="6-6-提供视图"><a href="#6-6-提供视图" class="headerlink" title="6.6. 提供视图"></a>6.6. 提供视图</h2><p><img src="https://i0.hdslb.com/bfs/article/c1aacfb050bb957b6c249646031d8d60645325325.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-7-测试"><a href="#6-7-测试" class="headerlink" title="6.7. 测试"></a>6.7. 测试</h2><p>部署到web服务器，启动web服务器，打开浏览器，在地址栏上输入：<a href="http://localhost:8080/springmvc/">http://localhost:8080/springmvc/</a></p><p><img src="https://i0.hdslb.com/bfs/article/1d9d9e8a71acc1cd4ebf6aa530049570645325325.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. SpringBoot 整合第三方技术</title>
      <link href="/posts/43922.html"/>
      <url>/posts/43922.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-整合Junit"><a href="#1-整合Junit" class="headerlink" title="1. 整合Junit"></a>1. 整合Junit</h1><p>一般来说是不需要进行处理的 ，因为在创建SpringBoot 工程时 ，会自动整合<code>junit</code>​的</p><p>要说怎么配置的话？也可以写一下相关的配置：以下就是SpringBoot 整合 Junit 相关步骤</p><ol><li><p>导入相关依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写 <code>@SpringBootTest</code>​注解 ， 也可以使用 <code>classes</code>​ 属性指定<span data-type="text" style="color: var(--b3-font-color6);">引导类的字节</span>码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code>​</p><p> <img src="https://i0.hdslb.com/bfs/article/875b4964ffbabf187fd55cebb053e787645325325.png" alt="image">​</p></li><li><p>测试结果显示：</p><p> <img src="https://i0.hdslb.com/bfs/article/5fcb431bb7d30f6cd60054736a668602645325325.png" alt="image">​</p></li></ol><h1 id="2-整合MyBatis"><a href="#2-整合MyBatis" class="headerlink" title="2. 整合MyBatis"></a>2. 整合MyBatis</h1><p>整合步骤如下：</p><ol><li>创建SpringBoot 工程的时候 ，勾选SQL 下的 <code>MyBatis Framework</code>​ 和 <code>MySQl Dirver</code>​ 依赖</li><li>在 <code>application.yml</code>​ 文件中写入数据库连接信息</li><li>编写代码并进行测试</li></ol><hr><p>相关依赖如下：这里复制所有依赖的原因是因为我在整合的时候 ，因为依赖的原因报错了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.north<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-008-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-008-mybatis<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>springboot-008-mybatis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>application.yml</code>​文件中编写数据库连接信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?erverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>编写<code>接口</code>​进行数据测试 (这里写的时候 ，我居然还把SQL语句给写错了😂😂😂)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/5/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>测试类</code>​中进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot008MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">2</span>);</span><br><span class="line">System.out.println(book);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/dece686f84007dd93a808b318ec283a2645325325.png" alt="image">​</p><h1 id="3-整合MyBatis-Plus"><a href="#3-整合MyBatis-Plus" class="headerlink" title="3. 整合MyBatis-Plus"></a>3. 整合MyBatis-Plus</h1><blockquote><p>这里说一下MyBatis-Plus 与 MyBatis 的区别</p><ul><li>导入坐标不同</li><li>数据层实现简化</li></ul></blockquote><p>‍</p><ul><li><p>整合MyBatis-Plus依赖的步骤如下</p><ul><li>创建SpringBoot 工程的时候 ，勾选SQL 下的 <code>MySQl Dirver</code>​ 依赖 ，因为MyBatis-Plus是国人开发的并没有在官方中有所显示</li><li>手工添加MyBatis-Plus对应的starter</li><li>数据层接口使用<code>BaseMapper</code>​简化开发</li></ul></li></ul><hr><p>手工添加MyBatis-Plus对应的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>application.yml</code>​文件中编写数据库连接信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?erverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br></pre></td></tr></table></figure><p>数据层接口使用<code>BaseMapper</code>​简化开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/5/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot010TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookMapper.selectById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/0a270aa0320235dd7e9f44f9ee1f186f645325325.png" alt="image">​</p><h1 id="4-整合Druid"><a href="#4-整合Druid" class="headerlink" title="4. 整合Druid"></a>4. 整合Druid</h1><p>‍</p><ul><li><p>整合Druid的步骤</p><ul><li>整合<code>Druid</code>​需要导入Druid对应的<code>starter</code>​</li><li>根据Druid提供的配置方式进行配置</li></ul></li><li><p>整合第三方技术通用方式</p><ul><li>导入对应的<code>starter</code>​</li><li>根据提供的配置格式 ，配置非默认值对应的配置项</li></ul></li></ul><hr><p>导入Druid相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yml文件 : <code>这里注意下 druid 的位置</code>​</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?erverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>其余的步骤和整合MyBatis步骤想同</p><p>结果演示：</p><p><img src="https://i0.hdslb.com/bfs/article/df52c943cf96bc3c581144fe793df04c645325325.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. 基础配置</title>
      <link href="/posts/37010.html"/>
      <url>/posts/37010.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-配置文件格式"><a href="#1-配置文件格式" class="headerlink" title="1. 配置文件格式"></a>1. 配置文件格式</h1><h2 id="1-1-配置文件自动提示功能消失解决方案"><a href="#1-1-配置文件自动提示功能消失解决方案" class="headerlink" title="1.1 配置文件自动提示功能消失解决方案"></a>1.1 配置文件自动提示功能消失解决方案</h2><p><img src="https://i0.hdslb.com/bfs/article/2f6101c10c806765228ce6b31fb3ce8e645325325.png" alt="image">​</p><h2 id="1-2-SpringBoot配置文件加载顺序（了解）"><a href="#1-2-SpringBoot配置文件加载顺序（了解）" class="headerlink" title="1.2 SpringBoot配置文件加载顺序（了解）"></a>1.2 SpringBoot配置文件加载顺序（了解）</h2><p>application.properties  &gt;  application.yml  &gt;  application.yaml</p><h2 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h2><p>SpringBoot核心配置文件名为<span data-type="text" style="background-color: var(--b3-font-background6);">application</span></p><p>SpringBoot内置属性过多，且所有属性集中在一起修改，<span data-type="text" style="background-color: var(--b3-font-background13);">在使用时，通过提示键 + 关键字修改属性</span></p><p>不同配置文件中相同配置按照加载优先级相互覆盖 ，不同配置文件中不容配置全部保留</p><h1 id="2-yaml"><a href="#2-yaml" class="headerlink" title="2. yaml"></a>2. yaml</h1><h2 id="2-1-yaml-的简单说明"><a href="#2-1-yaml-的简单说明" class="headerlink" title="2.1 yaml 的简单说明"></a>2.1 yaml 的简单说明</h2><ul><li>YAML（YAML Ain’t Markup Language），一种数据序列化格式</li><li><p>优点：</p><ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul></li><li><p>YAML文件扩展名</p><ul><li><span data-type="text" style="background-color: var(--b3-font-background10);">.yml（主流）</span></li><li>.yaml</li></ul></li></ul><h2 id="2-2-yaml-语法规则"><a href="#2-2-yaml-语法规则" class="headerlink" title="2.2 yaml 语法规则"></a>2.2 yaml 语法规则</h2><ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，<span data-type="text" style="background-color: var(--b3-font-background11);">同层级左侧对齐，只允许使用空格（不允许使用Tab键）</span></li><li><span data-type="text" style="background-color: var(--b3-font-background13);">属性值前面添加空格</span>（属性名与属性值之间使用冒号+空格作为分隔）</li><li><code>#</code>​ 表示注释</li><li><span data-type="text" style="background-color: var(--b3-font-background11);">核心规则：数据前面要加空格与冒号隔开</span></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">north</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">19</span></span><br><span class="line">  <span class="attr">subjects:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br></pre></td></tr></table></figure><h2 id="2-3-yaml-数组数据"><a href="#2-3-yaml-数组数据" class="headerlink" title="2.3 yaml 数组数据"></a>2.3 yaml 数组数据</h2><p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p><h2 id="2-4-yaml-数据读取"><a href="#2-4-yaml-数据读取" class="headerlink" title="2.4 yaml 数据读取"></a>2.4 yaml 数据读取</h2><ul><li><p>第一种：使用@Value读取单个数据，<span data-type="text" style="background-color: var(--b3-font-background5);">属性名引用方式：${一级属性名.二级属性名……}</span></p><p><img src="https://i0.hdslb.com/bfs/article/3207157d7e860af41b606136831b720a645325325.png" alt="image">​</p></li><li><p>第二种：封装全部数据到Environment对象</p><p><img src="https://i0.hdslb.com/bfs/article/32d1bf01c758c3666b18ff51a7f5e23d645325325.png" alt="image">​</p></li><li><p>第三种：自定义对象封装指定数据</p><p><img src="https://i0.hdslb.com/bfs/article/e9f340b978d3566e1788c6d0c6e58369645325325.png" alt="image">​</p></li></ul><p>‍</p><p><img src="https://i0.hdslb.com/bfs/article/a31a4857a36789c8319e832515a7d782645325325.png" alt="image">​</p><h2 id="2-5-自定义对象封装数据警告解决方案"><a href="#2-5-自定义对象封装数据警告解决方案" class="headerlink" title="2.5 自定义对象封装数据警告解决方案"></a>2.5 自定义对象封装数据警告解决方案</h2><p><img src="https://i0.hdslb.com/bfs/article/7891f0aee58b5b68e17add078a7b461b645325325.png" alt="image">​</p><h2 id="2-6-知识点小结"><a href="#2-6-知识点小结" class="headerlink" title="2.6 知识点小结"></a>2.6 知识点小结</h2><p>读取数据三种格式</p><ol><li>@Value（直接读取）</li><li>Environment（封装后读取）</li><li>实体类封装属性（封装后读取）</li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. SpringBoot 入门</title>
      <link href="/posts/41190.html"/>
      <url>/posts/41190.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-SpringBoot-简介"><a href="#1-SpringBoot-简介" class="headerlink" title="1. SpringBoot 简介"></a>1. SpringBoot 简介</h1><p>SpringBoot是由Pivotal团队提供的全新框架，可以帮助我们开发基于<code>Spring的、独立的、生产级的应用程序。</code>​</p><p>其中SpringBoot的官网是：<a href="https://docs.spring.io/spring-boot/docs/2.3.10.RELEASE/reference/html/" title="Spring Boot Reference Documentation">Spring Boot Reference Documentation</a></p><hr><p>SpringBoot的主要目标是：</p><ul><li>为所有Spring开发提供更快的入门体验</li><li>开箱即用，提供了自动配置</li><li><p>提供一系列大型项目通用的非功能性特性</p><ul><li>外部化配置、嵌入式服务器、安全性、健康检查、指标</li></ul></li><li>完全不需要代码生成，也不需要XML配置</li></ul><hr><p>注意：SpringBoot 并不是Spring功能上的增强，而是提供了一种快速使用Spring的方式。</p><h1 id="2-SpringBoot入门"><a href="#2-SpringBoot入门" class="headerlink" title="2. SpringBoot入门"></a>2. SpringBoot入门</h1><h2 id="2-1-入门案例开发步骤"><a href="#2-1-入门案例开发步骤" class="headerlink" title="2.1 入门案例开发步骤"></a>2.1 入门案例开发步骤</h2><p><span data-type="text" style="background-color: var(--b3-font-background6);">这里先采用的是手动创建的方式</span></p><ol><li>新建Maven项目</li><li><p>引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建引导类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开发控制器类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.north.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> North</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行自动生成的Application类</p><p> <img src="https://i0.hdslb.com/bfs/article/a50ae307d7964be596f8fba4d95e307f645325325.png" alt="image">​</p><p> <img src="https://i0.hdslb.com/bfs/article/0ace12973112f2079efc1ac8b1f426b4645325325.png" alt="image">​</p></li></ol><hr><h2 id="2-2-通过idea骨架进行创建"><a href="#2-2-通过idea骨架进行创建" class="headerlink" title="2.2 通过idea骨架进行创建"></a>2.2 通过idea骨架进行创建</h2><p><img src="https://i0.hdslb.com/bfs/article/fc5af52c91b44373d04787ae9cf7cf69645325325.png" alt="image">​</p><h2 id="2-3-基于SpringBoot官网进行创建"><a href="#2-3-基于SpringBoot官网进行创建" class="headerlink" title="2.3 基于SpringBoot官网进行创建"></a>2.3 基于SpringBoot官网进行创建</h2><p><a href="https://start.springboot.io/"><code>官网地址</code></a>​</p><p><img src="https://i0.hdslb.com/bfs/article/7f7a8a5273630ab460c6d30f2682e59b645325325.png" alt="image">​</p><h1 id="3-思考："><a href="#3-思考：" class="headerlink" title="3. 思考："></a>3. 思考：</h1><ol><li><p>入门案例中没有引入spring-webmvc等依赖包，没有配置Tomcat服务器，为什么能正常启动？</p><ol><li><p>SpringBoot 内部集成的含有tomcat</p><p> <img src="https://i0.hdslb.com/bfs/article/4207860e3a3680e297da2a4101881888645325325.png" alt="image">​</p></li></ol></li><li><p>没有配置端口号，为什么端口是8080？</p><ol><li><span data-type="text" style="background-color: var(--b3-font-background8);">Tomcat端口号默认配置为8080</span></li></ol></li></ol><h1 id="4-SpringBoot-入门总结-起步依赖"><a href="#4-SpringBoot-入门总结-起步依赖" class="headerlink" title="4. SpringBoot 入门总结 - 起步依赖"></a>4. SpringBoot 入门总结 - 起步依赖</h1><ul><li><p>starter</p><ul><li>SpringBoot中常见项目名称，<span data-type="text" style="color: var(--b3-font-color13);">定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</span></li></ul></li><li><p>parent</p><ul><li><span data-type="text" style="background-color: var(--b3-font-background13);">所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</span></li><li>spring-boot-starter-parent（2.5.0）与 spring-boot-starter-parent（2.4.6）共计57处坐标版本不同</li></ul></li></ul><p>‍</p><p>实际开发</p><ul><li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</li><li>如发生坐标错误，再指定version（要小心版本冲突）</li></ul><p>‍</p><p>pom中starter、parent作用是什么？</p><ul><li>starter：减少依赖配置</li><li>parent： 减少依赖冲突</li></ul><p><img src="https://i0.hdslb.com/bfs/article/479e25dd1b075c308f049484de30acd0645325325.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot基础篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第09章 连接池</title>
      <link href="/posts/21772.html"/>
      <url>/posts/21772.html</url>
      
        <content type="html"><![CDATA[<p>‍</p><meta name="referrer" content="no-referrer"><h1 id="连接池的理解"><a href="#连接池的理解" class="headerlink" title="连接池的理解"></a>连接池的理解</h1><h2 id="不使用连接池有啥问题"><a href="#不使用连接池有啥问题" class="headerlink" title="不使用连接池有啥问题"></a>不使用连接池有啥问题</h2><p>Connection对象是重量级对象，创建Connection对象就是建立两个进程之间的通信，非常耗费资源。一次完整的数据库操作，大部分时间都耗费在连接对象的创建。<br>第一个问题：每一次请求都创建一个Connection连接对象，效率较低。<br>第二个问题：连接对象的数量无法限制。如果连接对象的数量过高，会导致mysql数据库服务器崩溃。</p><h2 id="使用连接池来解决什么问题"><a href="#使用连接池来解决什么问题" class="headerlink" title="使用连接池来解决什么问题"></a>使用连接池来解决什么问题</h2><p>提前创建好N个连接对象，将其存放到一个集合中（这个集合就是一个缓存）。<br>用户请求时，需要连接对象直接从连接池中获取，不需要创建连接对象，因此效率较高。<br>另外，连接对象只能从连接池中获取，如果没有空闲的连接对象，只能等待，这样连接对象创建的数量就得到了控制。</p><p>‍</p><h2 id="javax-sql-DataSource"><a href="#javax-sql-DataSource" class="headerlink" title="javax.sql.DataSource"></a>javax.sql.DataSource</h2><p>连接池有很多，不过所有的连接池都实现了 javax.sql.DataSource 接口。也就是说我们程序员在使用连接池的时候，不管使用哪家的连接池产品，只要面向javax.sql.DataSource接口调用方法即可。</p><p>另外，实际上我们也可以自定义属于我们自己的连接池。只要实现DataSource接口即可。</p><h2 id="连接池的属性"><a href="#连接池的属性" class="headerlink" title="连接池的属性"></a>连接池的属性</h2><p>对于一个基本的连接池来说，一般都包含以下几个常见的属性：</p><ol><li>初始化连接数（initialSize）：连接池初始化时创建的连接数。</li><li>最大连接数（maxActive）：连接池中最大的连接数，也就是连接池所能容纳的最大连接数量，当连接池中的连接数量达到此值时，后续请求会被阻塞并等待连接池中有连接被释放后再处理。</li><li>最小空闲连接数量（minIdle）： 指连接池中最小的空闲连接数，也就是即使当前没有请求，连接池中至少也要保持一定数量的空闲连接，以便应对高并发请求或突发连接请求的情况。</li><li>最大空闲连接数量（maxIdle）： 指连接池中最大的空闲连接数，也就是连接池中最多允许保持的空闲连接数量。当连接池中的空闲连接数量达到了maxIdle设定的值后，多余的空闲连接将会被连接池释放掉。</li><li>最大等待时间（maxWait）：当连接池中的连接数量达到最大值时，后续请求需要等待的最大时间，如果超过这个时间，则会抛出异常。</li><li>连接有效性检查（testOnBorrow、testOnReturn）：为了确保连接池中只有可用的连接，一些连接池会定期对连接进行有效性检查，这里的属性就是配置这些检查的选项。</li><li>连接的driver、url、user、password等。</li></ol><p>以上这些属性是连接池中较为常见的一些属性，不同的连接池在实现时可能还会有其他的一些属性，不过大多数连接池都包含了以上几个属性，对于使用者来说需要根据自己的需要进行灵活配置。</p><p>‍</p><h1 id="常用的连接池"><a href="#常用的连接池" class="headerlink" title="常用的连接池"></a>常用的连接池</h1><p>市面上常用的数据库连接池有许多，以下是其中几种：</p><ol><li>DBCP<ol><li>2001年诞生，最早的连接池。</li><li>Apache Software Foundation的一个开源项目。</li><li>DBCP的设计初衷是为了满足Tomcat服务器对连接池管理的需求。</li></ol></li><li>c3p0<ol><li>2004年诞生</li><li>c3p0是由Steve Waldman于2004年推出的，它是一个高性能、高可靠性、易配置的数据库连接池。c3p0能够提供连接池的容错能力、自动重连等功能，适用于高并发场景和数据量大的应用。</li></ol></li><li>Druid<ol><li>2012年诞生</li><li>Druid连接池由阿里巴巴集团开发，于2011年底开始对外公开，2012年正式发布。Druid是一个具有高性能、高可靠性、丰富功能的数据库连接池，不仅可以做连接池，还能做监控、分析和管理数据库，支持SQL防火墙、统计分析、缓存和访问控制等功能。</li></ol></li><li>HikariCP<ol><li>2012年诞生</li><li>HikariCP是由Brett Wooldridge于2012年创建的开源项目，它被认为是Java语言下最快的连接池之一，具有快速启动、低延迟、低资源消耗等优点。HikariCP连接池适用于高并发场景和云端应用。</li><li>很单纯的一个连接池，这个产品只做连接池应该做的，其他的不做。所以性能是极致的。相对于Druid来说，它更加轻量级。</li><li>Druid连接池在连接管理之外提供了更多的功能，例如SQL防火墙、统计分析、缓存、访问控制等，适用于在数据库访问过程中，需要进行细粒度控制的场景</li><li>HikariCP则更侧重于性能方面的优化，对各种数据库的兼容性也更好</li></ol></li><li>BoneCP<ol><li>2015年诞生</li><li>BoneCP是一款Java语言下的高性能连接池，于2015年由Dominik Gruntz在GitHub上发布。BoneCP具有分布式事务、连接空闲检查、SQL语句跟踪和性能分析、特定类型的连接池等特点。BoneCP连接池适用于大型应用系统和高并发的负载场景</li></ol></li></ol><p>‍</p><h1 id="连接池的使用"><a href="#连接池的使用" class="headerlink" title="连接池的使用"></a>连接池的使用</h1><h2 id="Druid的使用"><a href="#Druid的使用" class="headerlink" title="Druid的使用"></a>Druid的使用</h2><p>第一步：引入Druid的jar包<br><img src="https://i0.hdslb.com/bfs/article/a5e3938f8b7e211da0433a4d7b2036f0645325325.png" alt="image.png"><br>第二步：配置文件<br>在类的根路径下创建一个属性资源文件：jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure><p>第三步：编写代码，从连接池中获取连接对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取属性配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> DruidConfig.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">props.load(in);</span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(props);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br></pre></td></tr></table></figure><p>第四步：关闭连接<br>仍然调用Connection的close()方法，但是这个close()方法并不是真正的关闭连接，只是将连接归还到连接池，让其称为空闲连接对象。这样其他线程可以继续使用该空闲连接。</p><p>‍</p><h2 id="HikariCP的使用"><a href="#HikariCP的使用" class="headerlink" title="HikariCP的使用"></a>HikariCP的使用</h2><p>第一步：引入jar包<br>第二步：编写配置文件<br>在类的根路径下创建一个属性资源文件：jdbc2.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbcUrl</span>=<span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">1234</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">minimumIdle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maximumPoolSize</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure><p>第三步：编写代码，从连接池中获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> HikariConfig.class.getClassLoader().getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">props.load(in);</span><br><span class="line"><span class="type">HikariConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>(props);</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(config);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br></pre></td></tr></table></figure><p>第四步：关闭连接（调用conn.close()，将连接归还到连接池，连接对象为空闲状态。）</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第08章 DAO</title>
      <link href="/posts/54510.html"/>
      <url>/posts/54510.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="什么是DAO"><a href="#什么是DAO" class="headerlink" title="什么是DAO"></a>什么是DAO</h1><p>DAO是：Data Access Object，翻译为：数据访问对象。<br>一种JavaEE的设计模式，专门用来做数据增删改查的类。<br>在实际的开发中，通常我们会将数据库的操作封装为一个单独的DAO去完成，这样做的目的是：提高代码的复用性，另外也可以降低程序的耦合度，提高扩展力。<br>例如：操作用户数据的叫做UserDao，操作员工数据的叫做EmployeeDao，操作产品数据的叫做ProductDao，操作订单数据的叫做OrderDao等。</p><p>‍</p><h1 id="使用DAO改造员工信息管理"><a href="#使用DAO改造员工信息管理" class="headerlink" title="使用DAO改造员工信息管理"></a>使用DAO改造员工信息管理</h1><h2 id="定义Employee封装数据"><a href="#定义Employee封装数据" class="headerlink" title="定义Employee封装数据"></a>定义Employee封装数据</h2><p>Employee类是一个Java Bean，专门用来封装员工的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc.beans;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: Employee</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/14 23:32</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Double salary;</span><br><span class="line">    <span class="keyword">private</span> String hiredate;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, hiredate=&#x27;&quot;</span> + hiredate + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Long id, String name, String job, Double salary, String hiredate, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.hiredate = hiredate;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJob</span><span class="params">(String job)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(Double salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHiredate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHiredate</span><span class="params">(String hiredate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="定义EmployeeDao"><a href="#定义EmployeeDao" class="headerlink" title="定义EmployeeDao"></a>定义EmployeeDao</h2><p>定义五个方法，分别完成五个功能：新增，修改，删除，查看一个，查看所有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.jdbc.beans.Employee;</span><br><span class="line"><span class="keyword">import</span> com.powernode.jdbc.utils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: EmployeeDao</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/14 23:34</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_employee(name,job,salary,hiredate,address) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, employee.getName());</span><br><span class="line">            ps.setString(<span class="number">2</span>, employee.getJob());</span><br><span class="line">            ps.setDouble(<span class="number">3</span>, employee.getSalary());</span><br><span class="line">            ps.setString(<span class="number">4</span>, employee.getHiredate());</span><br><span class="line">            ps.setString(<span class="number">5</span>, employee.getAddress());</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_employee set name=?, job=?, salary=?, hiredate=?, address=? where id=?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, employee.getName());</span><br><span class="line">            ps.setString(<span class="number">2</span>, employee.getJob());</span><br><span class="line">            ps.setDouble(<span class="number">3</span>, employee.getSalary());</span><br><span class="line">            ps.setString(<span class="number">4</span>, employee.getHiredate());</span><br><span class="line">            ps.setString(<span class="number">5</span>, employee.getAddress());</span><br><span class="line">            ps.setLong(<span class="number">6</span>, employee.getId());</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 员工id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1表示成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_employee where id = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setLong(<span class="number">1</span>, id);</span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询所有员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">selectById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_employee where id = ?&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setLong(<span class="number">1</span>, id);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                employee = <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">                employee.setId(id);</span><br><span class="line">                employee.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                employee.setJob(rs.getString(<span class="string">&quot;job&quot;</span>));</span><br><span class="line">                employee.setSalary(rs.getDouble(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">                employee.setHiredate(rs.getString(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">                employee.setAddress(rs.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 员工列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_employee&quot;</span>;</span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">                employee.setId(rs.getLong(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                employee.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                employee.setJob(rs.getString(<span class="string">&quot;job&quot;</span>));</span><br><span class="line">                employee.setSalary(rs.getDouble(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">                employee.setHiredate(rs.getString(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">                employee.setAddress(rs.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                employees.add(employee);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="BaseDao的封装"><a href="#BaseDao的封装" class="headerlink" title="BaseDao的封装"></a>BaseDao的封装</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.jdbc.utils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: BaseDao</span></span><br><span class="line"><span class="comment"> * Description: 最基础的Dao，所有的Dao应该去继承该BaseDao</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/15 11:08</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个通用的执行insert delete update语句的方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql, Object... params)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="comment">// 获取预编译的数据库操作对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 占位符传值</span></span><br><span class="line">            <span class="keyword">if</span>(params != <span class="literal">null</span> &amp;&amp; params.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 有占位符 ?</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                    ps.setObject(i + <span class="number">1</span>, params[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            count = ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个通用的查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">executeQuery</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... params)</span>&#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="comment">// 获取预编译的数据库操作对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给?传值</span></span><br><span class="line">            <span class="keyword">if</span>(params != <span class="literal">null</span> &amp;&amp; params.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                    ps.setObject(i + <span class="number">1</span>, params[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行SQL语句</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取查询结果集元数据</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理查询结果集</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="comment">// 封装bean对象</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="comment">// 给bean对象属性赋值</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                比如现在有一张表：t_user，然后表中有两个字段，一个是 user_id，一个是user_name</span></span><br><span class="line"><span class="comment">                现在javabean是User类，该类中的属性名是：userId,username</span></span><br><span class="line"><span class="comment">                执行这样的SQL语句：select user_id as userId, user_name as username from t_user;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取查询结果集中的列的名字</span></span><br><span class="line">                    <span class="comment">// 这个列的名字是通过as关键字进行了起别名，这个列名就是bean的属性名。</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> rsmd.getColumnLabel(i);</span><br><span class="line">                    <span class="comment">// 获取属性Field对象</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">                    <span class="comment">// 打破封装</span></span><br><span class="line">                    declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">// 给属性赋值</span></span><br><span class="line">                    declaredField.set(obj, rs.getObject(i));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将对象添加到List集合</span></span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, ps, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回List集合</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">queryOne</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... params)</span>&#123;</span><br><span class="line">        List&lt;T&gt; list = executeQuery(clazz, sql, params);</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="literal">null</span> || list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第07章 JDBC实现员工管理</title>
      <link href="/posts/54431.html"/>
      <url>/posts/54431.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="数据库表的准备"><a href="#数据库表的准备" class="headerlink" title="数据库表的准备"></a>数据库表的准备</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_employee(</span><br><span class="line">  id <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  job <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  hiredate <span class="type">char</span>(<span class="number">10</span>),</span><br><span class="line">  salary <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">  address <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee(name,job,hiredate,salary,address) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;销售员&#x27;</span>,<span class="string">&#x27;1999-10-11&#x27;</span>,<span class="number">5000.0</span>,<span class="string">&#x27;北京朝阳&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee(name,job,hiredate,salary,address) <span class="keyword">values</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;编码人员&#x27;</span>,<span class="string">&#x27;1998-02-12&#x27;</span>,<span class="number">5000.0</span>,<span class="string">&#x27;北京海淀&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee(name,job,hiredate,salary,address) <span class="keyword">values</span>(<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;项目经理&#x27;</span>,<span class="string">&#x27;2000-08-11&#x27;</span>,<span class="number">5000.0</span>,<span class="string">&#x27;北京大兴&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee(name,job,hiredate,salary,address) <span class="keyword">values</span>(<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;产品经理&#x27;</span>,<span class="string">&#x27;2022-09-11&#x27;</span>,<span class="number">5000.0</span>,<span class="string">&#x27;北京东城&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_employee(name,job,hiredate,salary,address) <span class="keyword">values</span>(<span class="string">&#x27;钱七&#x27;</span>,<span class="string">&#x27;测试员&#x27;</span>,<span class="string">&#x27;2024-12-11&#x27;</span>,<span class="number">5000.0</span>,<span class="string">&#x27;北京西城&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_employee;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/edefad07ab249576741ed23c3b04d79f645325325.png" alt="image.png"></p><p>‍</p><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><h2 id="查看员工列表"><a href="#查看员工列表" class="headerlink" title="查看员工列表"></a>查看员工列表</h2><p><img src="https://i0.hdslb.com/bfs/article/89f3c147f9e69308872957b66a1b234b645325325.png" alt="image.png"></p><p>‍</p><h2 id="查看员工详情"><a href="#查看员工详情" class="headerlink" title="查看员工详情"></a>查看员工详情</h2><p><img src="https://i0.hdslb.com/bfs/article/7bb5928b024917dd4cb88e03ee6f8ecf645325325.png" alt="image.png"></p><p>‍</p><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><p><img src="https://i0.hdslb.com/bfs/article/63d320ddcfed4625a04e9e4ca0c31332645325325.png" alt="image.png"></p><p>‍</p><h2 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h2><p><img src="https://i0.hdslb.com/bfs/article/686be48091ef16856128cdb93bd33ede645325325.png" alt="image.png"></p><p>‍</p><h2 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h2><p><img src="https://i0.hdslb.com/bfs/article/9265097c570b2ff67163fb610b88f3e9645325325.png" alt="image.png"></p><p>‍</p><h2 id="退出系统"><a href="#退出系统" class="headerlink" title="退出系统"></a>退出系统</h2><p><img src="https://i0.hdslb.com/bfs/article/52186977bde65efcdf9e575d14b44d77645325325.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第06章 JDBC调用存储过程</title>
      <link href="/posts/3731.html"/>
      <url>/posts/3731.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="在MySQL中创建存储过程"><a href="#在MySQL中创建存储过程" class="headerlink" title="在MySQL中创建存储过程"></a>在MySQL中创建存储过程</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> mypro(<span class="keyword">in</span> n <span class="type">int</span>, <span class="keyword">out</span> sum <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">set</span> sum :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">repeat </span><br><span class="line">if n <span class="operator">%</span> <span class="number">2</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">set</span> sum :<span class="operator">=</span> sum <span class="operator">+</span> n;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">set</span> n :<span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">until n <span class="operator">&lt;=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="使用JDBC代码调用存储过程"><a href="#使用JDBC代码调用存储过程" class="headerlink" title="使用JDBC代码调用存储过程"></a>使用JDBC代码调用存储过程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.jdbc.utils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: JDBCTest21</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/12 17:42</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;&#123;call mypro(?, ?)&#125;&quot;</span>;</span><br><span class="line">            cs = conn.prepareCall(sql);</span><br><span class="line">            <span class="comment">// 给第1个 ? 传值</span></span><br><span class="line">            cs.setInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">            <span class="comment">// 将第2个 ? 注册为出参</span></span><br><span class="line">            cs.registerOutParameter(<span class="number">2</span>, Types.INTEGER);</span><br><span class="line">            <span class="comment">// 执行存储过程</span></span><br><span class="line">            cs.execute();</span><br><span class="line">            <span class="comment">// 通过出参获取结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> cs.getInt(<span class="number">2</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;计算结果：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, cs, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/f7888dc733cb06b387d4eb5c8c09c2ec645325325.png" alt="image.png"></p><p>‍</p><p>程序解说：<br>使用JDBC代码调用存储过程需要以下步骤：</p><ol><li>加载MySQL的JDBC驱动程序</li></ol><p>使用以下代码加载MySQL的JDBC驱动程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure><ol><li>连接到MySQL数据库</li></ol><p>使用以下代码连接到MySQL数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/mydb&quot;, &quot;user&quot;, &quot;password&quot;);</span><br></pre></td></tr></table></figure><p>其中，第一个参数为连接字符串，按照实际情况修改；第二个参数为用户名，按照实际情况修改；第三个参数为密码，按照实际情况修改。</p><ol><li>创建CallableStatement对象</li></ol><p>使用以下代码创建CallableStatement对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = conn.prepareCall(&quot;&#123;call mypro(?, ?)&#125;&quot;);</span><br></pre></td></tr></table></figure><p>其中，第一个参数为调用存储过程的语句，按照实际情况修改；第二个参数是需要设定的参数。</p><ol><li>设置输入参数</li></ol><p>使用以下代码设置输入参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cstmt.setInt(1, n);</span><br></pre></td></tr></table></figure><p>其中，第一个参数是参数在调用语句中的位置，第二个参数是实际要传入的值。</p><ol><li>注册输出参数</li></ol><p>使用以下代码注册输出参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cstmt.registerOutParameter(2, Types.INTEGER);</span><br></pre></td></tr></table></figure><p>其中，第一个参数是要注册的参数在调用语句中的位置，第二个参数是输出参数的类型。</p><ol><li>执行存储过程</li></ol><p>使用以下代码执行存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cstmt.execute();</span><br></pre></td></tr></table></figure><ol><li>获取输出参数值</li></ol><p>使用以下代码获取输出参数的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sum = cstmt.getInt(2);</span><br></pre></td></tr></table></figure><p>其中，第一个参数是输出参数在调用语句中的位置。</p><ol><li>关闭连接</li></ol><p>使用以下代码关闭连接和语句对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cstmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>上述代码中，可以根据实际情况适当修改存储过程名、参数传递方式、参数类型等内容。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第05章 JDBC事务</title>
      <link href="/posts/4974.html"/>
      <url>/posts/4974.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h1><p>事务是一个完整的业务，在这个业务中需要多条DML语句共同联合才能完成，而事务可以保证多条DML语句同时成功或者同时失败，从而保证数据的安全。例如A账户向B账户转账一万，A账户减去一万(update)和B账户加上一万(update)，必须同时成功或者同时失败，才能保证数据是正确的。</p><p>另请参见老杜发布的2024版MySQL教学视频。在本套教程中详细讲解了数据库事务机制。<br><img src="https://i0.hdslb.com/bfs/article/2221319beaf1722ebe32837b1121c266645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/3921163e518c65f4cc017954b7b33596645325325.png" alt="image.png"></p><p>‍</p><h1 id="使用转账案例演示事务"><a href="#使用转账案例演示事务" class="headerlink" title="使用转账案例演示事务"></a>使用转账案例演示事务</h1><h2 id="表和数据的准备"><a href="#表和数据的准备" class="headerlink" title="表和数据的准备"></a>表和数据的准备</h2><p>t_act表：<br><img src="https://i0.hdslb.com/bfs/article/e18955fc9fbd641b693ad91f7f5211e6645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/edc0cbc2e3331d32ec210d24927ed426645325325.png" alt="image.png"></p><p>‍</p><h2 id="实现转账功能"><a href="#实现转账功能" class="headerlink" title="实现转账功能"></a>实现转账功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.jdbc.utils.DbUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: JDBCTest19</span></span><br><span class="line"><span class="comment"> * Description: 实现账户转账</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/12 15:20</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 转账金额</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 act-001 账户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = balance - ? where actno = ?&quot;</span>;</span><br><span class="line">            ps1 = conn.prepareStatement(sql1);</span><br><span class="line">            ps1.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps1.setString(<span class="number">2</span>, <span class="string">&quot;act-001&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> ps1.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 act-002账户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = balance + ? where actno = ?&quot;</span>;</span><br><span class="line">            ps2 = conn.prepareStatement(sql2);</span><br><span class="line">            ps2.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps2.setString(<span class="number">2</span>, <span class="string">&quot;act-002&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> ps2.executeUpdate();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(<span class="literal">null</span>, ps1, <span class="literal">null</span>);</span><br><span class="line">            DbUtils.close(conn, ps1, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/c1f2a6f3fd404d5693ebbf7940662b31645325325.png" alt="image.png"></p><p>‍</p><h2 id="JDBC事务默认是自动提交的"><a href="#JDBC事务默认是自动提交的" class="headerlink" title="JDBC事务默认是自动提交的"></a>JDBC事务默认是自动提交的</h2><p>JDBC事务默认情况下是自动提交的，所谓的自动提交是指：只要执行一条DML语句则自动提交一次。测试一下，在以下代码位置添加断点：<br><img src="https://i0.hdslb.com/bfs/article/8f3d95727162021fef5dc4974a37328e645325325.png" alt="image.png"><br>让代码执行到断点处：<br><img src="https://i0.hdslb.com/bfs/article/76ffe330cb936ba5071321fd74e9f0ff645325325.png" alt="image.png"><br>让程序停在此处，看看数据库表中的数据是否发生变化：<br><img src="https://i0.hdslb.com/bfs/article/1ae4a87f7a902ff6626f51e4b34c4bc7645325325.png" alt="image.png"><br>可以看到，整个转账的业务还没有执行完毕，act-001 账户的余额已经被修改为 30000了，为什么修改为 30000了，因为JDBC事务默认情况下是自动提交，只要执行一条DML语句则自动提交一次。这种自动提交是极其危险的。如果在此时程序发生了异常，act-002账户的余额未成功更新，则钱会丢失一万。我们可以测试一下：测试前先将数据恢复到起初的时候<br><img src="https://i0.hdslb.com/bfs/article/1738d5d0a1c44ca9ada38da71545ed73645325325.png" alt="image.png"><br>在以下代码位置，让其发生异常：<br><img src="https://i0.hdslb.com/bfs/article/4b24ad1b2a71f1f770927286dcdec113645325325.png" alt="image.png"><br>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/a4be48bcd69d06757302c60beafc1304645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/6c9e98bfa75f355d85dafd8d71be6c68645325325.png" alt="image.png"><br>经过测试得知，丢失了一万元。</p><p>‍</p><h2 id="添加事务控制"><a href="#添加事务控制" class="headerlink" title="添加事务控制"></a>添加事务控制</h2><p>如何解决以上问题，分三步：<br>第一步：将JDBC事务的自动提交机制修改为手动提交（即开启事务）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第二步：当整个业务完整结束后，手动提交事务（即提交事务，事务结束）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.commit();</span><br></pre></td></tr></table></figure><p>第三步：在处理业务过程中，如果发生异常，则进入catch语句块进行异常处理，手动回滚事务（即回滚事务，事务结束）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.rollback();</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 转账金额</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10000.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 开启事务（关闭自动提交机制）</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 act-001 账户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = balance - ? where actno = ?&quot;</span>;</span><br><span class="line">            ps1 = conn.prepareStatement(sql1);</span><br><span class="line">            ps1.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps1.setString(<span class="number">2</span>, <span class="string">&quot;act-001&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> ps1.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            s.toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新 act-002账户</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = balance + ? where actno = ?&quot;</span>;</span><br><span class="line">            ps2 = conn.prepareStatement(sql2);</span><br><span class="line">            ps2.setDouble(<span class="number">1</span>, money);</span><br><span class="line">            ps2.setString(<span class="number">2</span>, <span class="string">&quot;act-002&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> ps2.executeUpdate();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 遇到异常回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(<span class="literal">null</span>, ps1, <span class="literal">null</span>);</span><br><span class="line">            DbUtils.close(conn, ps1, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据恢复如初：<br><img src="https://i0.hdslb.com/bfs/article/174b53d21ef33da0b9bddc1fbcfb3331645325325.png" alt="image.png"><br>执行程序，仍然会出现异常：<br><img src="https://i0.hdslb.com/bfs/article/f14710ad2616096b579cc59ce64c35d2645325325.png" alt="image.png"><br>但是数据库表中的数据是安全的：<br><img src="https://i0.hdslb.com/bfs/article/a563f805b521f92d11ab22de6af6efe3645325325.png" alt="image.png"><br>当程序不出现异常时：<br><img src="https://i0.hdslb.com/bfs/article/8ffbdc92b89a64879ec16b9dc8f68b4c645325325.png" alt="image.png"><br>数据库表中的数据也是正确的：<br><img src="https://i0.hdslb.com/bfs/article/fd51c976f31f674fbd27f667c279274d645325325.png" alt="image.png"><br>这样就采用了JDBC事务解决了数据安全的问题。</p><p>‍</p><h1 id="设置JDBC事务隔离级别"><a href="#设置JDBC事务隔离级别" class="headerlink" title="设置JDBC事务隔离级别"></a>设置JDBC事务隔离级别</h1><p>关于事务隔离级别相关内容另请参见：老杜发布的2024版MySQL教程。<br>设置事务的隔离级别也是比较重要的，在JDBC程序中应该如何设置事务的隔离级别呢？代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DbUtils.getConnection();</span><br><span class="line">            conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(conn, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第04章 SQL注入</title>
      <link href="/posts/3186.html"/>
      <url>/posts/3186.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h1><p>SQL注入问题说的是：用户输入的信息中含有SQL语句关键字，和程序中的SQL语句进行字符串拼接，导致程序中的SQL语句改变了原意。（SQL注入问题是一种系统安全问题）<br>接下来我们来演示一下SQL注入问题。以用户登录为例。使用表：t_user<br>业务描述：系统启动后，给出登录页面，用户可以输入用户名和密码，用户名和密码全部正确，则登录成功，反之，则登录失败。<br>分析一下要执行怎样的SQL语句？是不是这样的？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> 用户输入的用户名 <span class="keyword">and</span> password <span class="operator">=</span> 用户输入的密码;</span><br></pre></td></tr></table></figure><p>如果以上的SQL语句能够查询到结果，说明用户名和密码是正确的，则登录成功。如果查不到，说明是错误的，则登录失败。<br>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录案例演示SQL注入问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出欢迎页面</span></span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用用户管理系统，请登录！&quot;</span>);</span><br><span class="line">        <span class="comment">// 接收用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginPwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">// 读取属性配置文件，获取连接数据库的信息。</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// JDBC程序验证用户名和密码是否正确</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2.获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3.获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select realname from t_user where name = &#x27;&quot;</span>+loginName+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+loginPwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">// 5.处理查询结果集</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123; <span class="comment">// 如果可以确定结果集中最多只有一条记录的话，可以使用if语句，不一定非要用while循环。</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">realname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;realname&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功，欢迎您&quot;</span> + realname);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败，用户名不存在或者密码错误。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果用户名和密码正确的话，执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/9484f80eb3370e8b19add5e235389351645325325.png" alt="image.png"></p><p>如果用户名不存在或者密码错误的话，执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/4c7821c0b5119bd4c257062aa2d7dc6c645325325.png" alt="image.png"></p><p>接下来，见证奇迹的时刻，当我分别输入以下的用户名和密码时，系统被攻破了：<br><img src="https://i0.hdslb.com/bfs/article/3611bfb1a9d258c83002d3fc9fe08137645325325.png" alt="image.png"><br>这种现象就叫做：SQL注入。为什么会发生以上的事儿呢？原因是：用户提供的信息中有SQL语句关键字，并且和底层的SQL字符串进行了拼接，变成了一个全新的SQL语句。<br>例如：本来程序想表达的是这样的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> realname <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;sunwukong&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果被SQL注入之后，SQL语句就变成这样了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> realname <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;aaa&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;bbb&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><p>我们可以执行一下这条SQL，看看结果是什么？<br><img src="https://i0.hdslb.com/bfs/article/9dedc2e818e0d46113505598a7aba5c3645325325.png" alt="image.png"><br>把所有结果全部查到了，这是因为 ‘1’=’1’ 是恒成立的，并且使用的是 or 运算符，所以 or 前面的条件等于是没有的。这样就会把所有数据全部查到。而在程序中的判断逻辑是只要结果集中有数据，则表示登录成功。所以以上的输入方式最终的结果就是登录成功。你设想一下，如果这个系统是一个高级别保密系统，只有登录成功的人才有权限，那么这个系统是不是极其危险了。</p><p>‍</p><h1 id="解决SQL注入问题"><a href="#解决SQL注入问题" class="headerlink" title="解决SQL注入问题"></a>解决SQL注入问题</h1><p>导致SQL注入的根本原因是什么？只有找到真正的原因，问题才能得到解决。</p><p>最根本的原因是：Statement造成的。</p><p>Statement执行原理是：先进行字符串的拼接，将拼接好的SQL语句发送给数据库服务器，数据库服务器进行SQL语句的编译，然后执行。因此用户提供的信息中如果含有SQL语句的关键字，那么这些关键字正好参加了SQL语句的编译，所以导致原SQL语句被扭曲。</p><p>因此，JDBC为了解决这个问题，引入了一个新的接口：PreparedStatement，我们称为：预编译的数据库操作对象。PreparedStatement是Statement接口的子接口。它俩是继承关系。</p><p>PreparedStatement执行原理是：先对SQL语句进行预先的编译，然后再向SQL语句指定的位置传值，也就是说：用户提供的信息中即使含有SQL语句的关键字，那么这个信息也只会被当做一个值传递给SQL语句，用户提供的信息不再参与SQL语句的编译了，这样就解决了SQL注入问题。</p><p>使用PreparedStatement解决SQL注入问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PreparedStatement解决SQL注入问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输出欢迎页面</span></span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用用户管理系统，请登录！&quot;</span>);</span><br><span class="line">        <span class="comment">// 接收用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginName</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">loginPwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">// 读取属性配置文件，获取连接数据库的信息。</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// JDBC程序验证用户名和密码是否正确</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2.获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3.获取数据库操作对象（获取的是预编译的数据库操作对象）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select realname from t_user where name=? and password=?&quot;</span>;</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, loginName);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, loginPwd);</span><br><span class="line">            <span class="comment">// 4.执行SQL语句</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">// 5.处理查询结果集</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">realname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;realname&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功，欢迎您&quot;</span> + realname);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败，用户名不存在或者密码错误。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户名和密码正确的话，执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/f95f8aabea8092c46ab93c5c09ae1e95645325325.png" alt="image.png"></p><p>用户名和密码错误的话，执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/ae8c33fea5e51501e3042870b9f36829645325325.png" alt="image.png"></p><p>尝试SQL注入，看看还能不能？<br><img src="https://i0.hdslb.com/bfs/article/ee2b43bc9ec0060b4d94c26280962922645325325.png" alt="image.png"><br>通过测试得知，SQL注入问题已经解决了。<strong>根本原因是：bbb’ or ‘1’=’1 这个字符串中虽然含有SQL语句的关键字，但是只会被当做普通的值传到SQL语句中，并没有参与SQL语句的编译</strong>。</p><p><strong>关于使用PreparedStatement要注意的是：</strong></p><ul><li>带有占位符 ? 的SQL语句我们称为：预处理SQL语句。</li><li>占位符 ? 不能使用单引号或双引号包裹。如果包裹，占位符则不再是占位符，是一个普通的问号字符。</li><li>在执行SQL语句前，必须给每一个占位符 ? 传值。</li><li>如何给占位符 ? 传值，通过以下的方法：<ul><li>pstmt.setXxx(第几个占位符, 传什么值)</li><li>“第几个占位符”：从1开始。第1个占位符则是1，第2个占位符则是2，以此类推。</li><li>“传什么值”：具体要看调用的什么方法？<ul><li>如果调用pstmt.setString方法，则传的值必须是一个字符串。</li><li>如果调用pstmt.setInt方法，则传的值必须是一个整数。</li><li>以此类推……</li></ul></li></ul></li></ul><p><strong>PreparedStatement和Statement都是用于执行SQL语句的接口，它们的主要区别在于：</strong></p><ul><li>PreparedStatement预编译SQL语句，Statement直接提交SQL语句；</li><li>PreparedStatement执行速度更快，可以避免SQL注入攻击；(PreparedStatement对于同一条SQL语句来说，编译一次，执行N次。而Statement是每次都要进行编译的。因此PreparedStatement效率略微高一些。)</li><li>PreparedStatement会做类型检查，是类型安全的；</li></ul><p>‍</p><h1 id="PreparedStatement的使用"><a href="#PreparedStatement的使用" class="headerlink" title="PreparedStatement的使用"></a>PreparedStatement的使用</h1><h2 id="新增操作"><a href="#新增操作" class="headerlink" title="新增操作"></a>新增操作</h2><p>需求：向 emp 表中插入这样一条记录：<br>empno：8888<br>ename：张三<br>job：销售员<br>mgr：7369<br>hiredate：2024-01-01<br>sal：1000.0<br>comm：500.0<br>deptno：10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into emp(empno,ename,sal,comm,job,mgr,hiredate,deptno) values(?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">// 预编译SQL语句</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 传值</span></span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, <span class="number">8888</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            pstmt.setDouble(<span class="number">3</span>, <span class="number">10000.0</span>);</span><br><span class="line">            pstmt.setDouble(<span class="number">4</span>, <span class="number">500.0</span>);</span><br><span class="line">            pstmt.setString(<span class="number">5</span>, <span class="string">&quot;销售员&quot;</span>);</span><br><span class="line">            pstmt.setInt(<span class="number">6</span>, <span class="number">7369</span>);</span><br><span class="line">            <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2024-01-01&quot;</span>);</span><br><span class="line">            pstmt.setDate(<span class="number">7</span>, java.sql.Date.valueOf(localDate));</span><br><span class="line">            pstmt.setInt(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == count) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功更新&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点学习内容：如何给占位符 ? 传值。<br>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/0eb9b231e616d399ceb1ebe2d8e9a1eb645325325.png" alt="image.png"></p><p>‍</p><h2 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h2><p>需求：将员工编号为8888的员工，姓名修改为李四，岗位修改为产品经理，月薪修改为5000.0，其他不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update emp set ename = ?, job = ?, sal = ? where empno = ?&quot;</span>;</span><br><span class="line">            <span class="comment">// 预编译SQL语句</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 传值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, <span class="string">&quot;产品经理&quot;</span>);</span><br><span class="line">            pstmt.setDouble(<span class="number">3</span>, <span class="number">5000.0</span>);</span><br><span class="line">            pstmt.setInt(<span class="number">4</span>, <span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == count) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功更新&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/4cdb7e5a0421b90f5394ae9af1955b15645325325.png" alt="image.png"></p><p>‍</p><h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>需求：将员工编号为8888的删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from emp where empno = ?&quot;</span>;</span><br><span class="line">            <span class="comment">// 预编译SQL语句</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 传值</span></span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, <span class="number">8888</span>);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == count) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功更新&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/5336074c48251e244601cec3f9e25295645325325.png" alt="image.png"></p><p>‍</p><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>需求：查询员工名字中第二个字母是 O 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select ename from emp where ename like ?&quot;</span>;</span><br><span class="line">            <span class="comment">// 预编译SQL语句</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 传值</span></span><br><span class="line">            pstmt.setString(<span class="number">1</span>, <span class="string">&quot;_O%&quot;</span>);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">// 5. 处理查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                System.out.println(ename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/58f42986b3d3081e4bafe679f6122db1645325325.png" alt="image.png"><br>通过这个例子主要告诉大家，程序不能这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select ename from emp where ename like &#x27;_?%&#x27;&quot;</span>;</span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;O&quot;</span>);</span><br></pre></td></tr></table></figure><p>由于占位符 ? 被单引号包裹，因此这个占位符是无效的。</p><p>‍</p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>对于MySQL来说，通用的分页SQL语句：<br>假设每页显示3条记录：pageSize = 3<br>第1页：limit 0, 3<br>第2页：limit 3, 3<br>第3页：limit 6, 3<br><strong>第pageNo页：limit (pageNo - 1)*​</strong>pageSize, pageSize**<br>需求：查询所有员工姓名，每页显示3条(pageSize)，显示第2页(pageNo)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每页显示记录条数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 显示第几页</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select ename from emp limit ?, ?&quot;</span>;</span><br><span class="line">            <span class="comment">// 预编译SQL语句</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 给 ? 传值</span></span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, (pageNo - <span class="number">1</span>) * pageSize);</span><br><span class="line">            pstmt.setInt(<span class="number">2</span>, pageSize);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">// 5. 处理查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">                System.out.println(ename);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/507d250946a5b5f58fd705f069ba8c08645325325.png" alt="image.png"></p><p>‍</p><h2 id="blob数据的插入和读取"><a href="#blob数据的插入和读取" class="headerlink" title="blob数据的插入和读取"></a>blob数据的插入和读取</h2><p>准备一张表：t_img，三个字段，一个id主键，一个图片名字name，一个img。<br>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `t_img` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  `img` <span class="type">blob</span></span><br><span class="line">) engine<span class="operator">=</span>innodb;</span><br></pre></td></tr></table></figure><p>准备一张图片：<br><img src="https://i0.hdslb.com/bfs/article/26318cae1fc1f73a560d25c94492c426645325325.jpg" alt="dog.jpg"></p><p>需求1：向t_img 表中插入一张图片。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_img(img) values(?)&quot;</span>;</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 获取文件输入流</span></span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/dog.jpg&quot;</span>);</span><br><span class="line">            pstmt.setBlob(<span class="number">1</span>, in);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/d6b731061b2dcfe58fb1a07269b2defe645325325.png" alt="image.png"></p><p>需求2：从t_img 表中读取一张图片。（从数据库中读取一张图片保存到本地。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select img from t_img where id = ?&quot;</span>;</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">// 5. 处理查询结果集</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 获取二进制大对象</span></span><br><span class="line">                <span class="type">Blob</span> <span class="variable">img</span> <span class="operator">=</span> rs.getBlob(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取输入流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">binaryStream</span> <span class="operator">=</span> img.getBinaryStream();</span><br><span class="line">                <span class="comment">// 创建输出流，该输出流负责写到本地</span></span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:/dog2.jpg&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">readCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((readCount = binaryStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(bytes, <span class="number">0</span>, readCount);</span><br><span class="line">                &#125;</span><br><span class="line">                out.flush();</span><br><span class="line">                binaryStream.close();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完毕之后，查看一下图片大小是否和原图片相同，打开看看是否可以正常显示。</p><p>‍</p><h1 id="JDBC批处理操作"><a href="#JDBC批处理操作" class="headerlink" title="JDBC批处理操作"></a>JDBC批处理操作</h1><p>准备一张商品表：t_product<br>建表语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_product(</span><br><span class="line">  id <span class="type">bigint</span> <span class="keyword">primary</span> key,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="不使用批处理"><a href="#不使用批处理" class="headerlink" title="不使用批处理"></a>不使用批处理</h2><p>不使用批处理，向 t_product 表中插入一万条商品信息，并记录耗时！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoBatchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_product(id, name) values (?, ?)&quot;</span>;</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                pstmt.setInt(<span class="number">1</span>, i);</span><br><span class="line">                pstmt.setString(<span class="number">2</span>, <span class="string">&quot;product&quot;</span> + i);</span><br><span class="line">                <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">                count += pstmt.executeUpdate();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时&quot;</span> + (end - begin) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/ef67d22fd7c7249ca284bb4ed9780b2e645325325.png" alt="image.png"></p><p>‍</p><h2 id="使用批处理"><a href="#使用批处理" class="headerlink" title="使用批处理"></a>使用批处理</h2><p>使用批处理，向 t_product 表中插入一万条商品信息，并记录耗时！<br><strong>注意：启用批处理需要在URL后面添加这个的参数：rewriteBatchedStatements=true</strong><br><img src="https://i0.hdslb.com/bfs/article/c4a0d4239851a5c477f95c6277d134dd645325325.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">// 3. 获取预编译的数据操作对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_product(id, name) values (?, ?)&quot;</span>;</span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                pstmt.setInt(<span class="number">1</span>, i);</span><br><span class="line">                pstmt.setString(<span class="number">2</span>, <span class="string">&quot;product&quot;</span> + i);</span><br><span class="line">                pstmt.addBatch();</span><br><span class="line">            &#125;</span><br><span class="line">            count += pstmt.executeBatch().length;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pstmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时&quot;</span> + (end - begin) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/b6f09a5948a3a99fc6e66e283f8b8732645325325.png" alt="image.png"></p><p>在进行大数据量插入时，批处理为什么可以提高程序的执行效率？</p><ol><li>减少了网络通信次数：JDBC 批处理会将多个 SQL 语句一次性发送给服务器，减少了客户端和服务器之间的通信次数，从而提高了数据写入的速度，特别是对于远程服务器而言，优化效果更为显著。</li><li>减少了数据库操作次数：JDBC 批处理会将多个 SQL 语句合并成一条 SQL 语句进行执行，从而减少了数据库操作的次数，减轻了数据库的负担，大大提高了数据写入的速度。</li></ol><p>‍</p><h1 id="DbUtils工具类的封装"><a href="#DbUtils工具类的封装" class="headerlink" title="DbUtils工具类的封装"></a>DbUtils工具类的封装</h1><p>JDBC编程六步中，很多代码是重复出现的，可以为这些代码封装一个工具类。让JDBC代码变的更简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName: DbUtils</span></span><br><span class="line"><span class="comment"> * Description: JDBC工具类</span></span><br><span class="line"><span class="comment"> * Datetime: 2024/4/10 22:29</span></span><br><span class="line"><span class="comment"> * Author: 老杜@动力节点</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 读取属性资源文件</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        url = bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        user = bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        password = bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// 注册驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt 数据库操作对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 结果集对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第03章 JDBC的查询</title>
      <link href="/posts/12565.html"/>
      <url>/posts/12565.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="JDBC的查询操作"><a href="#JDBC的查询操作" class="headerlink" title="JDBC的查询操作"></a>JDBC的查询操作</h1><p>ResultSet 是 JDBC （Java 数据库连接） API 提供的接口，它用于表示 SQL 查询的结果集。ResultSet 对象中包含了查询结果的所有行，可以通过 next() 方法逐行地获取并处理每一行的数据。它最常用于执行 SELECT 语句查询出来的结果集。</p><p>ResultSet 的遍历是基于 JDBC 的流式处理机制的，即一行一行地获取结果，避免将所有结果全部取出后再进行处理导致内存溢出问题。</p><p>在使用 ResultSet 遍历查询结果时，一般会采用以下步骤：</p><ol><li>执行 SQL 查询，获取 ResultSet 对象。</li><li>使用 ResultSet 的 next() 方法移动游标指向结果集的下一行，判断是否有更多的数据行。</li><li>如果有更多的数据行，则使用 ResultSet 对象提供的 getXXX() 方法获取当前行的各个字段（XXX 表示不同的数据类型）。例如，getLong(“id”) 方法用于获取当前行的 id 列对应的 Long 类型的值。</li><li>处理当前行的数据，例如将其存入 Java 对象中。</li><li>重复执行步骤 2~4，直到结果集中的所有行都被遍历完毕。</li><li>调用 ResultSet 的 close() 方法释放资源。</li></ol><p>需要注意的是，在使用完 ResultSet 对象之后，需要及时关闭它，以释放数据库资源并避免潜在的内存泄漏问题。否则，如果在多个线程中打开了多个 ResultSet 对象，并且没有正确关闭它们的话，可能会导致数据库连接过多，从而影响系统的稳定性和性能。</p><p>‍</p><h2 id="通过列索引获取数据（以String类型获取）"><a href="#通过列索引获取数据（以String类型获取）" class="headerlink" title="通过列索引获取数据（以String类型获取）"></a>通过列索引获取数据（以String类型获取）</h2><p>需求：获取t_user表中所有数据，在控制台打印输出每一行的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,password,realname,gender,tel <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure><p>要查询的数据如下图：<br><img src="https://i0.hdslb.com/bfs/article/b4fdb4fe9fe96d1cfd8c719e2d026256645325325.png" alt="image.png"><br>代码如下（重点关注第4步 第5步 第6步）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,password,realname,gender,tel from t_user&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 处理查询结果集（这里的处理方式就是：遍历所有数据并输出）</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> rs.getString(<span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">realname</span> <span class="operator">=</span> rs.getString(<span class="number">4</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="number">5</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> rs.getString(<span class="number">6</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + pwd + <span class="string">&quot;\t&quot;</span> + realname + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + tel);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/731c587365c91971600cbf585b0be049645325325.png" alt="image.png"></p><p>代码解读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 执行SQL语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,password,realname,gender,tel from t_user&quot;</span>;</span><br><span class="line">rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><p>执行insert delete update语句的时候，调用Statement接口的executeUpdate()方法。<br>执行select语句的时候，<strong>调用Statement接口的executeQuery()方法</strong>。执行select语句后返回结果集对象：ResultSet。</p><p>代码解读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. 处理查询结果集（这里的处理方式就是：遍历所有数据并输出）</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> rs.getString(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">realname</span> <span class="operator">=</span> rs.getString(<span class="number">4</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="number">5</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> rs.getString(<span class="number">6</span>);</span><br><span class="line">    System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + pwd + <span class="string">&quot;\t&quot;</span> + realname + <span class="string">&quot;\t&quot;</span> + gender + <span class="string">&quot;\t&quot;</span> + tel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>rs.next() 将游标移动到下一行，如果移动后指向的这一行有数据则返回true，没有数据则返回false。</strong></li><li><strong>while循环体当中的代码是处理当前游标指向的这一行的数据。（注意：是处理的一行数据）</strong></li><li><strong>rs.getString(int columnIndex) 其中 int columnIndex 是查询结果的列下标，列下标从1开始，以1递增。</strong></li></ul><p><img src="https://i0.hdslb.com/bfs/article/82e563fe2fbc0eeb18b58962415438a4645325325.png" alt="image.png"></p><ul><li><strong>rs.getString(…) 方法在执行时，不管底层数据库中的数据类型是什么，统一以字符串String类型来获取。</strong></li></ul><p>代码解读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6. 释放资源</span></span><br><span class="line"><span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        stmt.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResultSet最终也是需要关闭的。<strong>先关闭ResultSet，再关闭Statement，最后关闭Connection</strong>。</p><p>‍</p><h2 id="通过列名获取数据（以String类型获取）"><a href="#通过列名获取数据（以String类型获取）" class="headerlink" title="通过列名获取数据（以String类型获取）"></a>通过列名获取数据（以String类型获取）</h2><p>获取当前行的数据，不仅可以通过列下标获取，还可以通过查询结果的列名来获取，通常这种方式是被推荐的，因为可读性好。<br>例如这样的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">as</span> username, realname <span class="keyword">from</span> t_user;</span><br></pre></td></tr></table></figure><p>执行结果是：<br><img src="https://i0.hdslb.com/bfs/article/893b39b5b97ad30ab8d1d71f270405d0645325325.png" alt="image.png"><br>我们可以按照查询结果的列名来获取数据：<br><img src="https://i0.hdslb.com/bfs/article/58ec4f06c3e04944fe35a4c97d3d3058645325325.png" alt="image.png"><br><strong>注意：是根据查询结果的列名，而不是表中的列名。以上查询的时候将字段name起别名username了，所以要根据username来获取，而不能再根据name来获取了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name as username,realname from t_user&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 处理查询结果集（这里的处理方式就是：遍历所有数据并输出）</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">realname</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;realname&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + realname);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/3e301755d6af6825224dd51b7bf59304645325325.png" alt="image.png"></p><p>如果将上面代码中<code>rs.getString(&quot;username&quot;)</code>修改为<code>rs.getString(&quot;name&quot;)</code>，执行就会出现以下错误：<br><img src="https://i0.hdslb.com/bfs/article/ba8f5b16c2fe5a9d0b3d36b855dee964645325325.png" alt="image.png"><br>提示name列是不存在的。所以一定是根据查询结果中的列名来获取，而不是表中原始的列名。</p><p>‍</p><h2 id="以指定的类型获取数据"><a href="#以指定的类型获取数据" class="headerlink" title="以指定的类型获取数据"></a>以指定的类型获取数据</h2><p>前面的程序可以看到，不管数据库表中是什么数据类型，都以String类型返回。当然，也能以指定类型返回。<br>使用PowerDesigner再设计一张商品表：t_product，使用Navicat for MySQL工具准备数据如下：<br><img src="https://i0.hdslb.com/bfs/article/9eca166933274fc7b59356ee4a61270a645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/2a917daf62b8432f740ccce8dbf2f568645325325.png" alt="image.png"></p><p>id以long类型获取，name以String类型获取，price以double类型获取，create_time以java.sql.Date类型获取，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,price,create_time as createTime from t_product&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 处理查询结果集（这里的处理方式就是：遍历所有数据并输出）</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> rs.getLong(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">                java.sql.<span class="type">Date</span> <span class="variable">createTime</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">                <span class="comment">// 以指定类型获取后是可以直接用的，例如获取到价格后，统一让价格乘以2</span></span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + price * <span class="number">2</span> + <span class="string">&quot;\t&quot;</span> + createTime);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/f3db3b8290dcf019b29959580fe47cef645325325.png" alt="image.png"></p><p>‍</p><h2 id="获取结果集的元数据信息（了解）"><a href="#获取结果集的元数据信息（了解）" class="headerlink" title="获取结果集的元数据信息（了解）"></a>获取结果集的元数据信息（了解）</h2><p>ResultSetMetaData 是一个接口，用于描述 ResultSet 中的元数据信息，即查询结果集的结构信息，例如查询结果集中包含了哪些列，每个列的数据类型、长度、标识符等。</p><p>ResultSetMetaData 可以通过 ResultSet 接口的 getMetaData() 方法获取，一般在对 ResultSet 进行元数据信息处理时使用。例如，可以使用 ResultSetMetaData 对象获取查询结果中列的信息，如列名、列的类型、列的长度等。通过 ResultSetMetaData 接口的方法，可以实现对查询结果的基本描述信息操作，例如获取查询结果集中有多少列、列的类型、列的标识符等。以下是一段通过 ResultSetMetaData 获取查询结果中列的信息的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,price,create_time as createTime from t_product&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取元数据信息</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;列名：&quot;</span> + rsmd.getColumnName(i) + <span class="string">&quot;，数据类型：&quot;</span> + rsmd.getColumnTypeName(i) +</span><br><span class="line">                                   <span class="string">&quot;，列的长度：&quot;</span> + rsmd.getColumnDisplaySize(i));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/ac81c6eabb3b1cc7d0a6e84d363656de645325325.png" alt="image.png"></p><p>在上面的代码中，我们首先创建了一个 Statement 对象，然后执行了一条 SQL 查询语句，生成了一个 ResultSet 对象。接下来，我们通过 ResultSet 对象的 getMetaData() 方法获取了 ResultSetMetaData 对象，进而获取了查询结果中列的信息并进行输出。需要注意的是，在进行列信息的获取时，列的编号从 1 开始计算。该示例代码将获取查询结果集中所有列名、数据类型以及长度等信息。</p><p>‍</p><h1 id="获取新增行的主键值"><a href="#获取新增行的主键值" class="headerlink" title="获取新增行的主键值"></a>获取新增行的主键值</h1><p>有很多表的主键字段值都是自增的，在某些特殊的业务环境下，当我们插入了新数据后，希望能够获取到这条新数据的主键值，应该如何获取呢？<br>在 JDBC 中，如果要获取插入数据后的主键值，可以使用 Statement 接口的 executeUpdate() 方法的重载版本，该方法接受一个额外的参数，用于指定是否需要获取自动生成的主键值。然后，通过以下两个步骤获取插入数据后的主键值：</p><ol><li>在执行 executeUpdate() 方法时指定一个标志位，表示需要返回插入的主键值。</li><li>调用 Statement 对象的 getGeneratedKeys() 方法，返回一个包含插入的主键值的 ResultSet 对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;zhangsan&#x27;,&#x27;111&#x27;,&#x27;张三&#x27;,&#x27;男&#x27;,&#x27;19856525352&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">// 第一步</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">            <span class="comment">// 第二步</span></span><br><span class="line">            rs = stmt.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;新增数据行的主键值：&quot;</span> + id);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/69d0993849deb5a53e185c3a2533ca8f645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/a70836c45247bf8769340ffa1406d1e6645325325.png" alt="image.png"><br>以上代码中，我们将 Statement.RETURN_GENERATED_KEYS 传递给 executeUpdate() 方法，以指定需要获取插入的主键值。然后，通过调用 Statement 对象的 getGeneratedKeys() 方法获取包含插入的主键值的 ResultSet 对象，通过 ResultSet 对象获取主键值。需要注意的是，在使用 Statement 对象的 getGeneratedKeys() 方法获取自动生成的主键值时，主键值的获取方式具有一定的差异，需要根据不同的数据库种类和版本来进行调整。</p><p>‍</p><h1 id="使用IDEA工具编写JDBC程序"><a href="#使用IDEA工具编写JDBC程序" class="headerlink" title="使用IDEA工具编写JDBC程序"></a>使用IDEA工具编写JDBC程序</h1><h2 id="创建空的工程并设置JDK"><a href="#创建空的工程并设置JDK" class="headerlink" title="创建空的工程并设置JDK"></a>创建空的工程并设置JDK</h2><p>创建一个空的工程：mypro<br><img src="https://i0.hdslb.com/bfs/article/19695e09a84248f2cb7c981db09b3479645325325.png" alt="image.png"></p><p>工程结构：<br><img src="https://i0.hdslb.com/bfs/article/5e52c85f69652ccd554eee7d3dcfe484645325325.png" alt="image.png"></p><p>设置JDK以及编译器版本：<br><img src="https://i0.hdslb.com/bfs/article/aee0725bca2bd8b288f220433bb9cc76645325325.png" alt="image.png"></p><p>‍</p><h2 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h2><p><img src="https://i0.hdslb.com/bfs/article/ce55bf6c5ba625c748882e02be4e90b6645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/23a7601b571ef52187978b60e8f172d3645325325.png" alt="image.png"></p><p>‍</p><h2 id="将驱动加入到CLASSPATH"><a href="#将驱动加入到CLASSPATH" class="headerlink" title="将驱动加入到CLASSPATH"></a>将驱动加入到CLASSPATH</h2><p>在模块jdbc下创建一个目录：lib<br><img src="https://i0.hdslb.com/bfs/article/edaa31664e24fc00ae64ccf05a5d9211645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e777d023ecbc5a1cebac4e29eff30cfb645325325.png" alt="image.png"></p><p>将mysql的驱动jar包拷贝到lib目录当中：<br><img src="https://i0.hdslb.com/bfs/article/1b22c405926ab895ed1942713eca4866645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/98b7cb46a95cc7d661082347fd7df053645325325.png" alt="image.png"></p><p>将jar包加入到classpath：<br><img src="https://i0.hdslb.com/bfs/article/781fd0a4aa4900543c52eb118fb3a49b645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/3daf1242abf53b1890fb8b5c6a336725645325325.png" alt="image.png"></p><p>‍</p><h2 id="编写JDBC程序"><a href="#编写JDBC程序" class="headerlink" title="编写JDBC程序"></a>编写JDBC程序</h2><p>新建软件包：com.powernode.jdbc<br><img src="https://i0.hdslb.com/bfs/article/3b3dc2fe46e525de2e98557ee8b83f6c645325325.png" alt="image.png"></p><p>新建JDBCTest01类：<br><img src="https://i0.hdslb.com/bfs/article/5a8f09bd0576e0bccbe145f04b2c0a33645325325.png" alt="image.png"></p><p>在JDBCTest01类中编写main方法，main方法中编写JDBC代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;com.powernode.jdbc.jdbc&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,password from t_user&quot;</span>;</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;,&quot;</span> + name + <span class="string">&quot;,&quot;</span> + pwd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(rs != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供配置文件，在com.powernode.jdbc包下新建jdbc.properties文件：<br><img src="https://i0.hdslb.com/bfs/article/3242e6b67adfea4bdff8c1f6ae969358645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/5ffacc9bbde9482ed43717182ecebcb4645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/78c85c61d7e7788c1d6e2a4f249e19df645325325.png" alt="image.png"></p><p>jdbc.properties文件中如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/58c9847e7fe1a88fb47b1c0cc6478c7c645325325.png" alt="image.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第02章 JDBC的新增修改删除</title>
      <link href="/posts/62304.html"/>
      <url>/posts/62304.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="JDBC编程六步"><a href="#JDBC编程六步" class="headerlink" title="JDBC编程六步"></a>JDBC编程六步</h1><p>JDBC编程的步骤是很固定的，通常包含以下六步：</p><ul><li>第一步：注册驱动<ul><li>作用一：将 JDBC 驱动程序从硬盘上的文件系统中加载到内存中。</li><li>作用二：使得 DriverManager 可以通过一个统一的接口来管理该驱动程序的所有连接操作。</li></ul></li><li>第二步：获取数据库连接<ul><li>获取java.sql.Connection对象，该对象的创建标志着mysql进程和jvm进程之间的通道打开了。</li></ul></li><li>第三步：获取数据库操作对象<ul><li>获取java.sql.Statement对象，该对象负责将SQL语句发送给数据库，数据库负责执行该SQL语句。</li></ul></li><li>第四步：执行SQL语句<ul><li>执行具体的SQL语句，例如：insert delete update select等。</li></ul></li><li>第五步：处理查询结果集<ul><li>如果之前的操作是DQL查询语句，才会有处理查询结果集这一步。</li><li>执行DQL语句通常会返回查询结果集对象：java.sql.ResultSet。</li><li>对于ResultSet查询结果集来说，通常的操作是针对查询结果集进行结果集的遍历。</li></ul></li><li>第六步：释放资源<ul><li>释放资源可以避免资源的浪费。在 JDBC 编程中，每次使用完 Connection、Statement、ResultSet 等资源后，都需要显式地调用对应的 close() 方法来释放资源，避免资源的浪费。</li><li>释放资源可以避免出现内存泄露问题。在 Java 中，当一个对象不再被引用时，会被 JVM 的垃圾回收机制进行回收。但是在 JDBC 编程中，如果不显式地释放资源，那么这些资源就不会被 JVM 的垃圾回收机制自动回收，从而导致内存泄露问题。</li></ul></li></ul><h1 id="数据的准备"><a href="#数据的准备" class="headerlink" title="数据的准备"></a>数据的准备</h1><p>使用PowerDesigner设计用户表t_user。<br>使用Navicat for MySQL创建数据库，创建表，插入数据。</p><h2 id="PowerDesigner与Navicat-for-MySQL的区别"><a href="#PowerDesigner与Navicat-for-MySQL的区别" class="headerlink" title="PowerDesigner与Navicat for MySQL的区别"></a>PowerDesigner与Navicat for MySQL的区别</h2><p>Navicat for MySQL 是一款常用的 MySQL 数据库管理工具，提供了丰富的数据库管理和开发工具，可以方便地进行数据库的连接、查询、管理、模型设计等操作，是 MySQL 开发和管理的效率工具。</p><p>而 PowerDesigner 工具则是一款专业的建模工具，它支持多种数据库和操作系统，可以完成数据库设计、数据建模、过程建模、企业业务建模等工作。PowerDesigner 可以帮助开发人员在数据库设计和开发过程中更好地理解和管理数据，便于协同开发和项目管理。各种数据库技术的建模形式都可以实现，有单个数据库建模到多个数据库建模和业务建模等高级功能，<strong>非常适用于大型项目中的数据库设计和建模</strong>。同时，PowerDesigner 还支持 UML，Java 等编程语言的建模，可以与开发语言无缝整合。</p><p>因此，Navicat for MySQL 和 PowerDesigner 的功能是不同的，可以根据实际需要来选用。如果只是针对 MySQL 的数据库连接、查询、管理等操作，可以使用 Navicat for MySQL 工具，而如果需要进行更复杂的数据库设计、建模和整合等工作，可以使用 PowerDesigner 工具来实现。<strong>如果使用 MySQL 数据库进行开发，使用 Navicat for MySQL 和 PowerDesigner 这两个工具相互配合，可以提高开发效率和数据管理质量</strong>。</p><p>‍</p><h2 id="PowerDesigner工具的安装"><a href="#PowerDesigner工具的安装" class="headerlink" title="PowerDesigner工具的安装"></a>PowerDesigner工具的安装</h2><p>来这里下载该工具：链接：<a href="https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009">https://pan.baidu.com/s/1lRWC069K8GE-8rxr259ArQ?pwd=2009</a> 提取码：2009<br>双击安装包：<br><img src="https://i0.hdslb.com/bfs/article/59ff4f18376fe8615946501cfe414bfa645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e875c51a8782c83233fdbff304406687645325325.png" alt="image.png"></p><p>欢迎页：<br><img src="https://i0.hdslb.com/bfs/article/d5dc9f04d74b6e08511b080db0e27e1e645325325.png" alt="image.png"></p><p>选择试用15天：<br><img src="https://i0.hdslb.com/bfs/article/de9cb7373aa22f1fe151bdac38fe13af645325325.png" alt="image.png"></p><p>选择香港，以及接受：<br><img src="https://i0.hdslb.com/bfs/article/9b29d2810b3c968acc560cf54451dd14645325325.png" alt="image.png"></p><p>设置安装位置：<br><img src="https://i0.hdslb.com/bfs/article/43e14baec6ea10904ee16d548b0c10b2645325325.png" alt="image.png"></p><p>选择你要安装的（默认就行）：<br><img src="https://i0.hdslb.com/bfs/article/9ca3e912b6f48e5f2abfdca671f84049645325325.png" alt="image.png"></p><p>选择要安装的用户配置文件（默认即可）：<br><img src="https://i0.hdslb.com/bfs/article/f57a2a82c77b76ba89d7b6472226e9dc645325325.png" alt="image.png"></p><p>添加图标：<br><img src="https://i0.hdslb.com/bfs/article/629909da6e54971e3904b1e9e1283637645325325.png" alt="image.png"></p><p>安装概览信息：<br><img src="https://i0.hdslb.com/bfs/article/a69575590d0fd3bc82cbfcc4dc6363d9645325325.png" alt="image.png"></p><p>安装中：<br><img src="https://i0.hdslb.com/bfs/article/d1aaca262974a2d120f5f65f812d8b80645325325.png" alt="image.png"></p><p>安装完成：<br><img src="https://i0.hdslb.com/bfs/article/d65524eadccc9051190d4ffac385f066645325325.png" alt="image.png"></p><p>如何破解？看到这个文件了吗？<br>​<img src="https://i0.hdslb.com/bfs/article/fd3324327224fb57703f1077882872e3645325325.png" alt="image.png"><br>把这个文件拷贝到这个安装目录当中：<br>​<img src="https://i0.hdslb.com/bfs/article/0361377076226fbd0e26dd1892f883c8645325325.png" alt="image.png"><br>会自动提醒你替换：<br>​<img src="https://i0.hdslb.com/bfs/article/6a20ab8f8d030586f497945c2c56eeb1645325325.png" alt="image.png"><br>替换即可完成破解！！！！  </p><h2 id="使用PowerDesigner进行物理数据建模"><a href="#使用PowerDesigner进行物理数据建模" class="headerlink" title="使用PowerDesigner进行物理数据建模"></a>使用PowerDesigner进行物理数据建模</h2><p>打开PowerDesigner：<br><img src="https://i0.hdslb.com/bfs/article/2d441c57bf9be95d09b9cd3055750ab2645325325.png" alt="image.png"></p><p>点击“Create Model…”来创建PDM（Physical Data Model，物理数据模型）：<br>​<img src="https://i0.hdslb.com/bfs/article/4a3ddd514516ccf2a0a946f8f38f8587645325325.png" alt="image.png">  </p><p><strong>什么是物理数据模型PDM？</strong><br>​<code>物理数据模型（Physical Data Model，PDM）是数据管理领域中表示数据库逻辑设计后，通过物理设计最终转化为实际数据结构的过程，即在逻辑模型的基础上，进行数据存储结构的设计。PDM 是一个详细的数据库设计计划，它描述了如何在关系数据库中存储数据。物理数据模型包含了所有数据表，列、键和索引以及物理存储的详细信息，包括数据类型、字段宽度、默认值、统计信息等。此外，PDM 还描述了如何将数据表存储在文件或表空间中，这些信息可以帮助开发人员建立实际的数据库系统。通常，PDM 包含了完整的 ER 模型，数据表和关系的详细信息，包括数据的主键、外键、唯一键、索引、约束条件等。物理数据模型可以使用各种建模工具来手工创建或自动生成。在数据库设计阶段，生成 PDM 是非常重要的一步，是将逻辑设计转换为实际实现的重要步骤之一。它可以帮助开发人员在实现时更加清晰地了解数据的存储结构，同时也方便后续的数据库管理和维护工作。</code>​</p><p>创建完成后是这样的：<br><img src="https://i0.hdslb.com/bfs/article/85a3d531d246adfb64dadef8981cd329645325325.png" alt="image.png"><br>注意：右侧的小格子是可以放大和缩小的。看着像是很大的一张网。在每个格子当中可以容纳多个表。并且在这张网上可以清晰的看到表与表的关系。（一对多，一对一，多对多等。）</p><p>记得保存，ctrl+s保存时会生成一个xxx.pdm文件，以后如果要修改设计，双击这个xxx.pdm文件即可打开，进行编辑：<br><img src="https://i0.hdslb.com/bfs/article/b2b280d6f2a9ab2ec094baf7fb914a70645325325.png" alt="image.png"><br>保存后的文件：<br><img src="https://i0.hdslb.com/bfs/article/938224ef8c83b53899954a82708895e9645325325.png" alt="image.png"></p><p>开始进行表的设计，这里不搞那么复杂，先创建一张表即可：t_user，用户表：<br><img src="https://i0.hdslb.com/bfs/article/933c6587708eba28bba8b536e189af48645325325.png" alt="image.png"></p><p>双击后，弹出设计窗口：<br><img src="https://i0.hdslb.com/bfs/article/221c72bf3e67a2fcdeb816a3f48ff3f2645325325.png" alt="image.png"></p><p>设计表名：<br><img src="https://i0.hdslb.com/bfs/article/e5953e51f1aeb7d1b5b8bb34c0af1cf5645325325.png" alt="image.png"><br>注意：</p><ol><li>Name：用来设置显示的表名</li><li>Code：用来设置数据库中真实创建的表名</li><li>Comment：对表的注释说明</li></ol><p>设计字段：<br><img src="https://i0.hdslb.com/bfs/article/e08994f78b8086e398bcf5fad74c8628645325325.png" alt="image.png"><br>把每个字段设计好，包括：字段名，数据类型，长度，约束等。</p><p>设计完成后：<br>​<img src="https://i0.hdslb.com/bfs/article/db69285c638a35fa1931db46dd72e466645325325.png" alt="image.png">  </p><h2 id="使用PowerDesigner导出建表语句"><a href="#使用PowerDesigner导出建表语句" class="headerlink" title="使用PowerDesigner导出建表语句"></a>使用PowerDesigner导出建表语句</h2><p><img src="https://i0.hdslb.com/bfs/article/b4ff34c9a6c8ffb6ae3d9ea885fee4a5645325325.png" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: t_user                                                */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user</span><br><span class="line">(</span><br><span class="line">   id                   <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户的唯一标识&#x27;</span>,</span><br><span class="line">   name                 <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">   password             <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">   realname             <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">   gender               <span class="type">char</span>(<span class="number">2</span>),</span><br><span class="line">   tel                  <span class="type">char</span>(<span class="number">11</span>),</span><br><span class="line">   <span class="keyword">primary</span> key (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user comment <span class="string">&#x27;用户表存储用户信息。&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>‍</p><h2 id="使用Navicat-for-MySQL初始化数据"><a href="#使用Navicat-for-MySQL初始化数据" class="headerlink" title="使用Navicat for MySQL初始化数据"></a>使用Navicat for MySQL初始化数据</h2><h3 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h3><p>使用Navicat for MySQL创建一个MySQL数据库，起名：jdbc<br>​<img src="https://i0.hdslb.com/bfs/article/a1d6b375b4acea6e2fda019c8dd40834645325325.png" alt="image.png"><br>​<img src="https://i0.hdslb.com/bfs/article/6069c19a4ca5cbe59ae10142b0cae75b645325325.png" alt="image.png">  </p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>执行jdbc.sql脚本：<br><img src="https://i0.hdslb.com/bfs/article/8a9d9a371a5d9623259ee3bed5deed01645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/ec639a9a020f301cf4eb2b2adb4e7ba7645325325.png" alt="image.png"></p><p>最终创建的表：<br>​<img src="https://i0.hdslb.com/bfs/article/4bf705fdc2ae5250c524d6bd6024b506645325325.png" alt="image.png">  </p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><img src="https://i0.hdslb.com/bfs/article/1c64059950a81011cec2874df051256e645325325.png" alt="image.png"><br>注意：这里我将主键设置为了自增：auto_increment。其实这个也可以在PowerDesigner中设计时指定自增：勾选上它即可。<br>​<img src="https://i0.hdslb.com/bfs/article/3c246b7cda3b9bdc88b288956963a019645325325.png" alt="image.png">  </p><h1 id="JDBC完成新增操作"><a href="#JDBC完成新增操作" class="headerlink" title="JDBC完成新增操作"></a>JDBC完成新增操作</h1><p>新增操作就是让数据库执行insert语句。通过这个操作来学习一下JDBC编程的每一步。刚开始编写JDBC代码的时候，建议使用文本编辑器，先不借助任何IDE。</p><h2 id="JDBC编程第一步：注册驱动"><a href="#JDBC编程第一步：注册驱动" class="headerlink" title="JDBC编程第一步：注册驱动"></a>JDBC编程第一步：注册驱动</h2><p>注册驱动有两个作用：</p><ol><li>将 JDBC 驱动程序从硬盘上的文件系统中加载到内存。</li><li>让 DriverManager 可以通过一个统一的接口来管理该驱动程序的所有连接操作。</li></ol><p>API帮助文档：<br><img src="https://i0.hdslb.com/bfs/article/9e850babe4634131321e42a8ac134f8a645325325.png" alt="image.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：注册驱动调用的是java.sql.DriverManager的registerDriver()方法。这些方法的使用要参阅JDK的API帮助文档。</strong><br><strong>思考1：为什么以上代码中new的时候，后面类名要带上包名呢？</strong><br><strong>思考2：以上代码中哪些是JDBC接口，哪些是JDBC接口的实现？</strong>   </p><h2 id="JDBC编程第二步：获取连接"><a href="#JDBC编程第二步：获取连接" class="headerlink" title="JDBC编程第二步：获取连接"></a>JDBC编程第二步：获取连接</h2><p>获取java.sql.Connection对象，该对象的创建标志着mysql进程和jvm进程之间的通道打开了。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>API帮助文档：<br><img src="https://i0.hdslb.com/bfs/article/cb7c6ba4342c5237ca36b0a972c0ffb0645325325.png" alt="image.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;连接对象：&quot;</span> + conn);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/88fbdac6b281167f09b50e1c698296ae645325325.png" alt="image.png"><br>看到以上的输出结果，表示数据库已经连接成功了。</p><p>通过以上程序的输出结果得知：com.mysql.cj.jdbc.ConnectionImpl是java.sql.Connection接口的实现类，大家可以想象一下，如果换成Oracle数据库的话，这个实现类的类名是不是就会换一个呢？答案是肯定的。不过对于我们来说是不需要关心具体实现类的，因为后续的代码都是直接面向java.sql.Connection接口来调用方法的。面向接口编程在这里体现的淋漓尽致。确实降低了耦合度。</p><p>以上程序中演示了连接数据库需要提供三个信息：url，用户名，密码。其中用户名和密码容易理解。url是什么？  </p><h3 id="什么是URL"><a href="#什么是URL" class="headerlink" title="什么是URL"></a>什么是URL</h3><p>URL 是统一资源定位符 (Uniform Resource Locator) 的缩写，是互联网上标识、定位、访问资源的字符串。它可以用来指定互联网上各种类型的资源的位置，如网页、图片、视频等。</p><p>URL 通常由协议、服务器名、服务器端口、路径和查询字符串组成。其中：</p><ul><li>协议是规定了访问资源所采用的通信协议，例如 HTTP、HTTPS、FTP 等；</li><li>服务器名是资源所在的服务器主机名或 IP 地址，可以是域名或 IP 地址；</li><li>服务器端口是资源所在的服务器的端口号；</li><li>路径是资源所在的服务器上的路径、文件名等信息；</li><li>查询字符串是向服务器提交的参数信息，用来定位更具体的资源。</li></ul><p>URL 在互联网中广泛应用，比如在浏览器中输入 URL 来访问网页或下载文件，在网站开发中使用 URL 来访问 API 接口或文件，在移动应用和桌面应用中使用 URL 来访问应用内部的页面或功能，在搜索引擎中使用 URL 来爬取网页内容等等。</p><p>总之，URL 是互联网上所有资源的唯一识别标识，是互联网通信的基础和核心技术之一。  </p><h3 id="JDBC连接MySQL时的URL格式"><a href="#JDBC连接MySQL时的URL格式" class="headerlink" title="JDBC连接MySQL时的URL格式"></a>JDBC连接MySQL时的URL格式</h3><p>JDBC URL 是在使用 JDBC 连接数据库时的一个 URL 字符串，它用来标识要连接的数据库的位置、认证信息和其他配置参数等。JDBC URL 的格式可以因数据库类型而异，但通常包括以下几个部分：</p><ul><li>协议：表示要使用的数据库管理系统（DBMS）的类型，如 <code>jdbc:mysql</code> 表示要使用 MySQL 数据库，<code>jdbc:postgresql</code> 表示要使用 PostgreSQL 数据库。</li><li>主机地址和端口号：表示要连接的数据库所在的服务器的 IP 地址或域名，以及数据库所在服务器监听的端口号。</li><li>数据库名称：表示要连接的数据库的名称。</li><li>其他可选参数：这些参数包括连接的超时时间、使用的字符集、连接池相关配置等。</li></ul><p>例如，连接 MySQL 数据库的 JDBC URL 的格式一般如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://&lt;host&gt;:&lt;port&gt;/&lt;database_name&gt;?&lt;connection_parameters&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>&lt;host&gt;</code> 是 MySQL 数据库服务器的主机名或 IP 地址；</li><li><code>&lt;port&gt;</code> 是 MySQL 服务器的端口号（默认为 3306）；</li><li><code>&lt;database_name&gt;</code> 是要连接的数据库名称；</li><li><code>&lt;connection_parameters&gt;</code> 包括连接的额外参数，例如用户名、密码、字符集等。</li></ul><p>JDBC URL 是连接数据库的关键，通过 JDBC URL，应用程序可以通过特定的 JDBC 驱动程序与数据库服务器进行通信，从而实现与数据库的交互。在开发 Web 应用和桌面应用时，使用 JDBC URL 可以轻松地连接和操作各种类型的数据库，例如 MySQL、PostgreSQL、Oracle 等。</p><p>以下是一个常见的JDBC MySQL URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/jdbc</span><br></pre></td></tr></table></figure><p><code>jdbc:mysql://</code>​是协议<br>​<code>localhost</code>​表示连接本地主机的MySQL数据库，也可以写作<code>127.0.0.1</code>​<br>​<code>3306</code>​是MySQL数据库的端口号<br>​<code>jdbc</code>​是数据库实例名  </p><h3 id="MySQL-URL中的其它常用配置"><a href="#MySQL-URL中的其它常用配置" class="headerlink" title="MySQL URL中的其它常用配置"></a>MySQL URL中的其它常用配置</h3><p>在 JDBC MySQL URL 中，常用的配置参数有：</p><ul><li><code>serverTimezone</code>：MySQL 服务器时区，默认为 UTC，可以通过该参数来指定客户端和服务器的时区；</li></ul><p>在 JDBC URL 中设置 <code>serverTimezone</code> 的作用是指定数据库服务器的时区。这个时区信息会影响 JDBC 驱动在处理日期时间相关数据类型时如何将其映射到服务器上的日期时间值。<br>如果不设置 <code>serverTimezone</code>，则 JDBC 驱动程序默认将使用本地时区，也就是客户端机器上的系统时区，来处理日期时间数据。在这种情况下，如果服务器的时区和客户端机器的时区不同，那么处理日期时间数据时可能会出现问题，从而导致数据错误或不一致。<br>例如，假设服务器位于美国加州，而客户端位于中国上海，如果不设置 <code>serverTimezone</code> 参数，在客户端执行类似下面的查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_date <span class="operator">=</span> <span class="string">&#x27;2022-11-11&#x27;</span>;</span><br></pre></td></tr></table></figure><p>由于客户端和服务器使用了不同的时区，默认使用的是客户端本地的时区，那么实际查询的时间就是客户端本地时间对应的时间，而不是服务器的时间。这可能会导致查询结果不正确，因为服务器上的时间可能是比客户端慢或者快了多个小时。<br>通过在 JDBC URL 中设置 <code>serverTimezone</code> 参数，可以明确告诉 JDBC 驱动程序使用哪个时区来处理日期时间值，从而避免这种问题。在上述例子中，如果把时区设置为 <code>America/Los_Angeles</code>（即加州的时区）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/mydatabase?user=myusername&amp;password=mypassword&amp;serverTimezone=America/Los_Angeles</span><br></pre></td></tr></table></figure><p>那么上面的查询就会在数据库服务器上以加州的时间来执行，结果更加准确。</p><ul><li><code>useSSL</code>：是否使用 SSL 进行连接，默认为 true；</li></ul><p><code>useSSL</code> 参数用于配置是否使用 SSL（Secure Sockets Layer）安全传输协议来加密 JDBC 和 MySQL 数据库服务器之间的通信。其设置为 <code>true</code> 表示使用 SSL 连接，设置为 <code>false</code> 表示不使用 SSL 连接。其区别如下：<br>当设置为 <code>true</code> 时，JDBC 驱动程序将使用 SSL 加密协议来保障客户端和服务器之间的通信安全。这种方式下，所有数据都会使用 SSL 加密后再传输，可以有效防止数据在传输过程中被窃听、篡改等安全问题出现。当然，也要求服务器端必须支持 SSL，否则会连接失败。<br>当设置为 <code>false</code> 时，JDBC 驱动程序会以明文方式传输数据，这种方式下，虽然数据传输的速度会更快，但也会存在被恶意攻击者截获和窃听数据的风险。因此，在不安全的网络环境下，或是要求数据传输安全性较高的情况下，建议使用 SSL 加密连接。<br>需要注意的是，使用 SSL 连接会对系统资源和性能消耗有一定的影响，特别是当连接数较多时，对 CPU 和内存压力都比较大。因此，在性能和安全之间需要权衡，根据实际应用场景合理设置 <code>useSSL</code> 参数。</p><ul><li>useUnicode：是否使用Unicode编码进行数据传输，默认是true启用</li></ul><p><code>useUnicode</code>是 JDBC 驱动程序连接数据库时的一个参数，用于告诉驱动程序在传输数据时是否使用 Unicode 编码。Unicode 是计算机科学中的一种字符编码方案，可以用于表示全球各种语言中的字符，包括 ASCII 码、中文、日文、韩文等。因此，使用 Unicode 编码可以确保数据在传输过程中能够正确、完整地呈现各种语言的字符。<br>具体地说，如果设置 <code>useUnicode=true</code>，JDBC 驱动程序会在传输数据时使用 Unicode 编码。这意味着，无论数据源中使用的是什么编码方案，都会先将数据转换为 Unicode 编码进行传输，确保数据能够跨平台、跨数据库正确传输。当从数据库中获取数据时，驱动程序会根据 <code>characterEncoding</code> 参数指定的字符集编码将数据转换为指定编码格式，以便应用程序正确处理数据。<br>需要注意的是，如果设置 <code>useUnicode=false</code>，则表示使用当前平台默认的字符集进行数据传输。这可能会导致在跨平台或跨数据库时出现字符编码不一致的问题，因此通常建议在进行数据传输时启用 Unicode 编码。<br>综上所述，设置 <code>useUnicode</code> 参数可以确保数据在传输过程中正确呈现各种字符集编码。对于应用程序处理多语言环境数据的场景，启用 <code>useUnicode</code> 参数尤为重要。</p><ul><li><code>characterEncoding</code>：连接使用的字符编码，默认为 UTF-8；</li></ul><p><code>characterEncoding</code> 参数用于设置 MySQL 服务器和 JDBC 驱动程序之间进行字符集转换时使用的字符集编码。其设置为 <code>UTF-8</code> 表示使用 UTF-8 编码进行字符集转换，设置为 <code>GBK</code> 表示使用 GBK 编码进行字符集转换。其区别如下：<br>UTF-8 编码是一种可变长度的编码方式，可以表示世界上的所有字符，包括 ASCII、Unicode 和不间断空格等字符，是一种通用的编码方式。UTF-8 编码在国际化应用中被广泛使用，并且其使用的字节数较少，有利于提高数据传输的效率和节约存储空间。<br>GBK 编码是一种固定长度的编码方式，只能表示汉字和部分符号，不能表示世界上的所有字符。GBK 编码通常只用于中文环境中，因为在英文和数字等字符中会出现乱码情况。<br>因此，在 MySQL 中使用 <code>UTF-8</code> 编码作为字符集编码的优势在于能够支持世界上的所有字符，而且在国际化应用中使用广泛，对于不同语言和地区的用户都能够提供良好的支持。而使用 <code>GBK</code> 编码则主要在于适用于中文环境中的数据存储和传输。<br>需要注意的是，在选择编码方式时需要考虑到应用本身的实际需要和数据的特性，根据具体情况进行选择，避免出现字符集编码错误的问题。同时，还要确保 MySQL 服务器、JDBC 驱动程序和应用程序之间的字符集编码一致，避免出现字符集转换错误的问题。</p><p><strong>注意：useUnicode和characterEncoding有什么区别？</strong></p><ul><li><strong>useUnicode设置的是数据在传输过程中是否使用Unicode编码方式。</strong></li><li><strong>characterEncoding设置的是数据被传输到服务器之后，服务器采用哪一种字符集进行编码。</strong></li></ul><p>例如，连接 MySQL 数据库的 JDBC URL 可以如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8</span><br></pre></td></tr></table></figure><p>这里演示的是使用本地 MySQL 数据库，使用Unicode编码进行数据传输，服务器时区为 Asia/Shanghai，启用 SSL 连接，服务器接收到数据后使用 UTF-8 编码。</p><p>‍</p><h2 id="JDBC编程第三步：获取数据库操作对象"><a href="#JDBC编程第三步：获取数据库操作对象" class="headerlink" title="JDBC编程第三步：获取数据库操作对象"></a>JDBC编程第三步：获取数据库操作对象</h2><p>数据库操作对象是这个接口：java.sql.Statement。这个对象负责将SQL语句发送给数据库服务器，服务器接收到SQL后进行编译，然后执行SQL。</p><p>API帮助文档如下：<br><img src="https://i0.hdslb.com/bfs/article/63350001fa5e303e7c57034956bda6dc645325325.png" alt="image.png"></p><p>获取数据库操作对象代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库操作对象stmt = &quot;</span> + stmt);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/250e71005b390c3988b62b59f72fd356645325325.png" alt="image.png"></p><p>同样可以看到：java.sql.Statement接口在MySQL驱动中的实现类是：com.mysql.cj.jdbc.StatementImpl。不过我们同样是不需要关心这个具体的实现类。因为后续的代码仍然是面向Statement接口写代码的。</p><p>另外，要知道的是通过一个Connection对象是可以创建多个Statement对象的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库操作对象stmt = &quot;</span> + stmt);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt2</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库操作对象stmt2 = &quot;</span> + stmt2);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/aea724f46349c7794128a6e0bbe141f5645325325.png" alt="image.png"></p><p>‍</p><h2 id="JDBC编程第四步：执行SQL"><a href="#JDBC编程第四步：执行SQL" class="headerlink" title="JDBC编程第四步：执行SQL"></a>JDBC编程第四步：执行SQL</h2><p>当获取到Statement对象后，调用这个接口中的相关方法即可执行SQL语句。</p><p>API帮助文档如下：<br><img src="https://i0.hdslb.com/bfs/article/bea1d141aef96981c908ab60d67d5e97645325325.png" alt="image.png"></p><p><strong>该方法的参数是一个SQL语句，只要将insert语句传递过来即可。当执行executeUpdate(sql)方法时，JDBC会将sql语句发送给数据库服务器，数据库服务器对SQL语句进行编译，然后执行SQL。</strong><br><strong>该方法的返回值是int类型，返回值的含义是：影响了数据库表当中几条记录。例如：返回1表示1条数据插入成功，返回2表示2条数据插入成功，以此类推。如果一条也没有插入，则返回0。</strong><br><strong>该方法适合执行的SQL语句是DML，包括：insert delete update。</strong></p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;tangsanzang&#x27;,&#x27;123&#x27;,&#x27;唐三藏&#x27;,&#x27;男&#x27;,&#x27;12566568956&#x27;)&quot;</span>; <span class="comment">// sql语句最后的分号&#x27;;&#x27;可以不写。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br>​<img src="https://i0.hdslb.com/bfs/article/456e11b4b54510e9f8a0905ce523251a645325325.png" alt="image.png"><br>数据库表变化了：<br>​<img src="https://i0.hdslb.com/bfs/article/67839fd3dea40580c7702e04e4d9ca4a645325325.png" alt="image.png">  </p><h2 id="JDBC编程第六步：释放资源"><a href="#JDBC编程第六步：释放资源" class="headerlink" title="JDBC编程第六步：释放资源"></a>JDBC编程第六步：释放资源</h2><p>第五步去哪里了？第五步是处理查询结果集，以上操作不是select语句，所以第五步直接跳过，直接先看一下第六步释放资源。【后面学习查询语句的时候，再详细看第五步】</p><h3 id="为什么要释放资源"><a href="#为什么要释放资源" class="headerlink" title="为什么要释放资源"></a>为什么要释放资源</h3><p>在 JDBC 编程中，建立数据库连接、创建 Statement 对象等操作都需要申请系统资源，例如打开网络端口、申请内存等。为了避免占用过多的系统资源和避免出现内存泄漏等问题，我们需要在使用完资源后及时释放它们。</p><h3 id="释放资源的原则"><a href="#释放资源的原则" class="headerlink" title="释放资源的原则"></a>释放资源的原则</h3><p>原则1：在finally语句块中释放</p><ul><li>建议在finally语句块中释放，因为程序执行过程中如果出现了异常，finally语句块中的代码是一定会执行的。也就是说：我们需要保证程序在执行过程中，不管是否出现了异常，最后的关闭是一定要执行的。当然了，也可以使用Java7的新特性：Try-with-resources。Try-with-resources 是 Java 7 引入的新特性。它简化了资源管理的代码实现，可以自动释放资源，减少了代码出错的可能性，同时也可以提供更好的代码可读性和可维护性。</li></ul><p>原则2：释放有顺序</p><ul><li>从小到大依次释放，创建的时候，先创建Connection，再创建Statement。那么关闭的时候，先关闭Statement，再关闭Connection。</li></ul><p>原则3：分别进行try…catch…</p><ul><li>关闭的时候调用close()方法，该方法有异常需要处理，建议分别对齐try…catch…进行异常捕获。如果只编写一个try…catch…进行一块捕获，在关闭过程中，如果某个关闭失败，会影响下一个资源的关闭。</li></ul><p>‍</p><h3 id="代码如何实现"><a href="#代码如何实现" class="headerlink" title="代码如何实现"></a>代码如何实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver(); <span class="comment">// 创建MySQL驱动对象</span></span><br><span class="line">            DriverManager.registerDriver(driver); <span class="comment">// 完成驱动注册</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;tangsanzang&#x27;,&#x27;123&#x27;,&#x27;唐三藏&#x27;,&#x27;男&#x27;,&#x27;12566568956&#x27;)&quot;</span>; <span class="comment">// sql语句最后的分号&#x27;;&#x27;可以不写。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="注册驱动的常用方式"><a href="#注册驱动的常用方式" class="headerlink" title="注册驱动的常用方式"></a>注册驱动的常用方式</h1><p>上面在注册驱动的时候，执行了这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.<span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">java.sql.DriverManager.registerDriver(driver);</span><br></pre></td></tr></table></figure><p>这种方式是自己new驱动对象，然后调用DriverManager的registerDriver()方法来完成驱动注册，还有另一种方式，并且这种方式是常用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure><p>为什么这种方式常用？</p><ul><li>第一：代码少了很多。</li><li>第二：这种方式可以很方便的将<code>com.mysql.cj.jdbc.Driver</code>类名配置到属性文件当中。</li></ul><p>实现原理是什么？找一下<code>com.mysql.cj.jdbc.Driver</code>的源码：<br><img src="https://i0.hdslb.com/bfs/article/57a77526f8f48d82d9c66c2c12e0a9a8645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/226addf6184c7b3112827e990ab2b7dd645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/86299a0b2aa74e0ec5479baa40879db0645325325.png" alt="image.png"></p><p>通过源码不难发现，在<code>com.mysql.cj.jdbc.Driver</code>类中有一个静态代码块，在这个静态代码块中调用了<code>java.sql.DriverManager.registerDriver(new Driver());</code>完成了驱动的注册。而<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>代码的作用就是让<code>com.mysql.cj.jdbc.Driver</code>类完成加载，执行它的静态代码块。</p><p>编写代码测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;tangsanzang&#x27;,&#x27;123&#x27;,&#x27;唐三藏&#x27;,&#x27;男&#x27;,&#x27;12566568956&#x27;)&quot;</span>; <span class="comment">// sql语句最后的分号&#x27;;&#x27;可以不写。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/013260e01c3dd3ee756b34890bd7c292645325325.png" alt="image.png"></p><p>数据库表中数据也新增了：<br><img src="https://i0.hdslb.com/bfs/article/350a20cdf5442756ee30c1316e6c79e3645325325.png" alt="image.png"></p><p>‍</p><h1 id="JDBC-4-0后不用手动注册驱动（了解）"><a href="#JDBC-4-0后不用手动注册驱动（了解）" class="headerlink" title="JDBC 4.0后不用手动注册驱动（了解）"></a>JDBC 4.0后不用手动注册驱动（了解）</h1><p>从JDBC 4.0（<strong>也就是Java6</strong>）版本开始，驱动的注册不需要再手动完成，由系统自动完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;tangsanzang&#x27;,&#x27;123&#x27;,&#x27;唐三藏&#x27;,&#x27;男&#x27;,&#x27;12566568956&#x27;)&quot;</span>; <span class="comment">// sql语句最后的分号&#x27;;&#x27;可以不写。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/037a8d954dd9597b78c7b21cb1f1f506645325325.png" alt="image.png"></p><p>数据库表中数据也添加了一条：<br><img src="https://i0.hdslb.com/bfs/article/5937ca6d6b5ea77781c2656820db6bb5645325325.png" alt="image.png"><br><strong>注意：虽然大部分情况下不需要进行手动注册驱动了，但在实际的开发中有些数据库驱动程序不支持自动发现功能，仍然需要手动注册。所以建议大家还是别省略了。</strong></p><p>‍</p><h1 id="动态配置连接数据库的信息"><a href="#动态配置连接数据库的信息" class="headerlink" title="动态配置连接数据库的信息"></a>动态配置连接数据库的信息</h1><p>为了程序的通用性，为了切换数据库的时候不需要修改Java程序，为了符合OCP开闭原则，建议将连接数据库的信息配置到属性文件中，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>然后使用IO流读取属性文件，动态获取连接数据库的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(name,password,realname,gender,tel) values(&#x27;tangsanzang&#x27;,&#x27;123&#x27;,&#x27;唐三藏&#x27;,&#x27;男&#x27;,&#x27;12566568956&#x27;)&quot;</span>; <span class="comment">// sql语句最后的分号&#x27;;&#x27;可以不写。</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;插入了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/5c5a71f04babfab8eff38cf666d60d6d645325325.png" alt="image.png"></p><p>数据库表中也会新增一条记录：<br><img src="https://i0.hdslb.com/bfs/article/89712eacdb3aa86272c573dd6966c33c645325325.png" alt="image.png"></p><p>以后要连接其他数据库，只要修改属性文件中的配置即可。</p><p>‍</p><h1 id="获取连接的其他方式（了解）"><a href="#获取连接的其他方式（了解）" class="headerlink" title="获取连接的其他方式（了解）"></a>获取连接的其他方式（了解）</h1><p>上面我们讲到了第一种获取连接的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure><p>除了以上的这种方式之外，还有两种方式，通过API帮助文档可以看到：<br><img src="https://i0.hdslb.com/bfs/article/7bbce6542f2760163f5080581711d87f645325325.png" alt="image.png"></p><p>‍</p><h2 id="getConnection-String-url"><a href="#getConnection-String-url" class="headerlink" title="getConnection(String url)"></a>getConnection(String url)</h2><p>这种方式参数只有一个url，那用户名和密码放在哪里呢？可以放到url当中，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?user=root&amp;password=123456&quot;</span>;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;连接对象：&quot;</span> + conn);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException|ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/5880f19cd1d1f896aa7eb037af0cf4a8645325325.png" alt="image.png"></p><p>‍</p><h2 id="getConnection-String-url-Properties-info"><a href="#getConnection-String-url-Properties-info" class="headerlink" title="getConnection(String url, Properties info)"></a>getConnection(String url, Properties info)</h2><p>这种方式有两个参数，一个是url，一个是Properties对象。</p><ul><li>url：可以单纯提供一个url地址</li><li>info：可以将url的参数存放到该对象中</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">            info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            info.setProperty(<span class="string">&quot;useUnicode&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            info.setProperty(<span class="string">&quot;serverTimezone&quot;</span>, <span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line">            info.setProperty(<span class="string">&quot;useSSL&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            info.setProperty(<span class="string">&quot;characterEncoding&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, info);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;连接对象：&quot;</span> + conn);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException|ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/a3be8c4512e4ae7f3e333d14e1deae49645325325.png" alt="image.png"></p><p>以上这两种方式作为了解，不是重点。</p><p>‍</p><h1 id="JDBC完成修改操作"><a href="#JDBC完成修改操作" class="headerlink" title="JDBC完成修改操作"></a>JDBC完成修改操作</h1><p>修改操作就是执行update语句。仍然调用Statement接口的executeUpdate(sql)方法即可。<br>业务要求：将name是tangsanzang的真实姓名修改为唐僧。<br>修改前的数据：<br><img src="https://i0.hdslb.com/bfs/article/32f83cb3d90269bc1b91280da1365289645325325.png" alt="image.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set realname=&#x27;唐僧&#x27; where name=&#x27;tangsanzang&#x27;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;更新了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/a49abc8c2c7e3f7e5ae7582be0630e50645325325.png" alt="image.png"></p><p>更新后的数据：<br><img src="https://i0.hdslb.com/bfs/article/6974bdd51e88fd575356f524e205876e645325325.png" alt="image.png"></p><p>‍</p><h1 id="JDBC完成删除操作"><a href="#JDBC完成删除操作" class="headerlink" title="JDBC完成删除操作"></a>JDBC完成删除操作</h1><p>删除操作就是执行delete语句。仍然调用Statement接口的executeUpdate(sql)方法即可。<br>业务要求：将id是15，16，17的数据删除。<br>删除前的数据：<br><img src="https://i0.hdslb.com/bfs/article/6974bdd51e88fd575356f524e205876e645325325.png" alt="image.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTest08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 通过以下代码获取属性文件中的配置信息</span></span><br><span class="line"><span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> bundle.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 执行SQL语句</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_user where id in(15, 16, 17)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;删除了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span>(SQLException | ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="https://i0.hdslb.com/bfs/article/f111b68a7d96ea5d252820f194a0c48d645325325.png" alt="image.png"></p><p>删除后的数据：<br><img src="https://i0.hdslb.com/bfs/article/482282970addcf62ca8949732a53c83d645325325.png" alt="image.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第01章 JDBC概述</title>
      <link href="/posts/13311.html"/>
      <url>/posts/13311.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h1><p>JDBC（Java DataBase Connectivity）就是Java数据库连接，说白了就是用Java语言来操作数据库。原来我们操作数据库是在控制台使用SQL语句来操作数据库，JDBC是用Java语言向数据库发送SQL语句。<br><img src="https://i0.hdslb.com/bfs/article/a0c9aaf54a19db3b9443c718b5a40b35645325325.png" alt="图片1.png"></p><p>‍</p><h1 id="JDBC原理"><a href="#JDBC原理" class="headerlink" title="JDBC原理"></a>JDBC原理</h1><p>早期SUN公司的天才们想编写一套可以连接天下所有数据库的API，但是当他们刚刚开始时就发现这是不可完成的任务，因为各个厂商的数据库服务器差异太大了。后来SUN开始与数据库厂商们讨论，最终得出的结论是，由SUN提供一套访问数据库的规范（就是一组接口），并提供连接数据库的协议标准，然后各个数据库厂商会遵循SUN的规范提供一套访问自己公司数据库服务器的API。SUN提供的规范命名为JDBC，而各个厂商提供的，遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动！<br><img src="https://i0.hdslb.com/bfs/article/b7d67a00f104cb642d7a7965231eaa5e645325325.png" alt="图片2.png"><br>JDBC是接口，而JDBC驱动才是接口的实现，没有驱动无法完成数据库连接！每个数据库厂商都有自己的驱动，用来连接自己公司的数据库。<br>当然还有第三方公司专门为某一数据库提供驱动，这样的驱动往往不是开源免费的！</p><p>‍</p><h1 id="模拟JDBC接口"><a href="#模拟JDBC接口" class="headerlink" title="模拟JDBC接口"></a>模拟JDBC接口</h1><h2 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h2><p>Java中接口的作用主要有以下几个方面：</p><ol><li>定义标准：接口可以用于定义标准，规范应该如何完成某个任务或应该具有哪些属性、方法等。</li><li>隐藏实现：接口隔离了类的实现和外界的逻辑使用，使得外部无论是访问接口的常量或是接口的方法都不需要关心接口的实现。</li><li>实现多态：一个类实现多个接口，在实现接口的过程中，类便会具有接口中的所有方法。这样我们就可以在实际应用中方便的实现多态的效果。</li><li>扩展性和灵活性：通过接口可以为项目提供更好的扩展性和灵活性，接口定义了一个共同的标准，使得新的类可以很容易地加入到已有的系统中，而且不需要修改现有的代码。</li></ol><p>总的来说，Java中的接口可以让我们通过规范来编写更加标准和灵活的代码，使得代码易于维护和扩展，并通过多态的特性来提高代码的重用性和可读性。<strong>Java接口在使用场景中，一定是存在两个角色的，一个是接口的调用者，一个是接口的实现者，接口的出现让调用者和实现者解耦合了。</strong></p><p>‍</p><h2 id="编写程序模拟JDBC接口"><a href="#编写程序模拟JDBC接口" class="headerlink" title="编写程序模拟JDBC接口"></a>编写程序模拟JDBC接口</h2><p><strong>接口的制定者</strong>：SUN公司负责制定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SUN公司负责制定JDBC接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JDBC</span> &#123;</span><br><span class="line">    <span class="comment">// 负责连接数据库的方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口的实现者</strong>：各大数据库厂商分别对JDBC接口进行实现，实现类被称为<strong>驱动</strong><br>MySQL数据库厂商对JDBC接口的实现：MySQL驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLDriver</span> <span class="keyword">implements</span> <span class="title class_">JDBC</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;与MySQL数据库连接建立成功，您正在操作MySQL数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Oracle数据库厂商对JDBC接口的实现：Oracle驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDriver</span> <span class="keyword">implements</span> <span class="title class_">JDBC</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;与Oracle数据库连接建立成功，您正在操作Oracle数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口的调用者</strong>：要操作数据库的Java程序员（我们）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">JDBC</span> <span class="variable">jdbc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySQLDriver</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只需要面向接口编程即可，不需要关心具体的实现，不需要关心具体是哪个厂商的数据库</span></span><br><span class="line">        jdbc.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是操作MySQL数据库，如果要操作Oracle数据库的话，需要new OracleDriver()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">JDBC</span> <span class="variable">jdbc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OracleDriver</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只需要面向接口编程即可，不需要关心具体的实现，不需要关心具体是哪个厂商的数据库</span></span><br><span class="line">        jdbc.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能你会说，最终还是修改了java代码，不符合OCP原则呀，如果你想达到OCP，那可以将创建对象的任务交给反射机制，将类名配置到文件中，例如：<br>配置文件如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">MySQLDriver</span></span><br></pre></td></tr></table></figure><p>Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClassName</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>).getString(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(driverClassName);</span><br><span class="line">        <span class="type">JDBC</span> <span class="variable">jdbc</span> <span class="operator">=</span> (JDBC)c.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只需要面向接口编程即可，不需要关心具体的实现，不需要关心具体是哪个厂商的数据库</span></span><br><span class="line">        jdbc.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终通过修改jdbc.properties配置文件即可做到数据库的切换。这样就完全做到了调用者和实现者的解耦合。调用者不需要关心实现者，实现者也不需要关心调用者。双方都是面向接口编程。这就是JDBC的本质：它就是一套接口。</p><p>‍</p><h1 id="配置CLASSPATH"><a href="#配置CLASSPATH" class="headerlink" title="配置CLASSPATH"></a>配置CLASSPATH</h1><p>经过上面内容的讲解，大家应该知道JDBC开发有三个角色的参与：</p><ul><li>我们（对数据库中数据进行增删改查的Java程序员）</li><li>JDBC接口的制定者</li><li>JDBC接口的实现者（驱动）</li></ul><p>以上三者凑齐了我们才能进行JDBC的开发。它们三个都在哪里呢？“我们”就不用多说了，写操作数据库的代码就行了。JDBC接口在哪（接口的class文件在哪）？JDBC接口实现类在哪（驱动在哪）？</p><p>‍</p><h2 id="JDBC接口在哪"><a href="#JDBC接口在哪" class="headerlink" title="JDBC接口在哪"></a>JDBC接口在哪</h2><p>JDBC接口在JDK中。对应的包是：<strong>java.sql.*;</strong><br>JDBC API帮助文档就在JDK的帮助文档当中。<br><img src="https://i0.hdslb.com/bfs/article/4732038afad163e891eb10138b1e5a77645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/850a044518789ca3d23c5e540022beb5645325325.png" alt="image.png"></p><p>‍</p><h2 id="驱动在哪"><a href="#驱动在哪" class="headerlink" title="驱动在哪"></a>驱动在哪</h2><p>驱动是JDBC接口的实现类，这些实现类是各大数据库厂家自己实现的，所以这些实现类的就需要去数据库厂商相关的网站上下载了。通常这些实现类被全部放到一个xxx.jar包中。下面演示一下mysql的驱动如何下载【下载mysql的驱动jar包】：<br>打开页面：<a href="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a><br><img src="https://i0.hdslb.com/bfs/article/d3a834bf0c89feb6b572552eac7e1ede645325325.png" alt="image.png"><br>下载后：<br><img src="https://i0.hdslb.com/bfs/article/559bc7dd2a9e6b5e076033c95c118762645325325.png" alt="image.png"><br>解压：<br><img src="https://i0.hdslb.com/bfs/article/0b41409fa9e561167b392c858c0511ff645325325.png" alt="image.png"><br>上图中的“mysql-connector-j-8.2.0.jar”就是mysql数据库的驱动，8.2.0这个版本适用于目前最新版本的mysql数据库。可以使用解压工具打开这个jar包，看看里面是什么？<br><img src="https://i0.hdslb.com/bfs/article/c3b5a4ef74d42da4f1b1f47b8a5becb4645325325.png" alt="image.png"><br>可以看到这个jar包中都是xxx.class文件，这就是JDBC接口的实现类。这个jar包就是连接mysql数据库的驱动。如果是oracle的驱动就需要去oracle的官网下载了。这里不再赘述。</p><p>‍</p><h2 id="如果使用文本编辑器开发"><a href="#如果使用文本编辑器开发" class="headerlink" title="如果使用文本编辑器开发"></a>如果使用文本编辑器开发</h2><p>如果使用文本编辑器开发，不使用集成开发环境的话，以上的jar包就需要手动配置到环境变量CLASSPATH当中，配置如下：<br>如果jar包放在这里：<br><img src="https://i0.hdslb.com/bfs/article/f3042185c1065ef44c61d16412116970645325325.png" alt="image.png"><br>就需要这样配置环境变量CLASSPATH：<br><img src="https://i0.hdslb.com/bfs/article/86eee9a9993fc824a2aeab76950db127645325325.png" alt="image.png"><br>注意配置路径中的当前路径“.”是不能省略的。</p><p>‍</p><h2 id="如果使用IDEA工具开发"><a href="#如果使用IDEA工具开发" class="headerlink" title="如果使用IDEA工具开发"></a>如果使用IDEA工具开发</h2><p>如果是采用集成开发工具，例如IDEA，就不需要手动配置CLASSPATH了，只需要将jar包放到IDEA中（实际上放到IDEA工具中的过程就是等同于在配置CLASSPATH）</p><p>第一步：创建lib目录，将jar包拷贝到lib目录<br><img src="https://i0.hdslb.com/bfs/article/d304421a8b300180d6990dae8374f098645325325.png" alt="图片3.png"></p><p>第二步：把lib包引入项目环境<br><img src="https://i0.hdslb.com/bfs/article/e3ffb17081fb17cf9f95f4102c0864ca645325325.png" alt="图片4.png"><br><img src="https://i0.hdslb.com/bfs/article/437fc137af9123b4292d7e50b5860d06645325325.png" alt="图片5.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第9章 shell编程</title>
      <link href="/posts/25470.html"/>
      <url>/posts/25470.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip info faa-horizontal animated"><p>月辉素洁，青衫儒士在陈平安身侧，一起跟随少年前行出拳，亦是悠然。陈平安走完一趟拳桩后，轻轻停下脚步，不再练拳。他没有转头望去，就那么看着远方，陈平安双袖再无春风萦绕。他知道。齐先生，真的走了</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="Linux系统结构"><a href="#Linux系统结构" class="headerlink" title="Linux系统结构"></a>Linux系统结构</h1><p>Linux操作系统是一种开放源代码的类UNIX操作系统，它的结构分为内核、Shell和应用程序三个层次。</p><ol><li>内核层</li></ol><p>内核是Linux系统的核心部分，它负责管理系统各种硬件设备、文件系统、内存管理和进程管理等核心任务。Linux内核设计了良好的模块化结构，可以动态地加载和卸载内核模块，这使得内核可以兼容各种不同的硬件设备和外围设备。</p><ol><li>Shell层</li></ol><p>Shell是Linux系统的命令行解释器，它负责将用户输入的命令解释并执行。Linux系统上有多种Shell，其中最常用的是Bash Shell。Bash Shell 提供了各种丰富的功能和处理能力，如通配符、重定向、管道、变量等等。</p><ol><li>应用层</li></ol><p>应用层是Linux系统上的各种应用程序和服务，包括文本编辑器、图形界面、Web服务器、邮件服务器、数据库服务器等。在Linux系统中，应用程序通常以开放源代码方式呈现，用户可以自由学习和使用，也可以根据需求自己编写、修改或扩展。<br>​<img src="https://i0.hdslb.com/bfs/article/3c959939646668e8bbc14c043b81f40f645325325.png" alt="image.png">​</p><h1 id="都有哪些shell"><a href="#都有哪些shell" class="headerlink" title="都有哪些shell"></a>都有哪些shell</h1><p>Shell被翻译为“壳”。在Linux内核外面包了一个壳。<br>Shell是一种用于与操作系统进行交互的命令行解释器。它是一种脚本语言，可以通过编写一系列的命令和脚本来执行操作系统的功能和任务。<br>我们在终端中编写的命令都是Shell命令。例如：ls、grep……等。</p><p>在Linux系统中，常见的Shell包括以下几种：</p><ol><li>Bourne Shell（/bin/sh）：是Unix系统最早的shell程序，由史蒂夫·伯恩斯（Steve Bourne）编写。该shell程序是许多Linux发行版中默认使用的程序。</li><li>Bourne-Again SHell（/bin/bash）：是GNU项目的一部分，是Bourne Shell的增强版，目前在大部分Linux发行版中是默认的shell程序。</li><li>C Shell （/bin/csh）：是Bill Joy编写的一个具有面向对象设计理念的shell程序，它采用与C语言相似的语法和控制结构。C Shell中的命令提示符为%号。</li><li>TENEX C Shell（/bin/tcsh）：是C Shell的增强版，它对历史命令和别名等方面进行了改进，同时也支持C Shell中的所有特性。TENEX C Shell中的命令提示符也为%号。</li><li>Korn Shell（/bin/ksh）：是由David Korn编写的shell程序，它是Bourne Shell和C Shell的结合，拥有两种不同的工作模式：交互模式和批处理模式。</li><li>Z Shell（/bin/zsh）：是一个功能强大的shell程序，它是Bourne Shell的增强版，具有缩写、自动完成、句法高亮等功能，同时也支持Korn Shell、C Shell以及Bourne Shell的语法和命令。</li></ol><p>每种Shell都有其特定的语法和功能，但它们通常都具有共同的基本功能，如变量操作、条件语句、循环语句和命令执行等。</p><p>Shell脚本在自动化任务、系统管理、批处理作业等方面非常有用。开发人员和系统管理员可以使用Shell脚本来编写一系列的命令和逻辑，以便自动化执行常见的任务和操作。</p><p>在CentOS中，可以使用<code>chsh</code>命令切换默认Shell。<code>chsh</code>命令允许您更改用户的登录Shell。以下是切换Shell的步骤：</p><ol><li>查看已安装的Shell。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ol><li>使用以下命令更改Shell。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/sh</span><br></pre></td></tr></table></figure><ol><li>重新登录后：检查Shell是否已更改：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><h1 id="shell的基础语法"><a href="#shell的基础语法" class="headerlink" title="shell的基础语法"></a>shell的基础语法</h1><p>shell脚本可以编写在一个xxx.sh结尾的文件中，xxx.sh文件我们称为shell脚本文件。<br>shell脚本文件是一个可执行文件，类似于windows环境中的xxx.exe 或 xxx.bat 等文件。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释是一行文本，它以井号（#）开头，从该字符开始一直延伸到该行的结束。在此行内，任何内容都会被 Shell 解释器忽略：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一行注释</span></span><br><span class="line">echo &quot;Hello, World!&quot;  # 这是一行带有注释的代码</span><br></pre></td></tr></table></figure><p>Shell 脚本也支持多行注释，这种注释也被称为块注释。块注释在脚本中可以用于分组一系列代码，或将一段代码置于未被执行的状态。在 Bash Shell 中，块注释通常使用以下语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">: &#x27;</span><br><span class="line">这里是注释内容。</span><br><span class="line">可以是多行，直到下面一行的单独引号为止。</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><p>下面是一个示例，说明这种块注释的使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">: &#x27;</span><br><span class="line">这是一个多行注释块。</span><br><span class="line">我们将在这里添加一些注释，并将一些代码放在这里，以防它们被执行。</span><br><span class="line"></span><br><span class="line">echo &quot;Hello, World!&quot;</span><br><span class="line">&#x27;</span><br><span class="line"></span><br><span class="line">echo &quot;这行是被执行的。&quot;</span><br></pre></td></tr></table></figure><p>在此示例中，我们使用了一个多行注释块，该块包含我们想要添加的注释和未被执行的代码。通过使用这种方式添加注释，我们可以让脚本更具可读性。</p><p>注意：第一行代码的作用是告知系统采用bash解释器执行以下代码。可以省略，如果省略会默认使用当前会话的shell解释器。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>当我们在Linux操作系统中使用命令行环境时，Shell变量是非常重要的一个部分。它们可以用来存储和操作数据，从而让我们更加方便地管理文件、程序和系统。<br>在Linux中，有三种类型的Shell变量，包括：</p><ol><li>环境变量</li><li>本地变量</li><li>特殊变量</li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量是Linux操作系统中最常用的变量类型之一。它们是在Shell会话外设置的，可以由多个脚本和进程共享。在Linux中，环境变量没有固定的值，而是在需要时通过脚本或命令进行设置或更新。（<strong>系统环境变量一般在/etc/profile文件中设置。</strong> ）<br>要查看当前所有环境变量，可以运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printenv</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure><p>要设置一个新的环境变量，请使用“export”命令，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export MY_VAR=&quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p>要使用环境变量，在变量名称前必须加上$符号，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $MY_VAR</span><br></pre></td></tr></table></figure><h3 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h3><p>在Shell脚本中，变量的命名遵循以下规则：</p><ol><li>变量名由字母、数字和下划线组成。</li><li>不能以数字开头。</li><li>区分大小写。</li><li>等号两侧不能有空格。</li><li>不能使用特殊字符作为变量名，如$, &amp;, !, (, ), *等。</li></ol><p>shell变量名命名规范：</p><ol><li>环境变量一般是全部大写，单词和单词之间采用下划线分割：JAVA_HOME, CATALINA_HOME</li><li>本地变量一般是小写。</li></ol><p>本地变量是一种临时变量，在Shell会话中设置和使用。与环境变量不同，本地变量仅限于当前Shell会话，不会被其他脚本或命令使用。设置本地变量可以使用“=”号操作符，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MY_VAR=&quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p>类似于环境变量，在使用本地变量时，变量名称前必须加上$符号。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $MY_VAR</span><br></pre></td></tr></table></figure><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><p>特殊变量是在Shell中预定义的变量名称，具有特殊的含义。这些变量与当前Shell会话有关，可以用于许多不同的用途，包括文件和目录操作、命令历史记录和处理脚本参数等等。<br>以下是常见的一些特殊变量：</p><ul><li><code>$0</code>: 当前脚本的文件名</li><li><code>$1, $2...</code>: 脚本参数列表中的第1个、第2个参数等等  (例如：./first.sh abc def，在执行这个脚本时，第一个参数abc，第二个参数def。)</li><li><code>$#</code>: 脚本参数的数量</li><li><code>$*</code>: 所有脚本参数的列表（将所有的参数作为一个字符串：”zhangsan lisi wangwu”）</li><li><code>$@</code>: 所有脚本参数的列表（将每一个参数作为一个独立的字符串：”zhangsan” “lisi” “wangwu”）</li><li>$$$$: 当前脚本的进程ID号</li><li><code>$?</code>: 上一个命令的退出状态，一个数值。</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;The name of this script is: $0&quot;</span><br><span class="line">echo &quot;The first parameter is: $1&quot;</span><br><span class="line">echo &quot;The total number of parameters is: $#&quot;</span><br><span class="line">echo &quot;All parameters are: $@&quot;</span><br><span class="line">echo &quot;The current process ID is: $$&quot;</span><br><span class="line">echo &quot;The last exit status was: $?&quot;</span><br></pre></td></tr></table></figure><p>此脚本将输出有关脚本本身和参数的信息。<br>总结：<br>在Linux中，Shell变量是非常重要和有用的一部分。使用环境变量、本地变量和特殊变量可以让我们更加精确地控制和管理我们的Linux系统。掌握这些变量类型及其用法，可以让我们更加高效地编写Shell脚本并提高我们的日常工作效率。</p><p> <strong>$? 这个特殊变量的用法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/passwd</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">  echo &quot;ls command succeeded&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;ls command failed&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这个变量可以用来获取上一条命令的执行结果是否正确，如果执行结果是0表示成功，其他值表示失败！！！</p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>Shell编程中，控制语句可用于控制程序的执行流程和执行次数，主要包括条件判断和循环。<br>条件判断主要通过if语句来实现，if语句用于检查指定条件是否成立，并根据条件的真或假来执行相应的语句块。<br>循环主要通过for循环、while循环和until循环来实现。循环语句用于反复执行某些语句块，直到满足指定条件为止。</p><h3 id="shell中的中括号"><a href="#shell中的中括号" class="headerlink" title="shell中的中括号"></a>shell中的中括号</h3><p>中括号有两种使用方法：</p><ol><li>用于比较操作符：用于比较两个值的大小或者判断两个值是否相等。例如：</li></ol><ul><li><code>-eq</code>: 判断两个值是否相等（equal to），例如<code>[ $a -eq $b ]</code></li><li><code>-ne</code>: 判断两个值是否不相等（not equal to），例如<code>[ $a -ne $b ]</code></li><li><code>-lt</code>: 判断左边的值是否小于右边的值（less than），例如<code>[ $a -lt $b ]</code></li><li><code>-gt</code>: 判断左边的值是否大于右边的值（greater than），例如<code>[ $a -gt $b ]</code></li><li><code>-le</code>: 判断左边的值是否小于等于右边的值（less than or equal to），例如<code>[ $a -le $b ]</code></li><li><code>-ge</code>: 判断左边的值是否大于等于右边的值（greater than or equal to），例如<code>[ $a -ge $b ]</code></li></ul><p>在Shell中，比较操作符可以用于中括号[]中，例如:<code>[ $a -eq $b ]</code>。在比较时，要注意两个值之间必须有空格分隔，否则会出现语法错误。</p><ol><li>用于测试表达式：用于测试某个表达式是否成立。例如：</li></ol><ul><li><code>-f</code>: 判断某个文件是否存在并且是一个常规文件（regular file），例如<code>[ -f file.txt ]</code></li><li><code>-d</code>: 判断某个文件是否存在并且是一个目录（directory），例如<code>[ -d dir ]</code></li><li><code>-z</code>: 判断某个字符串是否为空（zero length），例如<code>[ -z &quot;$str&quot; ]</code></li><li><code>-n</code>: 判断某个字符串是否非空（not zero length），例如<code>[ -n &quot;$str&quot; ]</code></li><li><code>-e</code>: 判断某个文件或目录是否存在（exist），例如<code>[ -e file.txt ]</code></li></ul><p>在Shell中，测试表达式也可以用于中括号[]中，例如:<code>[ -f file.txt ]</code>。在多数Linux发行版中，测试表达式可以用中括号[]或者test命令实现，例如:<code>test -f file.txt</code>等价于<code>[ -f file.txt ]</code>。<br>需要注意的是，中括号中的空格很重要，空格缺少会导致语法错误。另外，在使用中括号[]时，要注意变量用双引号括起来，避免空值引起的语法错误。</p><h3 id="if语句详解"><a href="#if语句详解" class="headerlink" title="if语句详解"></a>if语句详解</h3><p>if语句用于检查指定条件是否成立，并根据条件判断的结果执行不同的语句块。if语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if condition </span><br><span class="line">then</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">elif condition2 </span><br><span class="line">then</span><br><span class="line">  command3</span><br><span class="line">  command4</span><br><span class="line">  ...</span><br><span class="line">else</span><br><span class="line">  command5</span><br><span class="line">  command6</span><br><span class="line">  ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>其中，<code>condition</code>是要检查的条件，可以是命令、变量、表达式等任何Shell语法，<code>then</code>表示条件成立要执行的语句块，如果有多个条件，可以使用<code>elif</code>语句来添加多个条件，每个条件使用<code>then</code>分别表示要执行的语句块，如果所有条件都不成立，则执行<code>else</code>分支中的语句块。<br>if语句的执行过程是从上到下依次判断每个条件，如果条件成立，则执行对应的语句块，执行完后跳出if语句。<br>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ -f file.txt ] </span><br><span class="line">then</span><br><span class="line">  echo &quot;file.txt exists.&quot;</span><br><span class="line">elif [ -d dir ] </span><br><span class="line">then</span><br><span class="line">  echo &quot;dir exists.&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;file.txt and dir not found.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="for循环详解"><a href="#for循环详解" class="headerlink" title="for循环详解"></a>for循环详解</h3><p>for循环用于遍历指定列表或值的集合，并执行相应的语句块。for循环语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in list</span><br><span class="line">do</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>其中，<code>var</code>是一个临时的变量名，用于存储当前循环的值，<code>list</code>是一个值或者多个带有空格或换行符分隔的值组成的列表。在每一次循环迭代时，<code>var</code>会被<code>list</code>列表中的一个值所替换，直到<code>list</code>中的所有值都被处理完为止。</p><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for i in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">  echo &quot;The value of i is: $i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="while循环详解"><a href="#while循环详解" class="headerlink" title="while循环详解"></a>while循环详解</h3><p>while循环用于不断执行语句块，直到满足指定条件为止。while循环语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>其中，<code>condition</code>是要检查的条件，如果条件为真，则执行<code>do</code>语句块中的命令，执行完后再回到<code>while</code>语句中检查条件是否依然为真，如果条件仍为真，则继续执行命令块，否则跳出循环。</p><p>注意：在shell编程中 $((…)) 被称为算术扩展运算符，做数学运算的，并且将运算结果返回。$(…)运算符会将结果直接返回。例如：</p><ul><li>$((j+1))，如果j是5的话，结果就会返回6 （注意，使用这个运算符的时候，括号里面不能有空格）</li><li>$(echo “hello world”)，会将”hello world”打印，然后再将”hello world”字符串返回。</li></ul><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">j=0</span><br><span class="line">while [ $j -lt 5 ]</span><br><span class="line">do</span><br><span class="line">  echo &quot;The value of j is: $j&quot;</span><br><span class="line">  j=$((j+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="until循环详解"><a href="#until循环详解" class="headerlink" title="until循环详解"></a>until循环详解</h3><p>until循环用于不断执行语句块，直到满足指定条件为止。和while循环不同的是，直到指定条件为假时才会停止循环。until循环语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>其中，<code>condition</code>是要检查的条件，如果条件为假，则执行<code>do</code>语句块中的命令，执行完后再回到<code>until</code>语句中检查条件是否依然为假，如果条件仍为假，则继续执行命令块，否则跳出循环。</p><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">k=0</span><br><span class="line">until [ $k -ge 5 ]</span><br><span class="line">do</span><br><span class="line">  echo &quot;The value of k is: $k&quot;</span><br><span class="line">  k=$((k+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h3><p>break和continue是控制循环的两个重要关键字。</p><ul><li>break语句用于跳出当前循环块，例如在for循环和while循环中使用该语句时，可以跳出当前循环并停止迭代。break语句可以嵌套在多重循环中，用于跳出内层循环和外层循环，其语法格式如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  if condition2 </span><br><span class="line">then</span><br><span class="line">    break</span><br><span class="line">  fi</span><br><span class="line">  command3</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在上述示例中，如果在执行<code>command2</code>时，条件<code>condition2</code>成立，那么会执行<code>break</code>语句，跳出循环块并停止迭代。</p><ul><li>continue语句用于跳过本次循环迭代，直接进入下一次的迭代。在for循环和while循环中使用该语句时，可以用于跳过本次迭代，执行下一次迭代。其语法格式如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  if condition2</span><br><span class="line">  then</span><br><span class="line">    continue</span><br><span class="line">  fi</span><br><span class="line">  command3</span><br><span class="line">  ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>在上述示例中，如果在执行<code>command2</code>时，条件<code>condition2</code>成立，那么会执行<code>continue</code>语句，跳过本次迭代，直接进入下一次迭代。</p><p>案例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for l in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">  if [ $l -eq 3 ] </span><br><span class="line">then</span><br><span class="line">    continue</span><br><span class="line">  fi</span><br><span class="line">  echo &quot;The value of l is: $l&quot;</span><br><span class="line">  if [ $l -eq 4 ] </span><br><span class="line">then</span><br><span class="line">    break</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="什么是函数？"><a href="#什么是函数？" class="headerlink" title="什么是函数？"></a>什么是函数？</h3><p>在Shell编程中，函数是一种可重用的代码块，可以提高程序的可读性和可维护性。通过定义一个函数，可以把一段代码封装起来，赋予其一个名称，可以在程序的其他部分反复调用。<br>Shell脚本中的函数非常灵活，可以使用各种Shell语句和命令来编写，如if语句、for循环、while循环等。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>下面是一个示例函数的定义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function say_hello() &#123;</span><br><span class="line">  echo &quot;Hello, world!&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，我们定义了一个函数名为<code>say_hello</code>，它的执行结果是输出<code>Hello, world!</code>字符串。函数定义的语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function_name() &#123;</span><br><span class="line">    commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用function关键字来定义函数是可选的。当使用function关键字时，要注意不要加空格，否则会出现语法错误。函数体中可以包含任意数量的命令和语句。</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>成功定义一个函数后，可以在程序的任何地方调用它。只需要使用函数的名称，再加上一对小括号，即可调用函数。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say_hello</span><br></pre></td></tr></table></figure><p>上述示例将会调用函数<code>say_hello</code>，执行函数体中的命令，输出<code>Hello, world!</code>字符串。</p><p>‍</p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>Shell函数也支持传递参数。在调用函数时，可以把参数传递给函数，让函数使用这些参数来完成特定的任务。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">  echo &quot;Hello, $1 $2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet &quot;John&quot; &quot;Doe&quot;</span><br></pre></td></tr></table></figure><p>上述示例中，我们定义了一个名为<code>greet</code>的函数，它输入参数$1和$2，并把这些参数用于输出字符串<code>Hello, $1 $2</code>。我们调用<code>greet</code>函数，并把参数”John”和”Doe”传递给它，最终输出<code>Hello, John Doe</code>字符串。</p><p>在函数中，参数可以使用$1、$2、$3等占位符来引用。$1表示第一个参数，$2表示第二个参数，以此类推。</p><p>‍</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>下面是一个示例代码，演示了如何定义和调用Shell中的函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义函数say_hello</span></span><br><span class="line">say_hello() &#123;</span><br><span class="line">  echo &quot;Hello, world!&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数say_hello</span></span><br><span class="line">say_hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义函数greet</span></span><br><span class="line">greet() &#123;</span><br><span class="line">  echo &quot;Hello, $1 $2&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用函数greet</span></span><br><span class="line">greet &quot;John&quot; &quot;Doe&quot;</span><br></pre></td></tr></table></figure><p>运行上述代码后，会输出如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, world!</span><br><span class="line">Hello, John Doe</span><br></pre></td></tr></table></figure><p>‍</p><h1 id="实现数据库自动备份"><a href="#实现数据库自动备份" class="headerlink" title="实现数据库自动备份"></a>实现数据库自动备份</h1><p>下面是一个用Shell编写的自动备份数据库的脚本，可以根据实际情况进行修改和调整：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置备份目录</span></span><br><span class="line">backupDir=&quot;/home/backup&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置需要备份的数据库名称和用户名、密码</span></span><br><span class="line">dbUser=&quot;root&quot;</span><br><span class="line">dbPass=&quot;123456&quot;</span><br><span class="line">dbName=&quot;database_name&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置备份文件名，包括日期和时间</span></span><br><span class="line">backupFile=&quot;$backupDir/$&#123;dbName&#125;_$(date +%Y%m%d_%H%M%S).sql&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行备份命令</span></span><br><span class="line">mysqldump -u$dbUser -p$dbPass $dbName &gt; $backupFile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩备份文件</span></span><br><span class="line">gzip -f $backupFile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除7天前的备份文件</span></span><br><span class="line">find $backupDir -mtime +7 -type f -name &quot;$&#123;dbName&#125;*.sql.gz&quot; -delete</span><br></pre></td></tr></table></figure><p>脚本的实现流程如下：</p><ol><li>首先设置备份目录和要备份的数据库的用户名、密码和名称。</li><li>然后，设置备份文件名，这里使用了当前日期和时间来命名备份文件。</li><li>接下来，使用mysqldump命令备份数据库并将结果重定向到备份文件中。</li><li>备份完成后，使用gzip命令将备份文件压缩。</li><li>最后，使用find命令删除7天前的备份文件，以避免占用过多磁盘空间。</li></ol><p>将这个脚本保存到一个文件中，如backup_db.sh，并添加可执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x backup_db.sh</span><br></pre></td></tr></table></figure><p>通过编辑crontab文件，可以将这个脚本设置为定期自动运行，比如每天执行一次备份。打开终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在文件末尾添加下面的一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * /path/to/backup_db.sh</span><br><span class="line"></span><br><span class="line">#  20 12 * * * /path/to/backup_db.sh 表示每天12:20会执行一次脚本。</span><br></pre></td></tr></table></figure><p>保存并退出crontab文件，这样在每天午夜0点进行自动备份。如果需要调整自动备份的时间，也可以修改crontab文件中的时间字段。</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第8章 将web应用部署到阿里云</title>
      <link href="/posts/12250.html"/>
      <url>/posts/12250.html</url>
      
        <content type="html"><![CDATA[<h1 id="购买阿里云服务器"><a href="#购买阿里云服务器" class="headerlink" title="购买阿里云服务器"></a>购买阿里云服务器</h1><h2 id="注册阿里云账号"><a href="#注册阿里云账号" class="headerlink" title="注册阿里云账号"></a>注册阿里云账号</h2><p><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343104889-d5a79aa1-5531-4dfe-931a-570d733b5c8f-20240817114001-ley59qi.png" alt="image.png"><br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343146432-07d1d822-cd26-4cf3-8ee9-484874ba6719-20240817114001-26h7080.png" alt="image.png"><br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343197479-24cb1df5-a491-4a71-9714-44a962d9be8c-20240817114002-n2hzrua.png" alt="image.png"></p><p><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343625845-10aa1357-7fda-47c5-9652-e5220a0ac73e-20240817114002-c2xpyd1.png" alt="无标题.png"><br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343675300-2cfe0d16-a96c-4b60-8d57-fecb721ace09-20240817114002-vu3nv5w.png" alt="无标题.png"></p><p><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343325117-185ea4fc-b679-4aae-8647-d4c367302092-20240817114002-4y76j33.png" alt="image.png"><br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343356484-04f7b7bb-e782-45cf-8ffe-7697e7a5ebcc-20240817114002-o9249v7.png" alt="image.png"><br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343392778-7d97b811-4745-48f9-ae4d-ca1366cbb79d-20240817114002-13lvsc2.png" alt="image.png">​</p><p><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343411255-1f702ec7-ebc5-46a2-b0c2-50d7989722ee-20240817114002-znkm1mu.png" alt="image.png"><br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690343713493-c69a8008-66d8-4616-bb1d-81e3870bd057-20240817114002-2jt9yau.png" alt="无标题.png"><br>到此，阿里云账号注册成功，并且进行了个人的实名认证。可以开始使用阿里云了。</p><h2 id="购买阿里云服务器-1"><a href="#购买阿里云服务器-1" class="headerlink" title="购买阿里云服务器"></a>购买阿里云服务器</h2><p>阿里云首页<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690348330933-ca4785ce-cbcb-44db-a188-01f873af5ecb-20240817114002-1j0of0y.png" alt="image.png"><br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690348444343-4f42456f-efd1-4d54-892e-e659869660aa-20240817114002-g4d15h0.png" alt="image.png">​</p><p>这里可以选择免费试用，也可以立即购买，根据自己情况而定，我这里采用免费试用：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690350761704-8bd038aa-c4dc-4757-88de-45078a0e8f7e-20240817114002-c7hi322.png" alt="image.png"><br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690350817138-da4afa6d-0682-48a1-8f9b-795b90d7f5c4-20240817114002-gvaikkt.png" alt="image.png"><br>创建的实例是这样的：你需要记住这个公网IP。<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690440018470-f457bd16-6d75-4809-81d1-6fe40b14197c-20240817114003-q3pan8n.png" alt="image.png"><br>管理员：root，新建的实例需要设置密码：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690440075999-32ec9939-c3ad-4723-84a2-023391ccac84-20240817114003-glxpvhw.png" alt="image.png">​</p><h2 id="使用xshell-xftp连接阿里云服务器"><a href="#使用xshell-xftp连接阿里云服务器" class="headerlink" title="使用xshell/xftp连接阿里云服务器"></a>使用xshell/xftp连接阿里云服务器</h2><p>默认情况下阿里云服务器的“密码认证”是没有开启的。需要通过修改相关配置，来开启“密码认证”。<br>在阿里云服务器实例中找到如下图的VNC连接：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690447058866-5c65c41d-b349-4357-af13-90e89ccbe1e0-20240817114003-nc1bap3.png" alt="image.png"><br>然后输入用户名root和密码。登录成功之后找到该文件：/etc/ssh/sshd_config<br>使用vim编辑sshd_config文件中的“passwordAuthcation”，将no修改为yes。<br>重启sshd服务：service sshd restart<br>此时采用xshell/xftp就可以使用密码的方式连接阿里云服务器了。</p><h1 id="使用宝塔面板安装软件及部署项目"><a href="#使用宝塔面板安装软件及部署项目" class="headerlink" title="使用宝塔面板安装软件及部署项目"></a>使用宝塔面板安装软件及部署项目</h1><p>在centos操作系统上安装宝塔面板（这个安装脚本可以在宝塔面板官网获取）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure><p>宝塔面板安装成功后，会有如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外网面板地址: https://39.105.26.215:10710/718e1e35</span><br><span class="line">内网面板地址: https://172.25.179.225:10710/718e1e35</span><br><span class="line">username: uck3itew</span><br><span class="line">password: 3268d738</span><br></pre></td></tr></table></figure><p>通过以上宝塔面板地址得知使用的端口是10710，所以需要在阿里云服务器上开放该端口（配置安全组）：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690447528154-624e070d-f9df-4f37-9df1-38b7cdaa2a7d-20240817114003-qlvqnjy.png" alt="image.png"><br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690447563332-1e2f5a47-74ec-48b4-8614-c94f842b852a-20240817114003-s4nl4bd.png" alt="image.png">​</p><p>访问宝塔面板：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690451476044-defdafe4-6d95-4f77-8b06-947843b73c5c-20240817114003-fte9cut.png" alt="image.png"><br>输入用户名和密码登录宝塔面板：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690451497475-950766c3-36b9-4504-b2a4-8da094d2150b-20240817114003-cv6bvpx.png" alt="image.png">​</p><p>注册宝塔账号并绑定：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690451542486-fa1ac9d0-cedc-455a-9b88-4c26e7fece9e-20240817114003-lul1ibt.png" alt="image.png"><br>宝塔Linux面板的左侧菜单中找：软件商店<br>搜索tomcat，安装tomcat9，会自动关联安装JDK8。<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690523617851-3b8906ad-6031-434b-bdee-665d53a8bf58-20240817114003-4eigltr.png" alt="image.png"><br>JDK8也有了：<br>​<img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690523670400-7b23a16f-6588-46b3-bc2d-5f0e32be4877-20240817114003-9pxv0cy.png" alt="image.png">​</p><p>搜索mysql，安装mysql。<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690523637808-4afe8111-f9f4-4cfc-9e0b-066ef72f0958-20240817114004-l1uw6cu.png" alt="image.png"></p><p><strong>注意：阿里云服务器有两个防火墙，一个是阿里云服务器自带的防火墙，在安全组中进行放行设置。阿里云服务器中安装的centos操作系统也会有一个防火墙，要访问tomcat服务器的话，centos操作系统中的防火墙也要放行8080端口：这个需要在宝塔中进行配置，如下：</strong><br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690530429125-a95b0733-5b1e-452e-8212-ae9298c3bc59-20240817114004-za6m6sm.png" alt="image.png"><br>这样tomcat服务器就可以访问了：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690530464412-e3190370-3280-4ce2-a5b6-0d34acbda71d-20240817114004-0kp39c4.png" alt="image.png"></p><p>‍</p><p>mysql数据库的3306端口同样需要在宝塔中放行。这样mysql数据库才可以连接：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690532202584-6d04c3be-1bc3-4da7-bcfe-406b48777c66-20240817114004-4u8zljx.png" alt="image.png"><br>使用navicat for mysql连接mysql数据库，报错信息如下：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690532666748-f6316f71-8754-4ac4-a75d-2bb197984760-20240817114004-r1kke1a.png" alt="image.png"></p><p>解决办法：<br>第一步：root身份登录mysql<br>第二步：use mysql;<br>第三步：update user set host=’%’ where user=’root’;<br>第四部：flush privileges;</p><p>然后使用navicat for mysql就可以连接mysql数据库了：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690535601577-7c6bd592-8002-432b-9730-6a79cc77ef34-20240817114004-psjslb3.png" alt="image.png"></p><p>初始化数据库：将提前准备好的oa.sql文件初始化到数据库当中。表emp表。确保表中有数据。<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690540767390-21091cce-de43-4d05-8101-5693b51c5067-20240817114004-9m0s8pm.png" alt="image.png"></p><p>‍</p><p>将war包放到tomcat服务器的webapps目录下，启动tomcat服务器之后war包自动解压。<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690540783249-d2c54a01-a5db-494e-9716-b154d27d5bd4-20240817114004-uk2079h.png" alt="image.png"></p><p>启动tomcat服务器，在浏览器上访问：<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/network-asset-1690540746702-82a3d5e9-937e-444d-9127-fd448c9ef7ff-20240817114004-aa6wi6o.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第7章 软件的安装与卸载</title>
      <link href="/posts/58716.html"/>
      <url>/posts/58716.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip info faa-horizontal animated"><p>礼数在简在醇正，不在繁多不在表</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="软件安装方式概述"><a href="#软件安装方式概述" class="headerlink" title="软件安装方式概述"></a>软件安装方式概述</h1><p>CentOS安装软件的方式主要包括：</p><ul><li>源码安装</li><li>rpm安装（二进制安装）</li><li>yum安装（在线安装）</li></ul><h2 id="源码安装："><a href="#源码安装：" class="headerlink" title="源码安装："></a>源码安装：</h2><p>源码包是指C等语言所开发的源代码文件的一个压缩包，通常压缩为.tar.gz或.tar.bz2。源码通常需要编译器将其编译成二进制文件，如gcc编译器。<br>优点：<br>（1）开源，有能力者可以修改源代码；特别是要对某个软件，从头开发时，就特别需要对源码进行解读分析。<br>（2）可自由选择所需功能；<br>（3）卸载方便，直接删除目录即可。<br>（4）对于学习者而言，源码安装更有利于学习者发现软件环境和工具之间所依赖的关系。<br>缺点：<br>（1）安装麻烦，需要自行解决工具之间的依赖关系。<br>（2）某些软件编译过程耗费的时间较长，我曾发生过编译两三天的情况。尤其是在不合适的硬件上，安装大型软件时，最容易折磨人，甚至要考虑系统与硬件的兼容性、配置等问题，系统本身有缺陷，那就更要命了，有时需先修补系统bug【主要是功能不齐全，残缺情况居多】<br>（3）大型软件编译，对新手来说较为麻烦，所报错误往往超过所能解决的范围，排错过程有可能会把系统给搞崩溃。</p><h2 id="rpm安装："><a href="#rpm安装：" class="headerlink" title="rpm安装："></a>rpm安装：</h2><p>RPM包：由Red Hat公司开发的包管理系统，软件的安装、升级、卸载都非常简单和方便。目前很多Linux发行版都在使用这种包管理机制，包括CentOS、Redhat、Fedora等。软件包文件后缀是”.rpm”。</p><p>DPKG包：由Debian Linux开发出来的包管理机制，主要应用在Debian和Unbuntu系统中。软件包文件后缀是”.deb”。<br>优点：<br>（1）包安装与管理简单，往往仅通过几个命令即可实现包的安装、升级、查询和卸载。<br>（2）通常安装速度要比源码安装快很多；<br>缺点：<br>（1）二进制文件，看不到源码了，修改和分析源码已不太可能。<br>（2）模块功能已经被定制，用户功能选择远不如源码灵活；<br>（3）有时也需要解决依赖性的问题，此时解决依赖性有一定的困难。</p><h2 id="yum安装："><a href="#yum安装：" class="headerlink" title="yum安装："></a>yum安装：</h2><p>yum软件仓库是为了进一步简化RPM管理软件的难度以及自动分析所需软件包及其依赖关系的技术。<br>yum的关键之处是要有可靠的respository（保证能够连接互联网，还需要保证它是一个互联网上正常可用的仓库）。<br>它能够从指定服务器自动下载rpm包并安装。yum能够自动解决软件依赖性问题，一次性安装所有依赖的软件包。</p><h1 id="yum安装与卸载的相关命令"><a href="#yum安装与卸载的相关命令" class="headerlink" title="yum安装与卸载的相关命令"></a>yum安装与卸载的相关命令</h1><p>安装命令：yum -y  install  软件名<br>升级命令：yum -y  install  软件名<br>升级所有软件：yum -y  install<br>卸载命令：yum  remove  软件名<br>列出可安装的软件包：yum list<br>列出已安装的软件包：yum list installed<br>查询某个软件包：yum  list  软件名<br>根据关键字搜索软件包：yum search  Keyword<br>清除缓存：yum clean all</p><h1 id="JDK的安装与配置"><a href="#JDK的安装与配置" class="headerlink" title="JDK的安装与配置"></a>JDK的安装与配置</h1><ol><li>从yum仓库中搜索jdk：yum search jdk</li><li>安装jdk：yum -y install java-17-openjdk-devel.x86_64</li><li>看看jdk的安装目录：<ol><li>which java</li><li>ls -l /usr/bin/java</li><li>ls -l /etc/alternatives/java</li></ol></li><li>在/etc/profile文件中配置环境变量：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-17.0.6.0.10-3.el9.x86_64</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><ol><li>生效：source /etc/profile</li></ol><h1 id="Tomcat服务器的安装与配置"><a href="#Tomcat服务器的安装与配置" class="headerlink" title="Tomcat服务器的安装与配置"></a>Tomcat服务器的安装与配置</h1><ol><li>Tomcat是Java语言实现的，因此使用Tomcat服务器的前提是：已经安装并配置了Java环境。</li><li>下载Tomcat<ol><li>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li><li>下载tomcat10</li></ol></li></ol><p><img src="https://i0.hdslb.com/bfs/article/cf227920b07af432de6ce6b802a4fd7c645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/835019c44a573cbe1365c56a6530bd30645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/e8a13f7cd01ba5b5cbd93bb5c322f5bb645325325.png" alt="image.png"></p><ol><li>使用FTP工具将以上压缩包上传到CentOS。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/965c05ff50cef1ae7cfebb5934da0591645325325.png" alt="image.png">​</p><ol><li>解压到当前目录下</li></ol><p><img src="https://i0.hdslb.com/bfs/article/911b0f474bef2c516542dde512ea4f11645325325.png" alt="image.png"></p><ol><li>第三方软件一般存放在/usr/local目录下，使用mv命令tomcat移动到该目录下</li></ol><p><img src="https://i0.hdslb.com/bfs/article/1d94d3451686da8244cf7656574678ef645325325.png" alt="image.png"></p><ol><li>为了方便配置环境变量，将目录名重命名</li></ol><p><img src="https://i0.hdslb.com/bfs/article/3d1ed93d6fd8846069aa0caa0a0f7b1b645325325.png" alt="image.png"><br>现在Tomcat服务器的根路径是：/usr/local/tomcat10</p><ol><li>配置环境变量</li></ol><p><img src="https://i0.hdslb.com/bfs/article/c9d7c952fef8d498ae91e7b4ae964b79645325325.png" alt="image.png"><br>让环境变量生效：<br><img src="https://i0.hdslb.com/bfs/article/502b20f5b525e32af865d9be374a24f6645325325.png" alt="image.png"></p><ol><li>启动Tomcat</li></ol><p><img src="https://i0.hdslb.com/bfs/article/8f420eff7e9e7b9c185f4e9f18ddd239645325325.png" alt="image.png"></p><ol><li>查看服务器IP地址</li></ol><p><img src="https://i0.hdslb.com/bfs/article/7122ea2e9b990476170225fc4f66d900645325325.png" alt="image.png">​</p><ol><li>关闭防火墙</li></ol><p><img src="https://i0.hdslb.com/bfs/article/e0d5ad84e30231a034b0ec331ea87c0c645325325.png" alt="image.png"></p><ol><li>打开windows上的浏览器，输入地址访问</li></ol><p><img src="https://i0.hdslb.com/bfs/article/5edd097889f042c462702444b6a79d38645325325.png" alt="image.png"></p><ol><li>关闭tomcat服务器</li></ol><p><img src="https://i0.hdslb.com/bfs/article/47e09d4846ac1048babc51c5e20a25cf645325325.png" alt="image.png"><br>服务器关闭之后，重新打开一个全新的浏览器，再次输入访问地址，会发现无法访问了。</p><h1 id="MySQL的安装与配置"><a href="#MySQL的安装与配置" class="headerlink" title="MySQL的安装与配置"></a>MySQL的安装与配置</h1><h2 id="MySQL8的安装"><a href="#MySQL8的安装" class="headerlink" title="MySQL8的安装"></a>MySQL8的安装</h2><p>以下是在CentOS Stream系统上安装MySQL8的步骤：</p><ol><li>更新系统软件包</li></ol><p>使用以下命令更新CentOS Stream系统上的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf update</span><br></pre></td></tr></table></figure><p>安装MySQL8需要更新系统上的软件包是因为MySQL8需要使用一些较新的依赖库和工具，而CentOS Stream默认的软件包版本可能较旧，无法满足MySQL8的要求。更新系统上的软件包可以确保系统中的依赖库和工具版本与MySQL8的要求相匹配，从而保证MySQL8的正常运行。</p><p>dnf和yum都是CentOS中的包管理器，它们的作用是安装、升级、删除软件包以及解决软件包依赖关系。它们的区别如下：</p><ul><li>语法不同：dnf命令的语法更加简洁，而yum命令的语法相对较长。</li><li>性能不同：dnf命令在处理软件包时的性能比yum命令更好，因为dnf使用了更高效的算法。</li><li>依赖关系处理不同：dnf命令在处理软件包依赖关系时更加智能，能够自动选择最佳的依赖关系解决方案。</li><li>使用的库不同：dnf命令使用了更加现代化的libdnf库，而yum命令使用了较老的yum库。</li><li>可用插件不同：dnf命令支持更多的插件，可以实现更多的功能。</li></ul><p>总的来说，dnf命令是yum命令的升级版本，它在性能、依赖关系处理和可用插件等方面都更加优秀。</p><ol><li>添加MySQL Yum存储库</li></ol><p>使用以下命令将MySQL Yum存储库添加到系统中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install https://dev.mysql.com/get/mysql80-community-release-el9-5.noarch.rpm</span><br></pre></td></tr></table></figure><p>MySQL Yum存储库怎么获取？如下图所示：从mysql官网获取<br><img src="https://i0.hdslb.com/bfs/article/b9979c669acbb193ee8368f04a02c422645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/a43f968361cb845aa9a8cd1c10b9d52c645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/1b2523d13be9b530a9db5ba97510a62f645325325.png" alt="image.png"></p><ol><li>导入mysql公钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br></pre></td></tr></table></figure><ol><li>安装MySQL 8</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install mysql-community-server</span><br></pre></td></tr></table></figure><ol><li>启动MySQL服务</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><ol><li>设置MySQL开机自启</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><ol><li>查看root账户的临时密码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><ol><li>配置MySQL安全设置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>按照提示输入密码并回答问题，完成安全设置。</p><ol><li>登录MySQL</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>完成以上步骤后，您就可以在CentOS Stream系统上安装并使用MySQL 8了。</p><h2 id="MySQL8设置字符集"><a href="#MySQL8设置字符集" class="headerlink" title="MySQL8设置字符集"></a>MySQL8设置字符集</h2><ol><li>查看MySQL8字符集</li></ol><p>在MySQL命令行界面中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%character%&#x27;;</span><br></pre></td></tr></table></figure><p>可以查看MySQL的字符集设置。<br><img src="https://i0.hdslb.com/bfs/article/337fc05522623269980cfc3e03262527645325325.png" alt="image.png"></p><ol><li>如果字符集不是utf8，可以在/etc/my.cnf文件中进行配置，在[mysqld]下面添加如下配置：/etc/my.cnf是mysql的配置文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><p>保存并退出。</p><ol><li>重启MySQL服务</li></ol><p>在终端中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><ol><li>再次查看MySQL8的字符集是否为utf8</li></ol><h2 id="在MySQL8中为Java程序员创建专属的MySQL用户"><a href="#在MySQL8中为Java程序员创建专属的MySQL用户" class="headerlink" title="在MySQL8中为Java程序员创建专属的MySQL用户"></a>在MySQL8中为Java程序员创建专属的MySQL用户</h2><p>首先，以root用户身份登录MySQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>创建一个新的数据库，例如项目是oa项目，一般创建一个数据库叫做oa：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database oa;</span><br></pre></td></tr></table></figure><p>然后，创建一个新用户并设置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;java_dev&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;java_DEV123&#x27;;</span><br></pre></td></tr></table></figure><p>接下来，为该用户授予开发者专有的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX, REFERENCES ON oa.* TO &#x27;java_dev&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><p>接下来，刷新权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>最后，关闭centos的防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>现在，Java程序员可以使用用户名和密码连接到MySQL并拥有开发者专有的权限。</p><h1 id="WEB应用的部署"><a href="#WEB应用的部署" class="headerlink" title="WEB应用的部署"></a>WEB应用的部署</h1><p>在进行以下的web应用部署时，请确保以上的JDK17、Tomcat10、MySQL8已经安装成功。</p><ol><li>初始化数据库<ol><li>这里使用navicat for mysql工具。</li><li>先在navicat for mysql工具中创建连接。</li><li>如果项目名叫做oa，那么创建一个数据库oa。</li><li>执行sql脚本文件（oa.sql）完成数据初始化。</li></ol></li><li>将项目中连接数据库的信息进行修改，例如：url、username、password等信息。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/385306e91a41b204a1be1a16596ac56e645325325.png" alt="image.png"></p><ol><li>在IDEA当中，使用maven将项目以war的形式打包。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/b309f7459876612d28209429a6d912af645325325.png" alt="image.png">​</p><ol><li>将war包上传到Tomcat的webapps目录下。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/7cc7286946ed79f3b22f3a9dcdde1116645325325.png" alt="image.png"></p><ol><li>启动Tomcat服务器，war包自动解压。war解压之后的目录就是web应用。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/fcfcd461b9e74618c914f37917a2bc3d645325325.png" alt="image.png"></p><ol><li>打开浏览器，输入访问地址访问。</li></ol><p><img src="https://i0.hdslb.com/bfs/article/ec41d9aa6f8488ff849680f94f81f39c645325325.png" alt="image.png"></p><ol><li>实时查看Tomcat服务器后台日志</li></ol><p>切换到CATALINA_HOME/logs目录下，执行以下命令，可以实时查看tomcat服务器日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第6章 文件权限</title>
      <link href="/posts/33643.html"/>
      <url>/posts/33643.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip sync faa-horizontal animated"><p>酒能红双颊，愁能雪白头</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="文件权限概述"><a href="#文件权限概述" class="headerlink" title="文件权限概述"></a>文件权限概述</h1><p>Linux为了保证系统中每个文件的安全，引入了文件权限机制。针对于系统中的每一个文件Linux都可以提供精确的权限控制。它可以做到<strong>不同的用户</strong>对<strong>同一个文件</strong>具有不同的操作权利。而通常这个权利包括以下3个：</p><ul><li>读的权利（Read，简称r）</li><li>写的权利（Write，简称w）</li><li>执行的权利（eXecute，简称x）</li></ul><p>具体的权限值：rwx（读、写、执行）。这个我们已经知道了。但是上面还提到了“<strong>不同的用户</strong>对同一个文件可以有不同的权限”中“<strong>不同的用户</strong>”指的是哪些用户呢？所以这个文件的用户也是包括3类用户：</p><ul><li>文件拥有者（User，简称U）：该文件的创建人</li><li>同组用户（Group，简称G）：和创建人在同一组的用户</li><li>其他组用户（Other，简称O）：和创建人不在同一组的用户</li></ul><p>这就是非常著名的UGO模型。也就是说一个文件的权限包括三组：</p><ul><li>第一组U：我们可以给文件的创建者设置rwx权限。</li><li>第二组G：我们可以给文件创建者的同组人员设置rwx权限。</li><li>第三组O：我们可以给和文件创建者不在同一组的人员设置rwx权限。</li></ul><h1 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h1><p>采用“ls -l”命令可以查看文件的具体权限，如下：<br><img src="https://i0.hdslb.com/bfs/article/f5b514a18f238130fffc141afb644e35645325325.png" alt="image.png"><br>权限信息在哪里呢？看下图：<br><img src="https://i0.hdslb.com/bfs/article/a11625b7780947085f660bac2fa2b939645325325.png" alt="image.png"><br>每一个文件或目录采用ls -l查看之后，第一个字段描述了文件类型+文件的权限。第一个字段共10个字符：</p><ul><li>第1个字符：代表文件的类型，- 代表文件，d代表目录<ul><li>其实Linux中文件的类型有7种：<ul><li><ul><li>代表普通文件</li></ul></li><li>d 代表目录</li><li>l 代表链接（软链接：快捷方式）</li><li>b 块设备（硬盘，软盘等存储设备）</li><li>c 字符设备（通常以字节流的方式访问）</li><li>p 管道文件（主要用于进程间通讯）</li><li>s 套接字文件（主要用于网络通讯）</li></ul></li></ul></li><li>第2,3,4个字符：代表文件创建者对该文件的权限。</li><li>第5,6,7个字符：代表与文件创建者在同一组的用户对该文件的权限。</li><li>第8,9,10 个字符：代表其他组人员对该文件的权限。</li></ul><p>关于文件权限的9个字符中包含四种字符，分别是：r、w、x、-，他们代表什么含义：</p><ul><li>r：读权限</li><li>w：写权限</li><li>x：执行权限</li><li>-：无权限</li></ul><h1 id="基于UGO设置文件权限"><a href="#基于UGO设置文件权限" class="headerlink" title="基于UGO设置文件权限"></a>基于UGO设置文件权限</h1><p>修改权限的命令是chmod，如果采用UGO方式修改权限的话，大致语法是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+w Hello.java</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+w, o+w Hello.java</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g-w, o-w Hello.java</span><br></pre></td></tr></table></figure><p>我们查看HelloWorld.java文件的权限：<br><img src="https://i0.hdslb.com/bfs/article/835364501f703009850b87e07f8b4643645325325.png" alt="image.png"><br>文件拥有者：读和写<br>同组人员：读<br>其他组人员：读<br>我们将文件拥有者的写权限删除：<br><img src="https://i0.hdslb.com/bfs/article/b883c060bb9df94b97f2708316c92082645325325.png" alt="image.png"><br>我们尝试使用vim命令编辑HelloWorld.java文件，当你使用vim编辑时：<br><img src="https://i0.hdslb.com/bfs/article/487bd57386ef157420e510080e2eebe8645325325.png" alt="image.png"><br>发现该文件是只读的，不支持编辑。<br>我们再把写的权限加上：<br><img src="https://i0.hdslb.com/bfs/article/e32c31a0ad614ade03962bb302470179645325325.png" alt="image.png"><br>再使用vim命令打开该文件：<br><img src="https://i0.hdslb.com/bfs/article/fadcac75778a71f94b97a0c34cc4eee6645325325.png" alt="image.png"><br>可以看到，这个时候文件可以编辑了。</p><p><strong>注意：在测试同组人员的权限时，一定要注意创建者创建文件之后，文件所对应的组是否修改了。怎么修改文件所属组：chgrp dev Test.java（将Test.java文件所属组修改为dev）</strong></p><h1 id="基于421设置文件权限"><a href="#基于421设置文件权限" class="headerlink" title="基于421设置文件权限"></a>基于421设置文件权限</h1><p>421采用数字来表示不同的权限。</p><ul><li>4代表读</li><li>2代表写</li><li>1代表执行</li></ul><p>例如：如果让一个用户读、写、执行权限都有的话，就是4 + 2 + 1 = 7，那么7这个数字就代表rwx的权限都具备。如果是5就表示4+1的组合，表示有r和x的权限。如果是6就表示4+2的组合，表示有r和w的权限。如果是0就表示无任何权限。<br>通过421这几个数字的不同组合来表示不同的权限，那么它有多少种不同的组合呢：</p><ul><li>0：无权限</li><li>1：x</li><li>4：r</li><li>5：r + x</li><li>6：r + w</li><li>7：r + w + x</li></ul><p>也就是说一共6个数字：0 1 4 5 6 7<br>那么采用421方式设置权限应该怎么做呢，比如：如何给文件拥有者设置权限，如何给同组人员设置权限，如何给其他组人员设置权限？语法是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 三个数字 文件名</span><br></pre></td></tr></table></figure><p>例如：chmod 755 HelloWorld.java<br>第一个数字7是文件拥有者的权限，第二个数字5是同组人员的权限，第三个数字5是其他组人员的权限。<br>也就是说文件拥有者的权限是rwx，同组人员是r-x，其他组人员是：r-x<br>​<img src="https://i0.hdslb.com/bfs/article/1158297bae1e367f42e8e2da7f7dd85d645325325.png" alt="image.png"><br>再如：chmod 700 HelloWorld.java<br>表示文件拥有者权限：rwx，同组人员无权限，其他组人员无权限<br>​<img src="https://i0.hdslb.com/bfs/article/be21ded0bb220a6977de7f6ad5d1a91f645325325.png" alt="image.png">​</p><h1 id="chown修改文件拥有者"><a href="#chown修改文件拥有者" class="headerlink" title="chown修改文件拥有者"></a>chown修改文件拥有者</h1><p>在 Linux 中，可以使用 <code>chown</code> 命令来修改指定文件或目录的拥有者和所属组。<code>chown</code> 命令的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项]... [所有者][:[所属组]] 文件...</span><br></pre></td></tr></table></figure><p>其中，<code>所有者</code> 和 <code>所属组</code> 可以是用户名或用户 ID、组名或组 ID，如果省略 <code>:</code> 和 <code>所属组</code>，则默认为修改文件的所有者。</p><p>下面是一些常用选项：</p><ul><li><code>-R</code>：递归修改，包括子目录和文件。</li></ul><p>例如，将 <code>/home/user/file.txt</code> 文件的所有者修改为 <code>root</code> 用户，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root /home/user/file.txt</span><br></pre></td></tr></table></figure><p>将 <code>/home/user/dir/</code> 目录及其子目录和文件的所有者都修改为 <code>userA</code> 用户，所属组修改为 <code>groupA</code> 组，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R userA:groupA /home/user/dir/</span><br></pre></td></tr></table></figure><p>注意，在使用 <code>chown</code>​ 命令时，需要有足够的权限才能修改文件或目录的拥有者和所属组。一般需要使用 <code>sudo</code>​ 命令或使用具有相应权限的用户来执行。</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第5章 Linux用户管理</title>
      <link href="/posts/41490.html"/>
      <url>/posts/41490.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip cogs faa-horizontal animated"><p>今人见过昔年月，今月曾经照故人，都曾见过她啊</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><p>Linux系统中超级用户是root，通过超级用户root可以创建其它的普通用户，Linux是一个支持多用户的操作系统。在实际使用中，一般会分配给开发人员专属的账户，这个账户只拥有部分权限，如果权限太高，操作的范围过大，一些误操作可能导致系统崩溃，或者数据不安全，所以多用户机制就是一种系统安全策略。<br>在Linux系统中任何一个用户都对应：一个用户名 + 一个口令。用户使用系统时需要输入用户名和口令进行登录，登录成功后就可以进入自己的主目录（主目录就是自己的工作目录）。<br>用户账号管理主要包括以下三方面：</p><ul><li>用户组的管理</li><li>用户的管理</li><li>为用户主目录之外的目录授权</li></ul><h1 id="用户组的管理"><a href="#用户组的管理" class="headerlink" title="用户组的管理"></a>用户组的管理</h1><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。<br>用户组的管理涉及用户组的添加、修改和删除。<br>用户组的添加、修改和删除实际上就是对/etc/group文件的更新。<br><strong>使用root账户查看当前系统的用户组有哪些</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/9102b0922b937561007620b1f6e784c4645325325.png" alt="image.png"><br>每一个用户组四部分组成：组名：密码标识：GID：该用户组中的用户列表<br><strong>查看当前登录的账户属于哪一组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groups</span><br></pre></td></tr></table></figure><p><strong>查看某个用户属于哪一组</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# groups root</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/6680e5c5266ec4331e674b4535af8d92645325325.png" alt="image.png">​</p><h2 id="用户组的添加"><a href="#用户组的添加" class="headerlink" title="用户组的添加"></a>用户组的添加</h2><p>语法：groupadd [选项] 组名<br>常用选项包括：</p><ul><li>-g     可以通过这个选项来指定新用户组的标识号（GID）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd dev1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 101 dev2</span><br></pre></td></tr></table></figure><p>其中101是dev2这个组的组号。</p><h2 id="用户组的修改"><a href="#用户组的修改" class="headerlink" title="用户组的修改"></a>用户组的修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 102 dev2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将dev2修改为dev3</span></span><br><span class="line">groupmod -n dev3 dev2</span><br></pre></td></tr></table></figure><h2 id="用户组的删除"><a href="#用户组的删除" class="headerlink" title="用户组的删除"></a>用户组的删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户组dev3</span></span><br><span class="line">groupdel dev3</span><br></pre></td></tr></table></figure><h1 id="用户的管理"><a href="#用户的管理" class="headerlink" title="用户的管理"></a>用户的管理</h1><p>用户管理工作主要涉及到用户的添加、修改和删除。</p><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>添加用户就是在系统中创建一个新账号，然后为新账号分配用户组、主目录等资源。<br>语法：useradd [选项] 用户名<br>选项：</p><ul><li>-d    指定新用户的主目录</li><li>-g    指定新用户属于哪个组（主组）</li><li>-G    可以给新用户添加附加组</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# useradd lisi</span><br></pre></td></tr></table></figure><p>注意：当新建用户时，没有指定组，也没有指定工作目录时：</p><ul><li>默认的组名：和自己用户名一样</li><li>默认的主目录：/home/用户名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# useradd -d /usr/zhangsan zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost usr]# useradd -d /usr/lisi -g dev -G test lisi</span><br></pre></td></tr></table></figure><p>添加lisi用户，该用户的主目录/usr/lisi，所属主组dev（开发组），附加组test（测试组）</p><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd lisi</span><br></pre></td></tr></table></figure><p>注意：增加用户就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。<br>通过查看/etc/passwd文件可以看到系统中有哪些用户，例如执行：cat /etc/passwd<br>​<img src="https://i0.hdslb.com/bfs/article/ab5e5a7df7d75bcfeec5f33536ed72e6645325325.png" alt="image.png"><br>以上信息描述了什么？<br>​<img src="https://i0.hdslb.com/bfs/article/42be5f14200fa04018b88408212c9972645325325.png" alt="image.png"><br>密码会单独存储在/etc/shadow文件中，例如执行：cat /etc/shadow<br>​<img src="https://i0.hdslb.com/bfs/article/ad96809c9242c8bd0bd6b1b5e1ed6239645325325.png" alt="image.png"><br>可以看到这个密码是通过某种算法进行加密的。</p><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su bjpowernode</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/41dd2fb26f93499cc90c717c2e567bb2645325325.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[bjpowernode@localhost root]$ su root</span><br><span class="line">密码： </span><br><span class="line">[root@localhost ~]# </span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/25d639cc26b1140f9a64e090b9fb9f12645325325.png" alt="image.png"><br>注意：从普通用户切换到高级用户需要密码。密码输入时不回显。<br>注意：切换到普通用户之后，该普通用户默认只对自己的“主目录”有权限，主目录之外的目录是没有权限的。</p><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><p>修改用户就是对用户名，用户主目录，用户组等进行修改。<br>语法：usermod [选项] 用户名</p><ul><li>-d    指定新用户的主目录</li><li>-g    指定新用户属于哪个组（主组）</li><li>-G    可以给新用户添加附加组</li><li>-l     指定新的用户名（小写的艾路）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -l zhangsi zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-m 选项很重要，当有了这个选项之后，目录不存在时会新建该目录。</span></span><br><span class="line">usermod -d /usr/zhangsan2 -m zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g dev1 zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -L zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -U zhangsan</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r zhangsan</span><br></pre></td></tr></table></figure><p>-r 选项的作用是连同该用户主目录一块删除。</p><h1 id="为用户主目录之外的目录授权"><a href="#为用户主目录之外的目录授权" class="headerlink" title="为用户主目录之外的目录授权"></a>为用户主目录之外的目录授权</h1><p>第一步：创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /java</span><br></pre></td></tr></table></figure><p>第二步：给目录授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-R表示递归设置权限，该目录下所有的子目录以及子文件</span></span><br><span class="line">chmod -R 775 /java</span><br></pre></td></tr></table></figure><p>第三步：创建组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd dev</span><br></pre></td></tr></table></figure><p>第四步：把目录赋予组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp -R dev /java</span><br></pre></td></tr></table></figure><p>第五步：创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd xiaoming</span><br></pre></td></tr></table></figure><p>第六步：设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd xiaoming</span><br></pre></td></tr></table></figure><p>第七步：给用户添加附加组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G dev xiaoming</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天空之城</title>
      <link href="/posts/29f0725f.html"/>
      <url>/posts/29f0725f.html</url>
      
        <content type="html"><![CDATA[<p>题记-我们都是昭阳，生命中却没有米彩、乐瑶、简薇。</p><p>其实题记里没打，怕破坏氛围，我还想打上甚至没有罗本、CC甚至小五等人。就像作者微博里说的，你们有随叫随到陪你喝酒的人么，至少我没有。作者以第一人称的写作手法，很容易让我们带入到昭阳的情感中去，就像我题记说的，我们都是昭阳，生命中却没有米彩、乐瑶、简薇这种视我们为生命的女人。可人生是一道单选题，最后昭阳选择了米彩，辜负了乐瑶和简薇。我没有，你有，却辜负了，这大概就是我们最意难平的地方。</p><p>一乐瑶。</p><p>乐瑶是这部小说最低开高走的一个角色，也是最悲情的角色。(之所以不叫她肖瑶，是因为乐瑶才是和昭阳鬼混两年的小透明，才是把昭阳当成全部世界的一个小麻烦。改名我觉得更多的意思是要和过去那个傻傻爱着昭阳的乐瑶告别的)。乐瑶也是我最喜欢的角色。我多希望第一章乐瑶生下孩子放弃当大腕的梦，昭阳为了孩子和她在一起，故事结束。那时候米彩没有和昭阳纠缠在一起，以后和小海龟在一起，接手母亲米国生意，平淡的过一辈子，也不错。薇薇简可能就悲剧些，不过讲了那么多故事，最后结局时薇薇简不也一样远走米国了么。从第一3章开始薇薇简就已经受伤了，这个没办法，那个烈火一样的女子不肯放过自己。好了扯远了，回来说乐瑶。我之所以说乐瑶是最悲情的，不仅仅是她从来没得到昭阳的爱，还被昭阳喝多了睡了(可能一边睡一边还喊着简薇)，还中奖了，还打胎了。而是作者可能从一开始没想写这么一个角色，开篇乐瑶是以一个混吧的炮友的形象出现的，读完全篇回头再看昭阳开篇对她有多污蔑，我就觉得有多割裂，生命中那么重要的红颜知己居然以炮友形象出现。其实开篇这里出现几个逻辑BUG，开篇昭阳对乐瑶的感觉是炮友，是因为长的好看睡的，一口一个以后别联系了。后来呢，把乐瑶当妹妹，抛弃订婚对象，伤父母的心也要回来帮她，还为她借了100W。试问大家你们为了炮友能做到这地步么。昭阳对乐瑶的感情应该是开篇之前两年鬼混养成的，而不是以打胎为起点。还有说方圆是这座城市唯一的朋友。那罗本和CC就不乐意了，昭阳，你忘了桥洞子唱歌的罗本了么。你忘了无数次照顾喝多的你的CC了么。好了又扯远了，继续说乐瑶。乐瑶可能是全篇活的最明白的一个人了，只有她是生活中的高手，星途她很坦荡，就算之后嫁给了曹公子也没过的不好，她之所以在感情中没做好高手，只是她自己一直不愿意走出来而已，换句话说是对昭阳爱的深沉。乐瑶这个角色丰满实在一次次加戏中体现的，比如被昭阳怂恿偷烟、视罗本为哥哥，爱上昭阳等等。不管如何，作者还是塑造出这么一个让我们又爱又心疼的古怪精灵的乐瑶，视昭阳为全部世界的乐瑶。我猜乐瑶不让昭阳去她的婚礼现场可能是怕她忍不住冲下去求婚昭阳吧。还有拍的那个电影，怀里男主的孩子死了，最后活在男主心里，拍摄完乐瑶那场大哭，我想乐瑶是愿意这不是电影而是生活吧。作者总说米彩不能被辜负是可怜的孩子，母亲抛弃，父亲去世。可乐瑶呢，父亲抛弃，母亲后文提过也成家了，没人疼没人爱，只有乐瑶一个人孤苦伶仃的生活，还被只想着红的前男友抛弃，谁又不是不能辜负的小可怜呢？只许她房客大小姐可怜么，一遍遍的提，又有谁想到我们一直保持微笑的乐瑶有多苦。</p><p>如果留下孩子，如果放弃大腕的梦，如果相信昭阳能养得起她们的孩子，如果早一些表达心意，有太多的如果。那样乐瑶就会是最幸福的人。也不睡着的时候假装死了几回了。意难平。</p><p>二、简薇</p><p>薇薇简是一个纯粹的女人，是火一样的女人。是有着强烈精神洁癖的女人。她说她的人生不可能完美了，她就向她的车一样带着伤痕，提醒自己，惩罚自己。这里先说她为什么和昭阳分手。其实全篇作者给了很多暗示，方圆出轨时候扎手，薇薇简无动于衷，并且说她手上也有伤痕。她和昭阳说过我从没想过要背叛你，还有一段薇薇简做梦时候还喊她精神没有背叛(大概是这个意思吧)，有一段薇薇简和向晨争吵，突然说要我把事情都说出来么，向晨立马怂了，还有一段昭阳偷看向晨简薇的短信是这样的(“向晨，你很恶心，你知道吗？就冲你对我和昭阳做的一切，你就恶心！……我已经是这个样子了，没有什么是豁不出去的，你最好从我的视线里滚的越远越好。”)最后银行经理说方圆说过向晨对不起薇薇简和昭阳。还有一段薇薇简说昭阳果然和别的女的鬼混，还说她在美国多么多么辛苦。还有向晨出国一段时间。那么答案很明显，向晨出国陪薇薇简去了，造谣昭阳出轨，灌醉也好下Y也好怎么也好，睡了薇薇简一次(我觉得向晨可能就睡那么一次，之后薇薇简同意和向晨交往也是薇薇简亲眼看见昭阳说米彩是自己女朋友之后，同昭阳一样不想表现太不堪而做出的举动，她心里直到结局也一直爱着昭阳，这样一个强烈精神洁癖的女人怎么会和向晨同居。向晨机关算尽也没能得到简薇，最后才和简薇分手找那个谁)。醒来的薇薇简觉得自己对不起昭阳(或者自己精神中完美的爱情)割腕自杀，虽然救过来了但是她不肯原谅自己和昭阳分手了。这也是故事的开篇。其实薇薇简我觉得是除了乐瑶第二苦情的。那么完美刚烈的一个女子，却遇到向晨这样的小人。错过了与昭阳的完美爱情。她穿着一件白色T恤，惊艳了我一整个夏天。这是昭阳对她最后的回忆，却终究是错过了。我看完小说逛了逛作者微博还有知乎关于这本小说的评价，不少人说简薇能与昭阳一起死，淋汽油和跳护城河那两段。其实我想说乐瑶和米彩也一定做得到。她们对昭阳的爱完全不逊色与薇薇简，乐瑶电影里的坟墓，莫子石说漏了说米彩不顾自己的性命，也无怨无悔(我觉得这段应该是米彩生宝宝难产，不顾自己性命也想给昭阳一个孩子)。但是这种镜头一定要给简薇。她是那么刚烈，她不肯原谅自己的过错，活着每一天都是对自己的折磨，那么死了，或者为了昭阳死、陪着昭阳死，对她来说都是一种完美的结局，只是作者也心疼这个强颜欢笑的女子，最后也给了她一个还算美好的结局。</p><p>如果没有父母反对，如果没有向晨这个小人，如果薇薇简能原谅自己和昭阳好好沟通，如果方圆婚礼昭阳没说米彩是自己女友。有太多的如果，那样薇薇简也会是最幸福的女人。也不用最后远走米国了。意难平。</p><p>三、米彩</p><p>房客大小姐做为天命女主角应该是最幸福的一个了，这个不用意难平了。从最初打打闹闹，到爱上昭阳，再到各种矛盾，再到落魄回徐州结婚(话说这段真的为了惨而惨啊，有那么穷么，投资那花店多钱呢。突然就几万都没有了，作者也真是的。)再到婚礼中昭阳跑了去看前女友，直到最后有了孩子。挺好的，一路风风雨雨，结局是美好的就好。说个有意思的事，我看到米彩第一次和昭阳在一起的时候我发现进度才20%，我就觉得事情没那么简单。人生看小说10多年第一次直接去看了结局，我当时想结局昭阳和米彩在一起我就继续看，不在一起我就不看了。还好结局是好的，我才继续看。可见作者这小说有多虐。有很多人说米彩不爱昭阳，她不爱昭阳会顶着所有人反对和昭阳在一起么，会为了她吃那么多醋么，会和昭阳回徐州做一个小助理么。平平淡淡是昭阳的梦想不是米彩的。大小姐角色之所以让人喜欢，是她完美的出场，完美的形象，作者把她描写的真就像不问俗世的仙子。她没有男女感情经理，没喜欢过除了昭阳以外的别人，所以对感情的表达上显得很生疏，很多时候没有乐瑶的无微不至。但这也是让我们着迷的地方，一个不理尘世的仙子突然为了你下凡笨手笨脚的适应你的一切，想想就很梦幻。所以大小姐不能辜负，大小姐众万所归和昭阳在一起了。(大小姐卑就惹人心疼。乐瑶和薇薇简就是活该，我又酸了不好意思)。</p><p>四年前你是我的房客，四年后你是我的妻子。祝渣阳和房客大小姐幸福吧。</p><p>四，方圆和颜妍夫妇</p><p>方圆做为本书最高开低走的角色，我觉得最后洗白也没什么作用。简薇和昭阳分手方圆是罪魁祸首之一，偷拍昭阳给向晨，让向晨持续不断的给简薇看照片。还反过头来有模有样的说昭阳过的不好不上进。我呸，恶心。昭阳做为男主，如果没和简薇分手，以书里昭阳的超能力，你方圆是个屁啊。至于最后的背叛米彩，我觉得更像是小丑的闹剧。另外在颜妍和方圆离婚之后有几次和昭阳欲言又止的对话中，应该是她也知道方圆的所作所为。还拿昭阳当弟弟，拿简薇当闺蜜。我也只能是呵呵了。好了就这样吧，配角而已不愿意多说，就像向晨我根本不写他，他不配。</p><p>五、罗本和CC以及女教师</p><p>这就是一场错误的典范，罗本选择和前任结果错过了。女教师选择和前任，最后也回小山村了。所以这里告诉我们，不能和前任和好，要向前看。最后罗本和女歌手，CC闪婚了，女教师陪走了一个之后找个二婚的教师。无关爱情，却也是不错的结局，不是么。就像是板爹也是有故事的人，最后选择了昭阳妈妈，过的不也一样挺好么。爱情是爱情，生活是生活。</p><p>六、昭阳</p><p>其实我们就是一个又一个的昭阳，虽然没有他有超能力，让那么多女性爱上他，让钱来的那么容易。可是我们也是苦海中沉浮的人。不说了，读过所有鸡汤也不一定过好一生。如人饮水，冷暖自知。说小说里人物行，劝大家我张不开嘴 说点拜年话吧，祝大家都能过的幸福。</p><p>最后，附上一首辛弃疾的词，自己理解。</p><p>丑奴儿·书博山道中壁 [宋]辛弃疾</p><p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新 词强说愁。</p><p>而今识尽愁滋味，欲说还休。欲说还休，却道天 凉好个秋。</p>]]></content>
      
      
      <categories>
          
          <category> 月湖笔谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读印记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tag Plugins Plus 的日常使用</title>
      <link href="/posts/17639.html"/>
      <url>/posts/17639.html</url>
      
        <content type="html"><![CDATA[<h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><p>彩色文字 ：在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span></p><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><h3 id="simple样式"><a href="#simple样式" class="headerlink" title="simple样式"></a>simple样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="modern样式"><a href="#modern样式" class="headerlink" title="modern样式"></a>modern样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="flat样式"><a href="#flat样式" class="headerlink" title="flat样式"></a>flat样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="disabled样式"><a href="#disabled样式" class="headerlink" title="disabled样式"></a>disabled样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="no-icon样式"><a href="#no-icon样式" class="headerlink" title="no-icon样式"></a>no-icon样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><h3 id="当页面加载时显示动画"><a href="#当页面加载时显示动画" class="headerlink" title="当页面加载时显示动画"></a>当页面加载时显示动画</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><h3 id="调整动画速度"><a href="#调整动画速度" class="headerlink" title="调整动画速度"></a>调整动画速度</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><h3 id="当鼠标悬停时显示动画"><a href="#当鼠标悬停时显示动画" class="headerlink" title="当鼠标悬停时显示动画"></a>当鼠标悬停时显示动画</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div><h3 id="当鼠标悬停在父级元素时显示动画"><a href="#当鼠标悬停在父级元素时显示动画" class="headerlink" title="当鼠标悬停在父级元素时显示动画"></a>当鼠标悬停在父级元素时显示动画</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><ol><li>颜色: red,yellow,green,cyan,blue,gray</li><li>选中状态: checked</li></ol><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">标题/时间线</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left"><code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</td></tr></tbody></table></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><h2 id="行内图片"><a href="#行内图片" class="headerlink" title="行内图片"></a>行内图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/5150.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><p>这是 <img no-lazy class="inline" src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/5150.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/5150.gif" style="height:40px;"/> 一段话。</p><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><h3 id="100-宽度"><a href="#100-宽度" class="headerlink" title="100%宽度"></a>100%宽度</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>### 50%宽度<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><h3 id="25-宽度"><a href="#25-宽度" class="headerlink" title="25%宽度"></a>25%宽度</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><h2 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 npm 安装 Tag Plugins Plus</title>
      <link href="/posts/49186.html"/>
      <url>/posts/49186.html</url>
      
        <content type="html"><![CDATA[<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="添加配置信息"><a href="#添加配置信息" class="headerlink" title="添加配置信息"></a>添加配置信息</h2><p>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure><h2 id="参数释义"><a href="#参数释义" class="headerlink" title="参数释义"></a>参数释义</h2><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">link.placeholder</td><td style="text-align:left">【必选】link卡片外挂标签的默认图标</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入，如果不想引入，则设为false</td></tr><tr><td style="text-align:left">CDN.carousel</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖，如果不想引入则设为false</td></tr><tr><td style="text-align:left">CDN.tag_plugins_css</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】外挂标签样式的CSS依赖，为避免CDN缓存延迟，建议将@latest改为具体版本号</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 文件内容查看</title>
      <link href="/posts/13783.html"/>
      <url>/posts/13783.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip success faa-horizontal animated"><p> 那个老书生说，我们活在一个很复杂的世道里，很多人的言行，哪怕是学问极高的读书人，还是会自相矛盾，我们看多了没甚道理的事情，难免会问，是不是书上的道理，是错的，或者说，是那些道理还没有说透，没有说全。”<br>“那么问题来了，怎么办呢？我们该怎么看待这个许多嘴上讲道理、做事没道理的世界？办法是有的，一种是活得纯粹，我拳头很硬，剑术很强，道法很强，就用这些来打破一些东西。复杂问题给简单解决掉，只要我开心就好。天地有规矩约束我，我便一拳打破，世间有大道压我，我有一剑破万法。哪怕暂时做到如此酣畅淋漓，可总是如此想，坚定不移，一直朝这个方向走在道路上。这种人可以有，但是不能人人如此的。”一种是活得很聪明，怎么省心省力怎么来，规矩二字，就是用来钻漏洞的</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><p>查看文件内容的常见命令</p><ul><li>cat</li><li>more 和 less</li><li>head 和 tail</li><li>nl</li><li>tailf</li></ul><h1 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h1><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法：cat [选项]... [文件]...</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">  -n, 对输出的所有行编号</span><br><span class="line">  -b, 对输出的所有行编号（不含空白行）</span><br><span class="line">  -t, 将制表符(tab)显示为^I</span><br><span class="line">  -e, 在每行结束处显示&quot;$&quot;</span><br><span class="line">  -s, 当连续空白行数量大于1时，合并为1个空白行</span><br></pre></td></tr></table></figure><p><strong>cat命令会一次性将文件的完整内容全部显示出来，不适合大文件。</strong></p><p>查看文件所有内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat HelloWorld.java</span><br></pre></td></tr></table></figure><p>查看文件所有内容，并且添加行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n HelloWorld.java</span><br></pre></td></tr></table></figure><p>查看文件所有内容，添加行号，但空白行不加行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b HelloWorld.java</span><br></pre></td></tr></table></figure><p>查看文件所有内容，将制表符显示为^I</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -t HelloWorld.java</span><br></pre></td></tr></table></figure><p>查看文件所有内容，在每行结束处显示”$”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -e HelloWorld.java</span><br></pre></td></tr></table></figure><p>查看文件所有内容，合并多个连续的空白行为1个空白行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -s HelloWorld.java</span><br></pre></td></tr></table></figure><p>一次查看多个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat a.txt b.txt</span><br></pre></td></tr></table></figure><p>使用cat合并文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat a.txt b.txt &gt; c.txt</span><br></pre></td></tr></table></figure><p>加上行号之后输出到另一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n HelloWorld.java &gt; HelloWorld2.java</span><br></pre></td></tr></table></figure><p>清空文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; HelloWorld.java</span><br></pre></td></tr></table></figure><h1 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h1><p>more命令和cat命令的相同点和不同点：</p><ul><li>相同点：more和cat在开始读取文件的时候，都是一次性的将文件全部内容装载到缓存中。</li><li>不同点：cat是一次性的全部输出打印。more可以进行部分打印（一屏一屏的打印）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"> more [选项] &lt;文件&gt;...</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line"> -&lt;number&gt;  每个屏幕的行数</span><br><span class="line"> +&lt;number&gt;  从行号开始显示文件</span><br><span class="line"> +/&lt;pattern&gt;  从匹配的位置前两行开始显示内容</span><br><span class="line"> -p  以清除原内容的方式进行翻页。</span><br><span class="line"> </span><br><span class="line">常用操作：</span><br><span class="line">  回车键        【显示下一行】</span><br><span class="line">  空格键        【显示下一页】</span><br><span class="line">  ctrl + b     【显示上一页】</span><br><span class="line">  =            【显示行号】</span><br><span class="line">  :f           【显示文件名的同时显示行号】</span><br><span class="line">  q            【退出more命令】</span><br></pre></td></tr></table></figure><p>这里有日志文件：log.txt，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">2021.10.1 zhangsan</span><br><span class="line">2021.10.2 lisi</span><br><span class="line">2021.10.3 wangwu</span><br><span class="line">2021.10.4 zhaoliu</span><br><span class="line">2021.10.5 admin</span><br><span class="line">2021.10.6 zhangsan</span><br><span class="line">2021.10.7 lisi</span><br><span class="line">2021.10.8 wangwu</span><br><span class="line">2021.10.9 zhaoliu</span><br><span class="line">2021.10.10 qianqi</span><br><span class="line">2021.10.11 zhouyu</span><br><span class="line">2021.10.12 huanggai</span><br><span class="line">2021.10.13 zhugeliang</span><br><span class="line">2021.10.14 simayi</span><br><span class="line">2021.10.15 maimaiti</span><br><span class="line">2021.10.16 erdaye</span><br><span class="line">2021.10.17 sandaye</span><br><span class="line">2021.10.18 zhangsan</span><br><span class="line">2021.10.19 lisi</span><br><span class="line">2021.10.20 wangwu</span><br><span class="line">2021.10.21 zhaoliu</span><br><span class="line">2021.10.22 qianqi</span><br><span class="line">2021.10.23 zhoubapi</span><br><span class="line">2021.10.24 doudizhu</span><br><span class="line">2021.10.25 nongmin</span><br><span class="line">2021.10.26 sunwukong</span><br><span class="line">2021.10.27 zhubajie</span><br><span class="line">2021.10.28 shaseng</span><br><span class="line">2021.10.29 wujing</span><br><span class="line">2021.10.30 baigujing</span><br><span class="line">2021.10.31 java</span><br><span class="line">2021.11.1 oracle</span><br><span class="line">2021.11.2 mysql</span><br><span class="line">2021.11.3 jdbc</span><br><span class="line">2021.11.4 servlet</span><br><span class="line">2021.11.5 jsp</span><br><span class="line">2021.11.6 spring</span><br><span class="line">2021.11.7 mybatis</span><br><span class="line">2021.11.8 springmvc</span><br><span class="line">2021.11.9 web</span><br><span class="line">2021.11.10 html</span><br><span class="line">2021.11.11 css</span><br><span class="line">2021.11.12 java</span><br><span class="line">2021.11.13 sun</span><br></pre></td></tr></table></figure><p>案例1：从第3行起，查看文件内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +3 log.txt</span><br></pre></td></tr></table></figure><p>案例2：每屏显示4条记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more -4 log.txt</span><br></pre></td></tr></table></figure><p>案例3：从文件中查找”java”字符串的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +/java log.txt</span><br></pre></td></tr></table></figure><p>案例4：查看进程，每5条为一屏，翻屏时清空原内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | more -5 -p</span><br></pre></td></tr></table></figure><h1 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h1><p>less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。使用less 时，可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 中可以拥有更多的搜索功能。</p><h2 id="less命令用法"><a href="#less命令用法" class="headerlink" title="less命令用法"></a>less命令用法</h2><p>有这样的一个文件：usernames.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">ZHANGSAN</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">ZHANGSAN</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line">sunwukong</span><br><span class="line">zhubajie</span><br><span class="line">wusong</span><br><span class="line">linchong</span><br><span class="line">huanggai</span><br><span class="line">songjiang</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">用法：less [选项] 文件</span><br><span class="line"></span><br><span class="line">常用选项：</span><br><span class="line">-g  只标志当前搜索到的关键词所在行</span><br><span class="line">-I  忽略搜索时的大小写（注意：是大写I）</span><br><span class="line">-m  显示类似more命令的百分比</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">+num 从第num行开始显示</span><br><span class="line"></span><br><span class="line">常用操作：</span><br><span class="line">/字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line"></span><br><span class="line">n：重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line"></span><br><span class="line">y  向前滚动一行</span><br><span class="line">回车键 向后滚动一行</span><br><span class="line"></span><br><span class="line">u  向前滚动半页</span><br><span class="line">d  向后滚动半页</span><br><span class="line"></span><br><span class="line">b  向前翻一页</span><br><span class="line">空格键 向后翻一页</span><br><span class="line"></span><br><span class="line">g  移动到第一行</span><br><span class="line">G  移动到最后一行</span><br><span class="line"></span><br><span class="line">= 显示详细信息（第几行，共多少行，内容的字节数量等）</span><br><span class="line"></span><br><span class="line">v  使用vim编辑器进行编辑</span><br><span class="line"></span><br><span class="line">q  退出less 命令</span><br><span class="line"></span><br><span class="line">[pagedown] 向下翻动一页</span><br><span class="line">[pageup] 向上翻动一页</span><br></pre></td></tr></table></figure><h2 id="less命令标记兴趣点"><a href="#less命令标记兴趣点" class="headerlink" title="less命令标记兴趣点"></a>less命令标记兴趣点</h2><p>在感兴趣的位置添加标记：</p><ul><li>先按m键 (set mark)</li><li>输入标记名称，例如标记名字为：x</li></ul><p>需要回到感兴趣的位置时：</p><ul><li>先按 ‘ 键 (goto mark)</li><li>输入标记名称 x</li></ul><h2 id="less命令实时监控文件动态变化"><a href="#less命令实时监控文件动态变化" class="headerlink" title="less命令实时监控文件动态变化"></a>less命令实时监控文件动态变化</h2><p>第一步：在窗口1中执行：less +F log.txt<br>第二步：在窗口2中执行：ps -ef &gt;&gt; log.txt</p><p>注意：在监控的过程中，按 ctrl + c是终止监控，可以继续使用less命令的相关操作。按大写F，再次进入监控模式。</p><p><strong>注意：log.txt是一个文件名。只有机器自动写入或通过输出重定向写入的才可以被监控。</strong></p><h2 id="less命令查看多个文件"><a href="#less命令查看多个文件" class="headerlink" title="less命令查看多个文件"></a>less命令查看多个文件</h2><p>less log.txt  log2.txt</p><ul><li>输入:n 跳转到log2.txt</li><li>输入:p 跳转到log.txt</li></ul><h2 id="less命令结合管道一起使用"><a href="#less命令结合管道一起使用" class="headerlink" title="less命令结合管道一起使用"></a>less命令结合管道一起使用</h2><p>ps -ef | less -N</p><h1 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h1><p>head命令：显示文件头部内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法：head [选项]... [文件]...</span><br><span class="line">将每个指定文件的前 10 行输出到标准输出。</span><br><span class="line">如果指定了多于一个文件，在每块输出之前附加文件名称作为头部。</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">  -c 输出前几个字符</span><br><span class="line">  -n 指定行数</span><br><span class="line">  -q 不显示包含给定文件名的文件头</span><br></pre></td></tr></table></figure><p>前三行：<br>​<img src="https://i0.hdslb.com/bfs/article/628ddc5a1ed65c779e50866123428caa645325325.png" alt="image.png">​</p><p>前9个字符：<br><img src="https://i0.hdslb.com/bfs/article/748711647931e13cff80dc91b53d6f4d645325325.png" alt="image.png"></p><p>显示多个文件的前3行：<br><img src="https://i0.hdslb.com/bfs/article/bb0346a3d0198ebdcac9c465ebd06d91645325325.png" alt="image.png"></p><p>不带文件名标识：<br>​<img src="https://i0.hdslb.com/bfs/article/9306c129fd2e0990617f91ed4e3cae37645325325.png" alt="image.png">​</p><h1 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h1><p>tail命令：显示文件尾部内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：tail [选项]... [文件]...</span><br><span class="line">显示每个指定文件的最后 10 行并输出至标准输出。</span><br><span class="line">若指定了多于一个文件，程序会在每段输出的开始添加相应文件名作为头。</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">  -c  输出最后几个字符</span><br><span class="line">  -f  随文件增长即时输出新增数据</span><br><span class="line">  -n  指定行数</span><br><span class="line">  -q  不输出文件名的头</span><br></pre></td></tr></table></figure><p>默认显示文件末尾的后10行：<br><img src="https://i0.hdslb.com/bfs/article/760058922835ae0392df1576d65ade3b645325325.png" alt="image.png"></p><p>指定行数：<br><img src="https://i0.hdslb.com/bfs/article/191c8af1d9290476ca1931a4720a28d3645325325.png" alt="image.png"></p><p>一次查看多个文件：<br><img src="https://i0.hdslb.com/bfs/article/810017a175a1b00e675bb995c0c31fa6645325325.png" alt="image.png"></p><p>不显示文件名：<br><img src="https://i0.hdslb.com/bfs/article/fc767b2a3c8dae29f4b833f37fc6f05b645325325.png" alt="image.png"></p><p>‍</p><p>监控文件变化：<br>在窗口1中：<br><img src="https://i0.hdslb.com/bfs/article/441f2777dfe4b4710fd363dea857e958645325325.png" alt="image.png"><br>在窗口2中：<br><img src="https://i0.hdslb.com/bfs/article/779dfa184751d98175a0e53afb5c68f1645325325.png" alt="image.png"><br>可以看到窗口1发生了变化：<br><img src="https://i0.hdslb.com/bfs/article/6071d01c59041ed2e73c44d58ec9559e645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/6f8ef8bf0b97285769d5171855ac5b6b645325325.jpg" alt="标头.jpg"></p><h1 id="nl命令"><a href="#nl命令" class="headerlink" title="nl命令"></a>nl命令</h1><p>nl命令是比较专业的显示行号的命令。<br>用法如下：</p><ul><li>nl -b a 所有行添加行号，包括空白行；</li><li>nl -b t 给行添加行号，不包括空白行（默认行为，和直接使用 nl 一样效果）；</li><li>nl -n ln 行号在自己栏位左侧显示；</li><li>nl -n rn 行号在自己栏位的右侧显示 ；</li><li>nl -n rz 显示行号，行号栏位不满时，自动补0 ；</li><li>nl -w 行号栏位的占用的位数。</li></ul><p>文件内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;system log out!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/04c9bdd7d809c9789377ce87a6dc823f645325325.png" alt="image.png"><br>执行以下命令：显示所有行的行号，包括空白行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -b a HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/25dc25ddd1d20ebca19d4da68bf966de645325325.png" alt="image.png"><br>执行以下命令：显示行号，不包括空白行。（<strong>这是一种默认的方式，和“nl HelloWorld.java”效果一样</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -b t HelloWorld.java</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/1ef677fe70db18fd0897c29c520f6933645325325.png" alt="image.png"><br>执行以下命令：行号在行号栏位左侧显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -n ln HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/8e1840ff081f533bf9e318767b2cf531645325325.png" alt="image.png"></p><p>‍</p><p>执行以下命令：行号在行号栏位右侧显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -n rn HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/dbf9bb157d15142016b8bd4077b6809b645325325.png" alt="image.png"><br>执行以下命令：行号栏位自动补0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -n rz HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/847b7ade0b93be536ce415b83f03fd25645325325.png" alt="image.png"><br>执行以下命令：设置栏位的字符数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl -n rz -w 3 HelloWorld.java</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/5ebac309050845fa419ae66204fbdfb9645325325.png" alt="image.png"></p><p>‍</p><h1 id="tailf命令"><a href="#tailf命令" class="headerlink" title="tailf命令"></a>tailf命令</h1><p>与tail -f不同的是，如果文件不增长，它不会去访问磁盘文件。tailf特别适合那些便携机上跟踪日志文件，因为它能省电，因为减少了磁盘访问。tailf命令不是个脚本，而是一个用C代码编译后的二进制执行文件，某些Linux安装之后没有这个命令。<br>CentOS系统是不支持该命令的，可以按照以下步骤添加这个命令：<br>第一步：cd命令切换到/usr/local目录下，新建tailf.c文件，该文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* tailf.c -- tail a log file and then follow it </span></span><br><span class="line"><span class="comment"> * Created: Tue Jan  9 15:49:21 1996 by faith@acm.org </span></span><br><span class="line"><span class="comment"> * Copyright 1996, 2003 Rickard E. Faith (faith@acm.org) </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a </span></span><br><span class="line"><span class="comment"> * copy of this software and associated documentation files (the &quot;Software&quot;), </span></span><br><span class="line"><span class="comment"> * to deal in the Software without restriction, including without limitation </span></span><br><span class="line"><span class="comment"> * the rights to use, copy, modify, merge, publish, distribute, sublicense, </span></span><br><span class="line"><span class="comment"> * and/or sell copies of the Software, and to permit persons to whom the </span></span><br><span class="line"><span class="comment"> * Software is furnished to do so, subject to the following conditions: </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be included </span></span><br><span class="line"><span class="comment"> * in all copies or substantial portions of the Software. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR </span></span><br><span class="line"><span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, </span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL </span></span><br><span class="line"><span class="comment"> * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR </span></span><br><span class="line"><span class="comment"> * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, </span></span><br><span class="line"><span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR </span></span><br><span class="line"><span class="comment"> * OTHER DEALINGS IN THE SOFTWARE. </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * less -F and tail -f cause a disk access every five seconds.  This </span></span><br><span class="line"><span class="comment"> * program avoids this problem by waiting for the file size to change. </span></span><br><span class="line"><span class="comment"> * Hence, the file is not accessed, and the access time does not need to be </span></span><br><span class="line"><span class="comment"> * flushed back to disk.  This is sort of a &quot;stealth&quot; tail. </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span>  </span></span><br><span class="line"><span class="comment">//#include &quot;nls.h&quot;  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _(s) s  </span></span><br><span class="line">  </span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> <span class="title function_">filesize</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!stat(filename, &amp;sb)) <span class="keyword">return</span> sb.st_size;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tailf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> lines)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">char</span> **buffer;  </span><br><span class="line">    <span class="type">int</span>  head = <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span>  tail = <span class="number">0</span>;  </span><br><span class="line">    FILE *str;  </span><br><span class="line">    <span class="type">int</span>  i;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!(str = fopen(filename, <span class="string">&quot;r&quot;</span>))) &#123;  </span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, _(<span class="string">&quot;Cannot open \&quot;%s\&quot; for read\n&quot;</span>), filename);  </span><br><span class="line">    perror(<span class="string">&quot;&quot;</span>);  </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    buffer = <span class="built_in">malloc</span>(lines * <span class="keyword">sizeof</span>(*buffer));  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lines; i++) buffer[i] = <span class="built_in">malloc</span>(BUFSIZ + <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (fgets(buffer[tail], BUFSIZ, str)) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (++tail &gt;= lines) &#123;  </span><br><span class="line">        tail = <span class="number">0</span>;  </span><br><span class="line">        head = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (head) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (i = tail; i &lt; lines; i++) <span class="built_in">fputs</span>(buffer[i], <span class="built_in">stdout</span>);  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tail; i++)     <span class="built_in">fputs</span>(buffer[i], <span class="built_in">stdout</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (i = head; i &lt; tail; i++)  <span class="built_in">fputs</span>(buffer[i], <span class="built_in">stdout</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    fflush(<span class="built_in">stdout</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lines; i++) <span class="built_in">free</span>(buffer[i]);  </span><br><span class="line">    <span class="built_in">free</span>(buffer);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">char</span>       buffer[BUFSIZ];  </span><br><span class="line">    <span class="type">size_t</span>     osize, nsize;  </span><br><span class="line">    FILE       *str;  </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *filename;  </span><br><span class="line">    <span class="type">int</span>        count;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//setlocale(LC_ALL, &quot;&quot;);  </span></span><br><span class="line">    <span class="comment">//bindtextdomain(PACKAGE, LOCALEDIR);  </span></span><br><span class="line">    <span class="comment">//textdomain(PACKAGE);  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;  </span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, _(<span class="string">&quot;Usage: tailf logfile\n&quot;</span>));  </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    filename = argv[<span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    tailf(filename, <span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (osize = filesize(filename);;) &#123;  </span><br><span class="line">    nsize = filesize(filename);  </span><br><span class="line">    <span class="keyword">if</span> (nsize != osize) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!(str = fopen(filename, <span class="string">&quot;r&quot;</span>))) &#123;  </span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, _(<span class="string">&quot;Cannot open \&quot;%s\&quot; for read\n&quot;</span>), filename);  </span><br><span class="line">        perror(argv[<span class="number">0</span>]);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (!fseek(str, osize, SEEK_SET))  </span><br><span class="line">                <span class="keyword">while</span> ((count = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), str)) &gt; <span class="number">0</span>)  </span><br><span class="line">                    fwrite(buffer, <span class="number">1</span>, count, <span class="built_in">stdout</span>);  </span><br><span class="line">        fflush(<span class="built_in">stdout</span>);  </span><br><span class="line">        fclose(str);  </span><br><span class="line">        osize = nsize;  </span><br><span class="line">    &#125;  </span><br><span class="line">    usleep(<span class="number">250000</span>);     <span class="comment">/* 250mS */</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>‍</p><p>第二步：首先确保当前目录在/usr/local下，如果不在该目录下，请使用cd命令切换到/usr/local。然后编译c语言程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# gcc -o /usr/bin/tailf tailf.c</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/b1fa90aa92220a0587e00e2d5a40988c645325325.png" alt="image.png"><br>出现以上提示信息表示当前系统中没有gcc编译器，需要安装，输入y表示同意安装，再有提示，则继续输入y即可。<br>第三步：测试tailf命令是否可用，直接输入tailf会出现以下提示，表示tailf命令可以使用了。<br><img src="https://i0.hdslb.com/bfs/article/9ddcc52eb101633f4b848009c71d5167645325325.png" alt="image.png"><br>tailf命令和“tail -f”一个效果，都是用来实时监控文件变动的。只不过tailf是专业的只负责监控日志文件变化的一个命令。我们来测试一下。<br>日志文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">日志信息第1行</span><br><span class="line">日志信息第2行</span><br><span class="line">日志信息第3行</span><br><span class="line">日志信息第4行</span><br><span class="line">日志信息第5行</span><br><span class="line">日志信息第6行</span><br><span class="line">日志信息第7行</span><br><span class="line">日志信息第8行</span><br><span class="line">日志信息第10行</span><br><span class="line">日志信息第11行</span><br><span class="line">日志信息第12行</span><br><span class="line">日志信息第13行</span><br><span class="line">日志信息第14行</span><br><span class="line">日志信息第15行</span><br><span class="line">日志信息第16行</span><br><span class="line">日志信息第17行</span><br><span class="line">日志信息第18行</span><br><span class="line">日志信息第19行</span><br><span class="line">日志信息第20行</span><br></pre></td></tr></table></figure><p>‍</p><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailf localhost.log</span><br></pre></td></tr></table></figure><p>执行结果：<br><img src="https://i0.hdslb.com/bfs/article/e1ae18eccfb0e162eb8a5a2a63dcd731645325325.png" alt="image.png"><br>可以再开启一个新的命令窗口，然后向日志文件中追加内容，如下：<br><img src="https://i0.hdslb.com/bfs/article/4c0db171d43bdbd042374a938184a785645325325.png" alt="image.png"><br>这时可以看到tailf命令窗口如下：<br><img src="https://i0.hdslb.com/bfs/article/2b8fdd7597e9bf29955ec9dd68ee0c2b645325325.png" alt="image.png"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 系统命令</title>
      <link href="/posts/33222.html"/>
      <url>/posts/33222.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip info faa-horizontal animated"><p>唯有读第一流的书，才有希望当第二流的人。读书一事，不可求全，贪多嚼不烂，以精读为上，细嚼慢咽，真正把一本经典的精妙，全部吃进肚子里，将那些美好的意象、真知灼见的道理、隐匿于句章之间的精气神，一一化为己用，这才叫读书，否则只是翻书，翻过千万卷，撑死也是个两脚书柜</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="系统当前时间"><a href="#系统当前时间" class="headerlink" title="系统当前时间"></a>系统当前时间</h1><p>date命令：<br><img src="https://i0.hdslb.com/bfs/article/ac61633c6ae8381cbdba4e4e1a365039645325325.png" alt="image.png"></p><h1 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h1><p>su 用户名<br><img src="https://i0.hdslb.com/bfs/article/195d2457c60523f3e492a6aa6de711eb645325325.png" alt="image.png"></p><p><strong>sudo 命令</strong>：表示使用超级管理员身份执行该命令，如果你当前不是管理员，希望以管理员身份执行某个命令时，使用sudo，需要输入超级管理员的密码：<br>​<img src="https://i0.hdslb.com/bfs/article/8ae892174264e9a3695a0773ea27906b645325325.png" alt="image.png">​</p><h1 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h1><h2 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello, world!&quot;</span><br></pre></td></tr></table></figure><p>这将会输出 <code>Hello, world!</code> 和一个换行符。<br><img src="https://i0.hdslb.com/bfs/article/53e1d0ba3a68e17f6455809eea3930b8645325325.png" alt="image.png"></p><h2 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;John&quot;</span><br><span class="line">echo &quot;My name is $name&quot;</span><br></pre></td></tr></table></figure><p>这将会输出 <code>My name is John</code> 和一个换行符。在输出字符串时，使用 <code>$</code> 符号加上变量名即可。<br><img src="https://i0.hdslb.com/bfs/article/2166f1455c5c0ac2125a191be7d06fae645325325.png" alt="image.png"></p><h2 id="输出多行"><a href="#输出多行" class="headerlink" title="输出多行"></a>输出多行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;line 1</span><br><span class="line">line 2</span><br><span class="line">line 3&quot;</span><br></pre></td></tr></table></figure><p>这将会输出三行文本，每行一条。<br><img src="https://i0.hdslb.com/bfs/article/e4619d8953584dd006d02f0eb32a3200645325325.png" alt="image.png"></p><h2 id="输出特殊字符"><a href="#输出特殊字符" class="headerlink" title="输出特殊字符"></a>输出特殊字符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Line 1\nLine 2\tTable&quot;</span><br></pre></td></tr></table></figure><p>这将会输出两行文本，第一行后接一个换行符，第二行中的 <code>Table</code>​前有一个制表符。<br>​<img src="https://i0.hdslb.com/bfs/article/cb233822092d2cb40786e120435620c9645325325.png" alt="image.png">​</p><h1 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a>sort命令</h1><p>sort命令可以对文件中的内容以“行”为单位进行升序和降序排列：<br>a.txt 文件内容如下：<br>![image.png](</p><p>升序：<br><img src="https://i0.hdslb.com/bfs/article/6f4c739cf1cc27940d492f0c4efad14f645325325.png" alt="image.png"></p><p>降序：<br><img src="https://i0.hdslb.com/bfs/article/5f45d05deabeea99c14d5db1b8691493645325325.png" alt="image.png"></p><p>将文件中的内容当做数字进行排序（不再当做字符串）：<br>a.txt文件内容：<br>​<img src="https://i0.hdslb.com/bfs/article/e6c4438adc4d9726f246697f506ac3d0645325325.png" alt="image.png"><br>当做数字进行排序：<br>​<img src="https://i0.hdslb.com/bfs/article/c2eb0b177073d226c72d9585e8106221645325325.png" alt="image.png">​</p><h1 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h1><p>diff命令可以用来比较两个文件的不同之处：</p><p>a.txt文件内容如下：<br><img src="https://i0.hdslb.com/bfs/article/d05dd81c7f9486b03f2a6ac7b89eaa8b645325325.png" alt="image.png"></p><p>b.txt文件内容如下：<br><img src="https://i0.hdslb.com/bfs/article/551da25f8afd5d1af0c227642d309461645325325.png" alt="image.png"></p><p>比较a.txt和b.txt文件之间的区别：<br><img src="https://i0.hdslb.com/bfs/article/f5b1f81910c8a1c9afdccc785f1cd689645325325.png" alt="image.png"></p><p>以上的比较结果中：1c1是什么含义？3c3,4是什么含义？<br>c 表示 change，改变的意思。<br>1c1表示：第一个文件的第1行 和 第二个文件的第1行 发生了改变。<br>3c3,4表示：第一个文件的第3行 和 第二个文件的第3,4行不同，发生了改变。</p><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><blockquote><p>：以覆盖的形式写到文件中。</p><blockquote><p>：以追加的形式写到文件中。<br>凡是在控制台上能够打印出来的，统一都可以重定向，可以将其打印到控制台的行为重定向到文件或其它设备。例如：<br>​<img src="https://i0.hdslb.com/bfs/article/921b645640b61541559c85634e447dc3645325325.png" alt="image.png"><br>将 ls -al的执行结果重定向到 ls.txt 文件中。<br>ls.txt文件内容如下：<br>​<img src="https://i0.hdslb.com/bfs/article/8ebb0775396b5b111250293fa4dadd8f645325325.png" alt="image.png"><br>以上方式是采用覆盖的方式，所谓覆盖方式指的是，每一次执行时，都会把 ls.txt 文件全部清空，然后重新写入。<br>如果要以追加的方式，则需要使用 &gt;&gt; ，这个可以自行测试一下。</p></blockquote></blockquote><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>&lt;：将文件内容输入给某个命令，这是一种默认的行为，通常 &lt; 是可以省略的。例如：<br>a.txt文件内容如下：<br><img src="https://i0.hdslb.com/bfs/article/5692a23ede05eae65d8b8cfbb82a7a5e645325325.png" alt="image.png"><br>将 a.txt 文件中的内容输入给 sort命令：<br><img src="https://i0.hdslb.com/bfs/article/9b9fc69ce16a4b582589ee78dd591d45645325325.png" alt="image.png"></p><p>&lt;&lt;：可以接收键盘的输入，例如：<br>​<img src="https://i0.hdslb.com/bfs/article/464515490743cb3718030ac6960537f9645325325.png" alt="image.png"><br>EOF是一个结束符，随意的，当键盘输入EOF之后，键盘输入则自动结束，然后sort命令将键盘输入的内容进行排序。</p><h1 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h1><p>在某段内容中搜索<br>例如： grep 0 a.txt （在a.txt中搜索0）</p><p><code>grep</code> 是一个强大的命令行文本搜索工具，用于在文件中查找匹配的字符串或模式，并将匹配行作为输出。以下是 <code>grep</code> 命令的用法详解：</p><p>基本用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;pattern&#x27; file</span><br></pre></td></tr></table></figure><ul><li><code>&#39;pattern&#39;</code> 表示要匹配的字符串或模式。</li><li><code>file</code> 表示要搜索的文件名。如果不指定文件名，则 <code>grep</code> 命令会从标准输入中读取数据，等待用户输入并匹配字符串。</li></ul><p>搜索多个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;pattern&#x27; file1 file2</span><br><span class="line">grep &#x27;pattern&#x27; *.txt</span><br></pre></td></tr></table></figure><ul><li><code>file1</code> 和 <code>file2</code> 表示要搜索的多个文件名。也可以使用通配符 <code>*.txt</code> 搜索所有扩展名为 <code>.txt</code> 的文件。</li></ul><p>递归搜索目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &#x27;pattern&#x27; dir</span><br></pre></td></tr></table></figure><ul><li><code>-r</code> 表示递归搜索目录。</li><li><code>dir</code> 表示要搜索的目录。</li></ul><p>显示匹配行前的几行或后的几行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep -A 2 &#x27;pattern&#x27; file    # 显示匹配行后2行</span><br><span class="line">grep -B 2 &#x27;pattern&#x27; file    # 显示匹配行前2行</span><br><span class="line">grep -C 2 &#x27;pattern&#x27; file    # 显示匹配行前后各2行</span><br></pre></td></tr></table></figure><ul><li><code>-A</code> 表示显示匹配行后的几行。</li><li><code>-B</code> 表示显示匹配行前的几行。</li><li><code>-C</code> 表示同时显示匹配行前后的几行。这三个选项后面必须跟一个数字，表示要显示的行数。</li></ul><p>同时输出匹配结果的行号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n &#x27;pattern&#x27; file</span><br></pre></td></tr></table></figure><ul><li><code>-n</code> 表示只输出匹配结果所在的行号。</li></ul><p>忽略大小写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i &#x27;pattern&#x27; file</span><br></pre></td></tr></table></figure><ul><li><code>-i</code> 表示忽略大小写。</li></ul><p>找出不匹配的行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v &#x27;pattern&#x27; file</span><br></pre></td></tr></table></figure><ul><li><code>-v</code> 输出不匹配模式的行。</li></ul><p>使用正则表达式匹配：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &#x27;pattern&#x27; file</span><br></pre></td></tr></table></figure><ul><li><code>-E</code>​ 表示使用正则表达式匹配。</li></ul><h1 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h1><p>将前面命令的输出作为后面命令的输入，可以叠加，例如：<br>​<img src="https://i0.hdslb.com/bfs/article/447e8c686ee3c8a2198ddfbb7b88d5e9645325325.png" alt="image.png">​</p><h1 id="查看系统进程"><a href="#查看系统进程" class="headerlink" title="查看系统进程"></a>查看系统进程</h1><p>ps [命令参数]</p><p>常用参数：<br>-e :显示当前所有进程<br>-f :显示 UID,PPID,C 与 STIME 栏位信息</p><p><img src="https://i0.hdslb.com/bfs/article/fc861966f94e9e0543641fa67e1ecc73645325325.png" alt="image.png"></p><p>UID：该进程的所属用户<br>PID：进程id<br>PPID：父进程id<br>C：CPU使用百分比<br>STIME：启动时间<br>TTY：启动该进程的终端设备是哪个<br>TIME：耗费的CPU时间<br>CMD：该进程对应的命令</p><p>‍</p><h1 id="sleep命令"><a href="#sleep命令" class="headerlink" title="sleep命令"></a>sleep命令</h1><p>在 Linux 中，<code>sleep</code> 是一个常用的命令，用于暂停程序的执行一段时间。<code>sleep</code> 命令的基本语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sleep NUMBER[SUFFIX]</span><br></pre></td></tr></table></figure><p>其中，<code>NUMBER</code> 为需要暂停的时间，单位是秒；<code>SUFFIX</code> 则可以是以下之一：</p><ul><li><code>s</code> ：秒（默认）；</li><li><code>m</code> ：分；</li><li><code>h</code> ：小时；</li><li><code>d</code> ：日。</li></ul><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停 3 秒</span></span><br><span class="line">sleep 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停 1 分钟</span></span><br><span class="line">sleep 1m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停 2 小时</span></span><br><span class="line">sleep 2h</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂停 1 天</span></span><br><span class="line">sleep 1d</span><br></pre></td></tr></table></figure><p>启动sleep进程，暂停1天：<br><img src="https://i0.hdslb.com/bfs/article/c87876037465906bdf6cc2eae436437f645325325.png" alt="image.png"><br>启动sleep进程，在后台暂停1天：<br><img src="https://i0.hdslb.com/bfs/article/f8ca3cad697cf455be759a4362b2b3f7645325325.png" alt="image.png"><br>5277是这个sleep进程的id。</p><p>‍</p><h1 id="kill进程"><a href="#kill进程" class="headerlink" title="kill进程"></a>kill进程</h1><p>kill 进程号<br>kill -9 进程号（强行杀死）<br>killall 进程名</p><p>找到进程：<br><img src="https://i0.hdslb.com/bfs/article/71110f3e2f6b398b63247b0c887fa32f645325325.png" alt="image.png"></p><p>杀死进程：<br><img src="https://i0.hdslb.com/bfs/article/717e8b9e27caf7da3f3446d5dd061ddc645325325.png" alt="image.png"></p><p>杀死所有的sleep进程：<br><img src="https://i0.hdslb.com/bfs/article/e1749d06116b8f446f2991785c2e5157645325325.png" alt="image.png"></p><p>‍</p><h1 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h1><p><code>top</code> 命令是用于查看正在运行的系统进程信息的命令。它会<strong>实时</strong>动态地显示系统资源的使用情况，如 CPU 占用率、内存使用情况、进程情况等。通常用于系统监控和性能调优。</p><p><img src="https://i0.hdslb.com/bfs/article/c6f82c8f109fe009c786f161164df1db645325325.png" alt="image.png"></p><p>僵尸进程：在操作系统中，僵尸进程 (Zombie Process) 是指一个已经执行结束的进程，但其进程描述符仍然留在进程列表中，它不再执行任何其他操作，但仍然占用一定内存空间。<br>交换分区（Swap），也称虚拟存储器，是一种在计算机内存不足时，为了增加内存所采用的一种技术。当系统内存不足时，操作系统会把暂时不需要的内存数据和程序信息通过交换机制存储到硬盘上的交换分区中，以节省内存的使用，从而保证共享内存的进程正常运行。</p><p>q：退出top命令。</p><p>‍</p><h1 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h1><p><code>free</code>命令可以用于查看物理内存和交换分区的使用情况。下面是一条可能的 <code>free</code> 命令的输出结果的示例：</p><p><img src="https://i0.hdslb.com/bfs/article/670f00f44993a55e716b795683581250645325325.png" alt="image.png"></p><h1 id="uptime命令"><a href="#uptime命令" class="headerlink" title="uptime命令"></a>uptime命令</h1><p>显示系统运行时间：<br><img src="https://i0.hdslb.com/bfs/article/32c86fb2b8ae6e0e29fc902e8ee22c25645325325.png" alt="image.png"></p><p>‍</p><h1 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h1><p><code>df</code> 命令是 Linux 系统中的一个磁盘空间使用情况查询命令，用于显示当前文件系统的磁盘空间使用状况，以及文件系统的挂载点、磁盘大小、已用空间、可用空间、使用占比等信息。<code>df</code>命令是 “disk free” 的缩写。<br><img src="https://i0.hdslb.com/bfs/article/cd5a3f2c3eb72c572a7a306487d808f8645325325.png" alt="image.png"><br>对于程序员来说，应该重点关注以上红框中的内容，已用空间超过80%则需要重点注意，以防磁盘已满导致数据无法写入而丢失。</p><p>‍</p><h1 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h1><p><code>du</code>命令是 Linux 系统中的一个磁盘空间占用查询命令，用于显示文件或目录占用的磁盘空间大小。<code>du</code>命令是 “disk usage” 的缩写：<br><img src="https://i0.hdslb.com/bfs/article/74f2cae0173a56ba3dc45ab2f01c3444645325325.png" alt="image.png"><br>4表示占用4个字节的空间。</p><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><p>reboot</p><p>‍</p><h1 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h1><p>shutdown -h now<br>poweroff</p><p><code>shutdown -h now</code> 和 <code>poweroff</code> 都是用于关机的 Linux 命令，它们的区别如下：</p><ol><li><code>shutdown -h now</code> 命令会向系统发送信号，通知所有正在运行的进程停止运行，并保存当前的状态，然后关闭系统。通常会在关机前向所有用户发送通知消息。</li><li><code>poweroff</code> 命令相较于 <code>shutdown -h now</code> 更为强制，它会立即关闭系统电源，不会等待正在运行的进程结束。使用 <code>poweroff</code> 命令时需要特别小心，因为它可能会丢失尚未保存的数据。</li></ol><p>综上所述，<code>shutdown -h now</code> 命令会逐步关闭进程，允许程序释放资源并保存数据；而 <code>poweroff</code> 命令则会立即关闭系统电源，可能会丢失一些尚未保存的数据。因此，在正常关机的情况下，建议使用 <code>shutdown -h now</code> 命令；只有在意外情况下，比如系统出现严重故障等情况，才应该使用 <code>poweroff</code> 命令。</p><p>‍</p><h1 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h1><p>查看网卡的ip地址。在windows当中是：ipconfig。在linux当中是ifconfig。<br><img src="https://i0.hdslb.com/bfs/article/28c5b8f117a0c7857142204ef5f00fe2645325325.png" alt="image.png"></p><p>‍</p><h1 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h1><p>查看计算机之间是否可以正常通信<br>语法：</p><ul><li>ping ip地址</li><li>ping 域名</li></ul><p><img src="https://i0.hdslb.com/bfs/article/b939877ab678fe6f50a645d00e34b49c645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/e04f3b3d286276e2cc4f798e9f780b9e645325325.png" alt="image.png"></p><p>‍</p><h1 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h1><p>模拟用户访问，模拟浏览器行为。</p><ul><li>例如：curl <a href="http://www.baidu.com">http://www.baidu.com</a> （可以直接查看百度首页的前端代码。）</li></ul><p><code>curl</code> 命令是 Linux 系统中的一个用于发送 HTTP 请求的工具。它支持各种协议，包括 HTTP、HTTPS、FTP、IMAP、SMTP 等，可以用于从网络中获取数据、上传文件等。</p><p><code>curl</code> 命令的基本语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [options] &lt;URL&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>URL</code> 表示要请求的目标地址。</p><p><code>curl</code> 命令的常用选项如下：</p><ul><li><code>-i</code> ：显示响应头信息。</li><li><code>-I</code> ：只显示响应头信息，不显示响应体。</li><li><code>-X</code> ：设置请求方法，包括 GET、POST、PUT、DELETE 等。</li><li><code>-d</code> ：设置请求体数据（POST 请求）。</li><li><code>-H</code> ：设置请求头信息。</li><li><code>-o/-O</code> ：下载文件，并保存到本地。</li><li><code>-u</code> ：设置认证信息。</li><li><code>-A</code> ：设置 User-Agent。</li><li><code>-s</code> ：静默模式，不输出进度信息。</li></ul><p>以下是 <code>curl</code> 命令的一些使用示例：</p><ol><li>请求一个 URL 并输出响应信息：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.example.com</span><br></pre></td></tr></table></figure><ol><li>发送 POST 请求：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -d &quot;name=john&amp;age=30&quot; www.example.com/submit</span><br></pre></td></tr></table></figure><ol><li>下载一个文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O www.example.com/test.zip</span><br></pre></td></tr></table></figure><ol><li>设置请求头信息：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;User-Agent: Mozilla/5.0&quot; www.example.com</span><br></pre></td></tr></table></figure><p>总之，<code>curl</code> 命令是一个非常方便的工具，可以用于从网络中获取数据、上传文件等，并且支持多种协议和请求方式。需要注意的是，在实际使用 <code>curl</code> 命令时，还需要根据具体情况设置相应的选项和参数。</p><p>‍</p><h1 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h1><p>下载资源，语法：wget 资源地址<br>下载tomcat ：wget <a href="https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.20/bin/apache-tomcat-10.1.20.tar.gz">https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.20/bin/apache-tomcat-10.1.20.tar.gz</a></p><p><img src="https://i0.hdslb.com/bfs/article/5b884430cefadd738baab4f10480f22a645325325.png" alt="image.png"></p><p>下载结果：<br><img src="https://i0.hdslb.com/bfs/article/7aa9c0f4a48d1a70171f02a65248d667645325325.png" alt="image.png"></p><p>‍</p><h1 id="netstat查看网络连接状态及端口"><a href="#netstat查看网络连接状态及端口" class="headerlink" title="netstat查看网络连接状态及端口"></a>netstat查看网络连接状态及端口</h1><p>在实际开发中，netstat最常用的操作是查看网络连接情况。通过使用netstat命令，开发人员可以快速了解当前系统上的所有网络连接，包括正在监听的端口、建立的连接、连接状态等信息。这对于排查网络问题和监控系统状态非常有用。另外，netstat还可以用于检查网络安全，例如查看哪些端口正在被占用，是否有不安全的连接等。</p><p>以下是netstat命令的常用参数和用法：</p><ol><li>查看所有的网络连接状态：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -a</span><br><span class="line">netstat -an 添加-n参数的目的是：不将端口和IP地址转换为名称，而是直接显示数字格式的IP地址和端口号</span><br></pre></td></tr></table></figure><p><strong>LISTENING 状态</strong>：表示该端口已占用，正在监听，等待客户端的连接。<br><strong>CONNECTED状态</strong>：表示网络连接已建立，但并没有开始数据传输。<br><strong>ESTABLISHED 状态</strong>：表示网络已连接，数据正在传输中。<br><strong>TIME_WAIT 状态</strong>：表示连接已经被终止，在双方都完成数据传输后，该连接会进入<code>TIME_WAIT</code>状态，并等待一段时间后关闭。</p><ol><li>查看<strong>所有处于监听状态</strong>的连接：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -l</span><br></pre></td></tr></table></figure><ol><li>查看所有TCP连接状态：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -t</span><br></pre></td></tr></table></figure><ol><li>查看所有UDP连接状态：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -u</span><br></pre></td></tr></table></figure><ol><li>查看所有处于CONNECTED状态的连接：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -o</span><br></pre></td></tr></table></figure><ol><li>查看指定端口的网络连接状态：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 端口号</span><br></pre></td></tr></table></figure><p>例如，查看80端口的网络连接状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep :80</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章 磁盘与文件管理</title>
      <link href="/posts/15060.html"/>
      <url>/posts/15060.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip info faa-horizontal animated"><p>少年的肩膀，就该这样才对嘛，什么家国仇恨，浩然正气的，都不要急，先挑起清风明月、杨柳依依和草长莺飞，少年郎的肩头，本就应当满是美好的事物啊</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="windows和Linux磁盘管理的区别"><a href="#windows和Linux磁盘管理的区别" class="headerlink" title="windows和Linux磁盘管理的区别"></a>windows和Linux磁盘管理的区别</h2><h3 id="windows资源管理方式"><a href="#windows资源管理方式" class="headerlink" title="windows资源管理方式"></a>windows资源管理方式</h3><p><img src="https://i0.hdslb.com/bfs/article/a21d17262069dc999747d412e1e75776645325325.png" alt="image.png"></p><ul><li>系统一般安装在C盘</li><li>C盘下的”Windows”目录是操作系统的核心</li><li>C盘下的”Program Files”目录下安装软件</li><li>C盘下的”用户”目录是所有的用户，包括超级管理员也在其中</li><li>windows操作系统分为C盘、D盘、E盘等，每个磁盘下采用文档树的形式组织文件</li></ul><h3 id="Linux资源管理方式"><a href="#Linux资源管理方式" class="headerlink" title="Linux资源管理方式"></a>Linux资源管理方式</h3><p><img src="https://i0.hdslb.com/bfs/article/cab02e653fe467bc918337a044807a37645325325.png" alt="image.png"><br>linux操作系统采用一个文档树来组织所有的资源。<br>这棵树的根目录的名字叫做：/<br>/ 是一个目录名字，是linux操作系统中所有文件的根。<br>/ 目录下又有很多其他的子目录，比如：dev home lib …..</p><p>比较重要的几个目录概述：</p><ol><li>/bin目录：包含一些常用的二进制可执行文件，如cat、ls、mkdir、rm等。这些二进制文件在系统运行时始终可用，可以被任何用户运行。</li><li>/etc目录：包含了系统的大多数配置文件，如网络配置、用户登录信息、软件包安装配置等。大多数应用程序在安装后都会在这个目录下创建自己的子目录，以便存储自己的配置文件。</li><li>/home目录：包含Linux系统用户的家目录，每个用户的数据和个人文件都存放在这里。</li><li>/lib目录：包含一些共享库文件，应用程序可以通过这些共享库文件调用系统的功能，如libc.so，是C语言函数库的共享库。</li><li>/root目录：是系统管理者（超级用户）的家目录。</li><li>/tmp目录：是系统中的一个临时目录，所有用户都可以在这里创建临时文件，文件系统会定期清空该目录，以防止文件滞留。</li><li>/usr目录：包含系统启动后，所有用户能访问的应用程序和数据文件。</li><li>/var 目录：包含可变数据的文件。包括日志、数据库、Web服务器、邮件队列等文件。它是一个经常被修改的目录，如果在其他目录有可变数据的话，它们都应当被链接到 /var 中。</li></ol><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>在终端中输入该命令，可以查看当前所在位置，例如：<br><img src="https://i0.hdslb.com/bfs/article/2d5d514b5970307b876fdee0c380a772645325325.png" alt="image.png"><br>可以看到，当前所在位置是根目录。</p><h2 id="man和—help"><a href="#man和—help" class="headerlink" title="man和—help"></a>man和—help</h2><h3 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h3><p>man命令可以查看某个命令的具体用法，例如：man pwd。如果一个命令具体的用法你不知道的话，问那个男人就行了。<br>man命令怎么进行翻页？空格<br>man命令怎么退出？q</p><h3 id="—help参数"><a href="#—help参数" class="headerlink" title="—help参数"></a>—help参数</h3><p>—help，也可以查看一个命令的帮助，一次性列出。用法：touch —help</p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h3 id="ls-1"><a href="#ls-1" class="headerlink" title="ls"></a>ls</h3><p>ls命令是list的意思：列出，列表等。<br>通过ls命令可以查看当前目录下的子目录和子文件。例如：<br><img src="https://i0.hdslb.com/bfs/article/218c1b3c044ba85d97e12e898a6a20b7645325325.png" alt="image.png"></p><h3 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h3><p>a是all的意思，表示所有。<br>列出包含隐藏文件在内的所有的文件。（在Linux操作系统中隐藏文件的文件名通常以”.”开始）<br>​<img src="https://i0.hdslb.com/bfs/article/43eb43580ff8ad5ce4a3a8fe524d627e645325325.png" alt="image.png">​</p><h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><p>-l 参数表示使用长格式输出：long format<br>输出结果中每一列的含义如下：<br><img src="https://i0.hdslb.com/bfs/article/ebcbe2e619c8c230daa4b7a5b3d76998645325325.png" alt="image.png"></p><p>注意权限部分：<br><img src="https://i0.hdslb.com/bfs/article/f417d6df4b5430c52c17d36549003b2b645325325.png" alt="image.png"></p><p>ls -l 可以简写为：ll</p><h3 id="ls-al"><a href="#ls-al" class="headerlink" title="ls -al"></a>ls -al</h3><p>ls -al等同于：ls -a + ls -l的功能。<br>可以简写为：ll -a</p><h3 id="ll-a-home-powernode"><a href="#ll-a-home-powernode" class="headerlink" title="ll -a /home/powernode"></a>ll -a /home/powernode</h3><p>可以指定查看某个目录下的所有文件详情。</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>cd命令：change directory<br>cd命令用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 路径名</span><br></pre></td></tr></table></figure><p>cd .. 回到上级目录</p><p>cd ../.. 回到上级目录的上级目录</p><p>cd ~ 回到主目录</p><p>cd / 回到根目录</p><p>cd /home/powernode 切换到 /home/powernode目录下</p><p>cd abc 切换到当前目录下的abc目录中</p><ul><li>这里的abc没有以 / 开始，表示这个路径是相对路径，相对路径指的是从当前所在目录作为起点开始找。</li><li>以 / 开始的路径被称为绝对路径。</li><li>cd 命令后面既可以是相对路径，也可以是绝对路径。只要路径正确即可。</li></ul><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h2><p>清屏</p><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h2><p>mkdir abc （mkdir是新建目录的命令，abc是一个目录名）<br>mkdir -p a/b/c （-p参数表示，一次创建多重目录）<br>mkdir -p a/kk/ff （虽然a已经存在了，但是不会报错，直接在a目录下新建kk目录，kk目录下新建ff目录。）</p><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>touch 文件名，例如：touch Hello.java 表示在当前目录下新建一个文件Hello.java<br>touch a.txt b.txt c.txt 一次性在当前目录下，新建多个文件，文件名之间采用空格分隔。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>用法：rm 文件名</p><p>rm a.txt（删除当前目录下的a.txt文件）。这种方式会询问，是否删除，输入y表示删除，输入n表示不删除。</p><p>不想让系统询问你是否删除，怎么进行强行删除呢？ -f 参数可以做到。</p><ul><li>rm -f a.txt（强行删除a.txt文件，不询问）</li></ul><p>删除多个文件</p><ul><li>rm -f b.txt c.txt （删除b.txt和c.txt文件）</li><li>rm -f *.java（删除所有.java结尾的文件，模糊匹配的方式。）</li></ul><h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><p>删除目录的时候，必须添加-r参数，这个-r表示删除一个目录，或者递归删除目录下的所有子目录以及子文件。<br>rm -r x（删除当前目录下的x目录，以及x目录下所有的子目录），但是这种方式需要用户自己输入y进行确认删除。<br>rm -rf x （强行删除x目录以及x目录下所有的子目录，并且不询问。包括子文件也全部删除。）</p><h2 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h2><p>cp a.txt aa.txt（复制当前目录下的a.txt文件，粘贴到当前目录下并且生成新文件aa.txt）</p><p>语法如下：</p><ul><li>cp file1 file2</li><li>file1就是被拷贝的文件</li><li>file2就是粘贴之后的文件</li><li>file1和file2可以添加路径。</li><li>cp 被拷贝文件的路径 粘贴到哪里的路径</li></ul><p>cp Hello2.java a/Hello3.java</p><h2 id="目录拷贝"><a href="#目录拷贝" class="headerlink" title="目录拷贝"></a>目录拷贝</h2><p>cp 目录名1 目录名2</p><ul><li>目录名1 是拷贝源</li><li>目录名2 是拷贝到哪里</li></ul><p>-rf （-r递归拷贝，-f强行拷贝）</p><p>cp -rf a abc（将当前目录下的a目录拷贝到当前目录下的abc目录当中）</p><p>cp -rf /home/powernode/a /home/powernode/x （将/home/powernode/a目录拷贝到/home/powernode/x目录下）</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p>mv Hello.java x（将当前目录下的Hello.java文件移动到x目录下）</p><p>mv /home/bjpowernode/Hello2.java /home/bjpowernode/x （将/home/bjpowernode/Hello2.java 移动到 /home/bjpowernode/x目录下）</p><p>mv x f（将x目录移动到f目录下）</p><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><p>在CentOS中，可以使用以下方式进行文件搜索：</p><ol><li>find命令：使用find命令可以在指定目录下搜索文件。可以使用不同的选项来指定搜索的文件类型、大小、修改时间等条件。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr/local -name &quot;catalina.out&quot;</span><br></pre></td></tr></table></figure><ol><li>whereis命令：使用whereis命令可以在系统中搜索指定的命令的位置。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis startup.sh</span><br></pre></td></tr></table></figure><ol><li>which命令：使用which命令也可以在系统中搜索指定的命令的位置。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which command</span><br></pre></td></tr></table></figure><h2 id="文件的inode号"><a href="#文件的inode号" class="headerlink" title="文件的inode号"></a>文件的inode号</h2><p>在Linux操作系统中，每一个文件都有自己的身份证号：inode号（index node：索引节点号）<br>每个文件都有自己的inode号，并且不会重复，在Linux操作系统中通过inode来区分两个文件。<br>查看文件的inode号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -i HelloWorld.java</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/article/4abf40fe4336fb8ee6aa82c371e5fc77645325325.png" alt="image.png">​</p><h1 id="软链接与硬链接"><a href="#软链接与硬链接" class="headerlink" title="软链接与硬链接"></a>软链接与硬链接</h1><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>软链接类似于windows操作系统中的快捷方式。</p><p>软链接的作用：方便操作。快捷。。。有些经常被操作的文件，藏的很深，每一次找很麻烦，怎么办，可以给这些经常操作的文件创建软链接。通过软链接快捷的操作目标文件。</p><p>怎么创建软链接呢（在linux当中怎么创建快捷方式呢）？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s HelloWorld.java HelloWorld.java2</span><br></pre></td></tr></table></figure><ul><li>表示给hello.java文件创建一个hello2.java的快捷方式（软链接）</li><li>hello.java是目标文件。hello2.java文件是软链接，属于快捷方式</li></ul><p>软链接和目标文件实际上是两个文件，在软链接中存储的是目标文件的路径。软链接关联的目标文件如果被删除，软链接这个快捷方式也就失效了。<br>可以通过查看inode号，来证明软链接是两个不同的文件：<br>​<img src="https://i0.hdslb.com/bfs/article/128750097ccb31a72d0938dd08818365645325325.png" alt="image.png">​</p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>怎么创建硬链接？（把软链接创建过程中的 -s 去掉就是创建硬链接的语法。）</p><p>创建硬链接的语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln HelloWorld.java HelloWorld.java2</span><br></pre></td></tr></table></figure><p>通过测试得知：inode号一致，说明创建的硬链接和原文件是同一个文件。<br><img src="https://i0.hdslb.com/bfs/article/b0b7bbdf6e0bae52be886703723318df645325325.png" alt="image.png"></p><p>通过操作硬链接，目标文件会改变吗？操作目标文件，硬链接会改变吗？ 答案是：当然会。</p><p>硬链接的特点：</p><ul><li>主要是用来做：重要文件备份。</li><li>目标文件删除之后，硬链接只要在，文件其实就没有被删除。或者说硬链接删除之后，目标文件还在。总结一句话：目标文件或者硬链接只要有一个存在，文件就没有被真正的删除。</li><li>硬链接机制和复制粘贴还不一样，复制粘贴之后的文件，修改其中之一，另一个不会变，但是硬链接就不一样了。</li></ul><h1 id="文件压缩与解压缩"><a href="#文件压缩与解压缩" class="headerlink" title="文件压缩与解压缩"></a>文件压缩与解压缩</h1><p>tar是在linux系统当中完成压缩和解压缩的命令。<br>压缩后的文件又被称为<strong>归档文件</strong>。</p><h2 id="tar命令详解"><a href="#tar命令详解" class="headerlink" title="tar命令详解"></a>tar命令详解</h2><p>tar命令语法格式： tar 参数 要压缩的或解压的文件或目录<br>tar命令的常用参数：</p><ul><li>z：指定是否使用gzip压缩方式压缩。（扩展名通常为：tar.gz。特点：速度最快）</li><li>j：是否需要用 bzip2 压缩方式压缩。（扩展名通常为：tar.bz2。特点：体积最小）</li><li>c：创建压缩（create）</li><li>x：解压缩</li><li>v：是否在压缩的过程中显示文件</li><li>f：指定归档文件名（file）。f参数后面必须紧跟文件名，不能在f参数后面再加其他参数。</li><li>t：查看 tarfile 里面的文件</li><li>C：指定解压到的具体目录。注意是大写C。</li></ul><p>注意：c、x、t，这三个参数不能共存，只能出现一个。</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>压缩一个文件</p><ul><li>tar -zcvf mytxt.tar.gz log1.txt</li></ul><p>压缩多个文件</p><ul><li>tar -zcvf mytxt2.tar.gz log1.txt log2.txt log3.txt</li><li>tar -zcvf mytxt3.tar.gz *.txt</li></ul><p>压缩目录</p><ul><li>tar -zcvf mytxt4.tar.gz test 【将test目录压缩为mytxt4.tar.gz】</li></ul><h2 id="查看归档文件"><a href="#查看归档文件" class="headerlink" title="查看归档文件"></a>查看归档文件</h2><ul><li>tar -tf mytxt.tar.gz</li></ul><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>tar -zxvf mytxt.tar.gz 【解压到当前目录下】<br>tar -zxvf mytxt.tar.gz -C test【将mytxt.tar.gz压缩包解压到test目录】</p><h1 id="文件编辑vi-amp-vim"><a href="#文件编辑vi-amp-vim" class="headerlink" title="文件编辑vi &amp; vim"></a>文件编辑vi &amp; vim</h1><h2 id="vi与vim概述"><a href="#vi与vim概述" class="headerlink" title="vi与vim概述"></a>vi与vim概述</h2><p>vi 和 vim 都是在 Linux 和 Unix 中常用的基于字符终端的文本编辑器。<br>vi 是 Unix 早期提供的标准命令行下的文本编辑器，是一款非常强大、高效的编辑器，可以对文本进行快速修改和编辑，具有常见编辑器的基本功能。<br>vim（Vi Improved）是在vi基础上进行了改进和扩展的一个版本，它保留了vi的全部功能，并添加了许多新功能，如基本的 GUI 界面、语法高亮、多级撤销/重做、对齐、插件支持等等。可以说 vim 是强大的文本编辑器之一，被众多的开发者、管理员、写作人员和爱好者使用。<br>通过 vi 和 vim 命令，我们可以在终端中打开并编辑文本文件，进行各种修改和编辑，保存后退出，是 Linux 和 Unix 系统中非常基础、常用的一种文本编辑方式。<br>总之，vi 和 vim 均是一款 Linux 和 Unix 中常用的基于字符终端的文本编辑器，其中 vim 是在 vi 基础上进行了改进和扩展的版本。</p><p>在 CentOS 中，系统默认安装的是 vim 编辑器，但是为了兼容 vi 编辑器的使用习惯，CentOS 将 vim 的执行文件命名为 vi。因此，实际上在 CentOS 中使用 vi 和 vim 是等价的，都是使用 vim 编辑器进行文本编辑。</p><h2 id="vi-编辑器使用"><a href="#vi-编辑器使用" class="headerlink" title="vi 编辑器使用"></a>vi 编辑器使用</h2><p>第一步：使用vi编辑器打开文件，语法：vi 文件的路径</p><ul><li>vi Hello.java（打开当前路径下的Hello.java）</li><li>vi /home/bjpowernode/Hello.java（打开/home/bjpowernode目录下的Hello.java文件。）</li></ul><p>第二步：编辑文件（vi编辑器为用户准备了两个模式）</p><ul><li>第一个模式：命令行模式。（此时键入的都是命令）</li><li>第二个模式：编辑模式。（此时键入的内容都会写入文件）</li><li>进入vi编辑器时是命令模式：键入i命令进入编辑模式</li><li>从编辑模式回到命令模式：按一下esc键</li></ul><p>第三步：保存。在命令模式下，输入以下命令：</p><ul><li>:wq  这是一个命令，这个命令可以保存并退出。</li><li>:q! 这是一个命令，这个命令可以强行退出vi编辑器，并且不保存。</li></ul><p>注意：vi编辑器打开的文件如果不存在，则自动新建。</p><h2 id="vi编辑器常用命令"><a href="#vi编辑器常用命令" class="headerlink" title="vi编辑器常用命令"></a>vi编辑器常用命令</h2><p>dd：删除光标所在行<br>yy：复制光标所在行到缓冲区<br>p：粘贴缓冲区中的内容<br>gg：光标回到文件第一行<br>GG：光标回到文件最后一行<br>^ ：光标移动至当前行的行首<br>$ ：光标移动至当前行的行尾<br>/关键字：按斜杠/键，可以输入想搜索的字符，然后确定进行搜索，如果第一次查找的关键字不是想要的，可以一直按 n 键往后查找到想要的关键字为止<br>o命令：在下一行插入。<br>x命令：命令行模式下，x命令会删除单个字符。<br>a命令：在光标后面插入。</p><h1 id="nano编辑器"><a href="#nano编辑器" class="headerlink" title="nano编辑器"></a>nano编辑器</h1><p>nano编辑器相对于vi编辑器来说出现的较晚，1999年诞生。vi编辑器时1976年诞生。nano编辑器更加简单一些。<br>以下是nano常用的快捷键，这些快捷键多数是无法在windows环境下使用的，也就是说在xshell中无法使用，因为和windows很多快捷键是冲突的，在linux环境中可以用：</p><ol><li>打开文件：nano Test.java</li><li>保存文件：ctrl + o</li><li>退出nano：ctrl + x</li><li>选中多个字符：shift + 左方向/右方向</li><li>剪切：ctrl + k</li><li>粘贴：ctrl + u</li><li>搜索：ctrl + w</li><li>替换：ctrl + \</li><li>复制选中的：alt + 6</li><li>撤销：alt + u</li><li>重做：alt + e</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章 环境准备</title>
      <link href="/posts/1210.html"/>
      <url>/posts/1210.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="tip info faa-horizontal animated"><p>自由看似条条框框但是总有一笔出头，牢笼看着透风却被罩住了头</p></div><p><a href="https://www.bilibili.com/video/BV1Nb421a7TV/?spm_id_from=333.999.list.card_archive.click"><br>    <img style="border: 1.5px solid #cbcbcb !important; max-width: 90%;"        src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/20240815134316.png"></a></p><h1 id="Linux-概述"><a href="#Linux-概述" class="headerlink" title="Linux 概述"></a>Linux 概述</h1><h2 id="常见的操作系统"><a href="#常见的操作系统" class="headerlink" title="常见的操作系统"></a>常见的操作系统</h2><p>操作系统可以分为多种类型，包括但不限于以下几种：</p><ol><li>Windows 操作系统：由微软公司开发的操作系统，广泛应用于个人电脑、服务器、游戏机等设备中。</li><li>win xp</li><li>win7/win8/win10/win11 等</li><li>Unix 操作系统（1960 年代诞生）：由贝尔实验室开发的一类操作系统，主要应用于服务器、工作站、超级计算机等领域，具有稳定、安全等特点。</li><li>Solaris：SUN 公司开发</li><li>AIX：IBM 开发</li><li>HP-UX：惠普公司开发</li><li>macOS：苹果公司开发，主要应用于苹果公司的电脑和笔记本电脑上</li><li>……</li><li><p>Linux 操作系统（1991 年诞生）：<strong>Linux 操作系统是一种开源的、免费的、类 UNIX 操作系统，用于服务器、工作站、超级计算机等领域。</strong></p></li><li><p>Debian：一种流行的稳定 Linux 操作系统</p></li><li><p>Ubuntu：基于 Debian 构建的一种流行的 Linux 桌面操作系统</p></li><li><p>Red Hat：一种商业 Linux 操作系统，由 Red Hat 公司开发</p></li><li><p>CentOS：通过重新编译 Red Hat 而得到的 Linux 操作系统，免费且源代码开放</p></li><li><p>Fedora：由 Red Hat 公司赞助的基于开源的 Linux 桌面和服务器操作系统</p></li><li><p>……</p></li><li><p>Chrome OS 操作系统：由 Google 公司开发的基于 Chrome 浏览器的操作系统，主要应用于 Chromebook 笔记本电脑上。</p></li><li><p>Android 操作系统：由 Google 公司开发的操作系统，主要应用于手机、平板电脑等移动设备中。</p></li><li><p>iOS 操作系统：由苹果公司开发的操作系统，主要应用于 iPhone、iPad 等移动设备中。</p></li><li><p>HarmonyOS 鸿蒙也是一种操作系统，由华为公司自主开发。</p></li></ol><p>‍</p><p>总之，不同的操作系统在不同的领域和设备中有各自的应用，针对不同的应用场景和需求，可以选择不同的操作系统进行应用和开发。</p><h2 id="Linux-发展史"><a href="#Linux-发展史" class="headerlink" title="Linux 发展史"></a>Linux 发展史</h2><p>Linux 操作系统的历史可以追溯到 1991 年，当时 Linus Torvalds（林纳斯·托瓦兹） 是一名芬兰赫尔辛基大学的学生，并且对 MINIX，一种类 UNIX 操作系统，感到不满意。他开始编写自己的操作系统内核，最终发布了第一个版本，命名为 Linux。从此，Linux 这个开源、自由和可定制化的操作系统内核就开始了它的发展之旅。</p><p><img src="https://i0.hdslb.com/bfs/article/0600441c59d3f76a09e43bd835c9db14645325325.png" alt="image.png"></p><p>以下是 Linux 操作系统的发展史中一些重要的时间节点和里程碑：</p><ul><li>1991 年：Linus Torvalds 发布 Linux 内核的第一个版本。</li><li>1992 年：大量的程序员和开发者开始参与到 Linux 的开发中，这使得 Linux 开始迅速发展，不断壮大。</li><li>1993 年：Debian（第一个社区驱动的 Linux 发行版）出现。</li><li>1994 年：Red Hat（最著名的商业 Linux 发行版）成立。Linux 社区也制定了第一个 Linux 标准基准（Linux Standard Base 1.0）。</li><li>1995 年：KDE 和 GNOME 两个桌面环境诞生。这标志着 Linux 开始关注桌面应用以及用户友好度。</li><li>1996 年：Apache 服务器成为主流 Web 服务器。</li><li>2003 年：SuSE 成为 Novell 公司的一部分，这是 Linux 巨头中第一家被收购的公司。</li><li>2008 年：Google 发布基于 Linux 的 Android 操作系统。</li><li>2011 年：Linux 内核 3.0 发布，该版本具有更好的性能、支持新的硬件技术和文件系统。</li><li>2015 年：微软宣布支持 Linux，并将一些 Linux 工具整合到他们的操作系统 Windows 10 中。</li><li>2018 年：Red Hat 被 IBM 收购，该交易是迄今为止 Linux 社区中最大的交易之一。</li><li>2020 年：Linux 内核 5.10 发布，具有改进的性能、新的安全功能和更好的硬件支持。</li></ul><p>总之，Linux 操作系统的发展史充满了许多令人惊叹的里程碑。它已成为了供应商和开发者的首选操作系统，全世界各个组织和机构都在使用 Linux 以及基于 Linux 的解决方案。</p><h1 id="安装-VMware"><a href="#安装-VMware" class="headerlink" title="安装 VMware"></a>安装 VMware</h1><p>安装 VMware 17。通过这个软件可以新建虚拟机。然后我们可以在虚拟机上安装操作系统 CentOS。<br><strong>第一步：双击安装</strong><br><img src="https://i0.hdslb.com/bfs/article/418d1c9390372740c2c5dd43289fd9d8645325325.png" alt="image.png"><br>可能会出现以下弹窗：弹窗后重启即可。<br><img src="https://i0.hdslb.com/bfs/article/89fce349dad95e6373fecce3efa51bd6645325325.png" alt="image.png"></p><p><img src="https://i0.hdslb.com/bfs/article/0f0aa028d1afe1e23c2d03aacb7f79cb645325325.png" alt="image.png"><br><strong>第二步：点击上图下一步，选择接受协议</strong><br><img src="https://i0.hdslb.com/bfs/article/06bd4feb2a4a50b841938d2fd37a671c645325325.png" alt="image.png"></p><p><strong>第三步：点击上图下一步</strong><br>​<img src="https://i0.hdslb.com/bfs/article/e29715a407f4c516e094800d7e60787d645325325.png" alt="image.png"><br><strong>第四步：点击上图下一步</strong><br>​<img src="https://i0.hdslb.com/bfs/article/aed23e36108fa75d4f3d3761191a92bc645325325.png" alt="image.png">​</p><p><strong>第五步：点击上图下一步</strong><br>​<img src="https://i0.hdslb.com/bfs/article/9307bbfbb5fd8dbc2738a8ffe3f0a1a7645325325.png" alt="image.png"><br><strong>第六步：点击上图下一步</strong><br>​<img src="https://i0.hdslb.com/bfs/article/bf07742f2de72cb626c005a499affa86645325325.png" alt="image.png">​</p><p><strong>第七步：点击安装</strong><br>​<img src="https://i0.hdslb.com/bfs/article/44ec549e37e50c2042e9ebd26d77c54b645325325.png" alt="image.png"><br>​<img src="https://i0.hdslb.com/bfs/article/5365fd9449914e70a62d38ea328e60ec645325325.png" alt="image.png">​</p><p><strong>第八步：点击完成，桌面上图标</strong><br>​<img src="https://i0.hdslb.com/bfs/article/1fd771fbbd16cbfe3668628b5d0daf0b645325325.png" alt="image.png"><br>到此虚拟机这个软件就安装成功了！！！！<br><strong>注意：该软件需要输入密钥，大家自己想办法获取，这个很容易的。</strong></p><p>‍</p><h1 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h1><p>虚拟机软件安装成功之后，就可以新建虚拟机了。一个虚拟机软件可以创建多个虚拟机，一个虚拟机就代表一台新的电脑。新建虚拟机的过程就相当于去电脑商城购买电脑是一样的。<br><strong>第一步：双击桌面图标，打开虚拟机软件，点击下图中的创建新的虚拟机</strong><br><img src="https://i0.hdslb.com/bfs/article/bdee02991d08bd7a67798d8d2d3e9b2d645325325.png" alt="image.png"><br><strong>第二步：选择自定义安装。了解更详细的过程</strong><br><img src="https://i0.hdslb.com/bfs/article/cbb05a69d5a80b69a63d9bac2c307dc2645325325.png" alt="image.png"></p><p><strong>第三步：选择硬件兼容性（默认选项即可）</strong><br>​<img src="https://i0.hdslb.com/bfs/article/cde8612c6cb95fb0262f6d47c6e87b52645325325.png" alt="image.png">​</p><p><strong>第四步：稍后安装操作系统，只创建一台裸机</strong><br>​<img src="https://i0.hdslb.com/bfs/article/aadeabeec21608fac44c8906b9dd42d0645325325.png" alt="image.png"><br><strong>第五步：选择操作系统类型</strong><br>​<img src="https://i0.hdslb.com/bfs/article/2958b55f6672ffc24cbe6ac34fc2a2e7645325325.png" alt="image.png">​</p><p><strong>第六步：给你的电脑起个名字，还有它放在哪里</strong><br>​<img src="https://i0.hdslb.com/bfs/article/e4adee7574cfdc2f80aa791e3fe9fce2645325325.png" alt="image.png"><br><strong>第七步：设置电脑的 CPU 数量</strong><br>​<img src="https://i0.hdslb.com/bfs/article/2d35a35909d79ec8fa05fd6fbe6b7d5d645325325.png" alt="image.png">​</p><p><strong>第八步：设置内存大小</strong><br>​<img src="https://i0.hdslb.com/bfs/article/1bfb502cf4d68d681c7f2757fef16a6c645325325.png" alt="image.png">​</p><p><strong>第九步：指定网络连接方式为 NAT</strong><br>​<img src="https://i0.hdslb.com/bfs/article/f6000e113ea97e584a2c0ae16f664d5d645325325.png" alt="image.png">​</p><p>在创建虚拟机时，网络连接模式有桥接模式和 NAT 模式，应该根据个人实际需求来选择。</p><ul><li>桥接模式：虚拟机会直接接入宿主机网络中，相当于虚拟机相当于网络中的一个普通计算机，有自己的 ip 地址和 MAC 地址，可以访问网络上其他的设备。适用于需要虚拟机与宿主机处于同一网段的场景，如测试、网络应用开发等。</li><li>NAT 模式：虚拟机通过虚拟化的 NAT 网络与宿主机连接，宿主机向虚拟机提供网络访问能力，虚拟机之间不能相互访问。NAT 模式适用于虚拟机需要访问外部网络，但只有一个公共 IP 地址的情况下使用。</li></ul><p>总之，根据个人实际需求来选择适合自己的网络连接模式，有需要虚拟机与宿主机处于同一网段的情况选桥接模式，有需要虚拟机访问外部网络的情况选 NAT 模式。</p><p>‍</p><p><strong>第十步：选择 IO 控制器类型（默认即可）</strong><br><img src="https://i0.hdslb.com/bfs/article/966c115674837a63dd101d7e4655b54a645325325.png" alt="image.png"><br><strong>第十一步：选择硬盘类型（默认即可）</strong><br><img src="https://i0.hdslb.com/bfs/article/ef5d14bc9b26dfea3b81dc6bd7054bc7645325325.png" alt="image.png"></p><p><strong>第十二步：选择创建新的虚拟磁盘</strong><br>​<img src="https://i0.hdslb.com/bfs/article/c92a40511576da222a5f0b8b743ab355645325325.png" alt="image.png"><br><strong>第十三步：指定硬盘容量</strong><br>​<img src="https://i0.hdslb.com/bfs/article/80a62f56840d5e84f9132ef937adf1e6645325325.png" alt="image.png">​</p><p><strong>第十四步：指定硬盘对应的文件</strong><br>​<img src="https://i0.hdslb.com/bfs/article/4516e3b090a1f12f50b7a47a5e57e9dd645325325.png" alt="image.png"><br><strong>第十五步：已准备好，查看电脑的配置，感觉不行的话，可以点击下图自定义硬件进行修改配置。</strong><br>​<img src="https://i0.hdslb.com/bfs/article/d04e086cca89a465521cbffafb169dd8645325325.png" alt="image.png">​</p><p><strong>第十六步：点击完成</strong><br>​<img src="https://i0.hdslb.com/bfs/article/e59f5d8fc2e2e9693313413b1d1b5abd645325325.png" alt="image.png"><br>到此为止相当于你已经购买了一台新电脑了，只不过这个电脑中还没有任何操作系统，只是一台裸机。接下来你需要安装操作系统。</p><p>‍</p><h1 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h1><p>安装操作系统之前，你需要先下载这个操作系统的镜像文件：<br><img src="https://i0.hdslb.com/bfs/article/caeeae28baf93594cacaefdea3ec7c9d645325325.png" alt="image.png"><br>这个文件其实就相当于现实生活中的系统盘（光盘）。把这个文件放到虚拟机的 DVD 当中：<br><img src="https://i0.hdslb.com/bfs/article/79f0da39c65b647ac36b39f53fd1f67d645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/57722227cc95e80b6e94c0a5f30ac2fc645325325.png" alt="image.png"></p><p>点击确定，如下图：<br>​<img src="https://i0.hdslb.com/bfs/article/796518e5ed7879cf7f17927e6c877c41645325325.png" alt="image.png"><br>接下来点击：开启此虚拟机（相当于现实生活中电脑通电）：<br>​<img src="https://i0.hdslb.com/bfs/article/56ced699a338c3550c682192f83d1828645325325.png" alt="image.png"><br>按照下面一步一步安装操作系统：<br>按上下键，移动到：Install CentOS Stream 9，然后回车。<br><strong>注意：从虚拟机中释放鼠标的组合键是 ctrl + alt</strong><br>​<img src="https://i0.hdslb.com/bfs/article/f1ec35985453268fcce11092fcd95403645325325.png" alt="image.png">​</p><p>正在安装：<br>​<img src="https://i0.hdslb.com/bfs/article/8ca013afd3a6bc2c25f480adbf121117645325325.png" alt="image.png"><br>语言选择：简体中文，英文不错的话，可以使用英文，都可以<br>​<img src="https://i0.hdslb.com/bfs/article/db4e3ba5fcb7202690dfa36123d5e1fa645325325.png" alt="image.png">​</p><p>接下来，要处理三件事：<br>第一个：安装目的地<br>第二个：设置 root 密码<br>第三个：软件选择<br>​<img src="https://i0.hdslb.com/bfs/article/aaa40337c5366defcfdab1d2c1f1c1d2645325325.png" alt="image.png"><br>安装目的地，默认即可，点击完成：<br>​<img src="https://i0.hdslb.com/bfs/article/562c9dc47af820381c4d9fd93e27db3a645325325.png" alt="image.png"><br>设置 root 密码时允许 root 远程 SSH 登录：<br>​<img src="https://i0.hdslb.com/bfs/article/e795fcd5028d7bebf2e9a2d859c1f99b645325325.png" alt="image.png">​</p><p>软件选择：<br>​<img src="https://i0.hdslb.com/bfs/article/92834c5b2b42508caeb1870dcb369817645325325.png" alt="image.png"><br>点击开始安装：<br>​<img src="https://i0.hdslb.com/bfs/article/a670b8cc72b9e6ee5123a3e41fcc3531645325325.png" alt="image.png">​</p><p>安装中，请稍后：<br>​<img src="https://i0.hdslb.com/bfs/article/aa13b35606e774c550a58407c3d3b995645325325.png" alt="image.png"><br>安装完成后，点击右下角的重启系统即可！！！</p><p>‍</p><h1 id="配置操作系统"><a href="#配置操作系统" class="headerlink" title="配置操作系统"></a>配置操作系统</h1><p>点击下图的开始配置：<br><img src="https://i0.hdslb.com/bfs/article/8de23f9097da076bcab851f55890129e645325325.png" alt="image.png"><br>设置定位服务，这属于隐私，可以打开，也可以关闭：<br><img src="https://i0.hdslb.com/bfs/article/594150724a0851d621ff02c85a6fb978645325325.png" alt="image.png"></p><p>设置在线账号，这里跳过：<br>​<img src="https://i0.hdslb.com/bfs/article/e3bfe296cf034e033bbaef33fe9d5dad645325325.png" alt="image.png">​</p><p>这是开启除了 root 管理员之外，开启的其他账户：<br>​<img src="https://i0.hdslb.com/bfs/article/1ae2e3c1563197bf4744fa5bfe14020c645325325.png" alt="image.png"><br>设置密码：<br>​<img src="https://i0.hdslb.com/bfs/article/4d91a5fa9e1acbe937db0ad1cf4979b5645325325.png" alt="image.png">​</p><p>完成，点击开始使用：<br>​<img src="https://i0.hdslb.com/bfs/article/65839dd9cc15cb99ce25effda3c75cb8645325325.png" alt="image.png"><br>记得查看一下网络是否正常：<br>​<img src="https://i0.hdslb.com/bfs/article/a7134a6a611fd21ddae08bb531159e32645325325.png" alt="image.png">​</p><p>‍</p><h1 id="xshell-的安装与使用"><a href="#xshell-的安装与使用" class="headerlink" title="xshell 的安装与使用"></a>xshell 的安装与使用</h1><p>Xshell 是一款用于在本地计算机上远程连接到服务器，并进行命令操作，文件管理等功能的 SSH 客户端软件。<br><strong>在 Xshell 中编写 Linux 命令和在 Linux 系统中的终端上编写命令是一样的。</strong></p><h2 id="xshell-的安装"><a href="#xshell-的安装" class="headerlink" title="xshell 的安装"></a>xshell 的安装</h2><p>第一步：双击安装<br><img src="https://i0.hdslb.com/bfs/article/164bf5ffe84da1dc61f29d1fec053fcb645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/838930d10ee65b4b5b02785c01a41354645325325.png" alt="image.png"></p><p>第二步：点击下一步<br><img src="https://i0.hdslb.com/bfs/article/fa8d9d758d176d0109cb928055219303645325325.png" alt="image.png"></p><p>第三步：接受许可证协议<br><img src="https://i0.hdslb.com/bfs/article/dd15c89aa6420360f97b331d73a52697645325325.png" alt="image.png"></p><p>‍</p><p>第四步：选择安装位置<br><img src="https://i0.hdslb.com/bfs/article/67b3d7f13e9d2e04099f3dfbb69a4565645325325.png" alt="image.png"></p><p>第五步：选择程序文件夹<br><img src="https://i0.hdslb.com/bfs/article/fde19a4ae0e9ec47905f7097f3c90534645325325.png" alt="image.png"></p><p>‍</p><p>第六步：安装<br><img src="https://i0.hdslb.com/bfs/article/74b29bc311d3f719550cf02bbd061d15645325325.png" alt="image.png"></p><p>‍</p><p>第七步：完成<br><img src="https://i0.hdslb.com/bfs/article/afffe266d3d47682ba134d5bfafd8294645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/aa43772c7283d1f46bf4c013122675bb645325325.png" alt="image.png"></p><p>‍</p><h2 id="xshell-的使用"><a href="#xshell-的使用" class="headerlink" title="xshell 的使用"></a>xshell 的使用</h2><p>第一步：使用终端的 ifconfig 命令查看服务器的 IP 地址：<br><img src="https://i0.hdslb.com/bfs/article/bd1ac7dc9bbbad651a3d68c28164e975645325325.png" alt="image.png"></p><p>第二步：新建会话<br>​<img src="https://i0.hdslb.com/bfs/article/2dd7eec2859a92b3fe3ba00c5fd5ed44645325325.png" alt="image.png">​</p><p>第三步：设置连接属性<br>​<img src="https://i0.hdslb.com/bfs/article/03e79c75f2be5541e34104151ef671be645325325.png" alt="image.png">​</p><p>第四步：设置用户身份验证<br>​<img src="https://i0.hdslb.com/bfs/article/0bdc9de48caa966607a751cddca21706645325325.png" alt="image.png">​</p><p>第五步：设置外观<br>​<img src="https://i0.hdslb.com/bfs/article/e13136516c69d91891ff01e998195b74645325325.png" alt="image.png">​</p><p>第六步：接受并保存（安全警告）<br>​<img src="https://i0.hdslb.com/bfs/article/c1408068556888ddcb9d6478d910e8a0645325325.png" alt="image.png">​</p><p>使用 xshell 就像在使用终端是一样的。</p><p>‍</p><h1 id="xftp-的安装与使用"><a href="#xftp-的安装与使用" class="headerlink" title="xftp 的安装与使用"></a>xftp 的安装与使用</h1><p>Xftp 是一款功能强大的 Windows 环境下的 FTP 客户端软件，用于在本地计算机与远程 FTP 服务器之间进行文件传输。</p><h2 id="xftp-的安装"><a href="#xftp-的安装" class="headerlink" title="xftp 的安装"></a>xftp 的安装</h2><p>第一步：双击安装包<br><img src="https://i0.hdslb.com/bfs/article/d9d322c759d6a7ed12f24f0cbee6ff34645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/787cd0f97c61957866bf8aa78574169a645325325.png" alt="image.png"></p><p>第二步：接受协议<br><img src="https://i0.hdslb.com/bfs/article/4e8b9775d8ac3ac1d672dcdeb0f09a48645325325.png" alt="image.png"></p><p>‍</p><p>第三步：设置安装位置<br><img src="https://i0.hdslb.com/bfs/article/c4132c6c9fa7cab6877e1ce4ff910d90645325325.png" alt="image.png"></p><p>第四步：选择程序文件夹<br><img src="https://i0.hdslb.com/bfs/article/498575fc2cfa8ae7d4ee7cbb9e62f35e645325325.png" alt="image.png"></p><p>‍</p><p>第五步：完成<br><img src="https://i0.hdslb.com/bfs/article/968430fbf8dcc02acf2edf3c6f6b8ca1645325325.png" alt="image.png"></p><p>‍</p><h2 id="xftp-的使用"><a href="#xftp-的使用" class="headerlink" title="xftp 的使用"></a>xftp 的使用</h2><p>第一步：新建会话<br><img src="https://i0.hdslb.com/bfs/article/1ad03b167d459966dfcc6f4b2b0c11cf645325325.png" alt="image.png"><br><img src="https://i0.hdslb.com/bfs/article/18b452fa26d80ab228b99f3c4d6519c5645325325.png" alt="image.png"></p><p>‍</p><p>第二步：接受并保存<br><img src="https://i0.hdslb.com/bfs/article/555ba54f90c8aaa12aafc2174de3774e645325325.png" alt="image.png"></p><p>第三步：拖拽上传<br><img src="https://i0.hdslb.com/bfs/article/9503e983e6151777553c6a6d6b51d3c1645325325.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA安装后的设置</title>
      <link href="/posts/5109.html"/>
      <url>/posts/5109.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p><img src="https://i0.hdslb.com/bfs/article/550ed5f2d7d4a3e4486d6af342e9331d645325325.png" alt="">​</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p><img src="https://i0.hdslb.com/bfs/article/ee854b4088f0c221272f7498c445703a645325325.png" alt="">​</p><h2 id="第三部"><a href="#第三部" class="headerlink" title="第三部"></a>第三部</h2><p><img src="https://i0.hdslb.com/bfs/article/f91ae7aeac3307075e94b5fe05ceba11645325325.png" alt="">​</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p><img src="https://i0.hdslb.com/bfs/article/396d5c4d3338f61b445b8cfeaf7bbc55645325325.png" alt="">​</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK 1.8 的安装</title>
      <link href="/posts/47295.html"/>
      <url>/posts/47295.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>地址：<a href="https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase9-archive-downloads.html</a></p><h1 id="jdk？jre？jvm？"><a href="#jdk？jre？jvm？" class="headerlink" title="jdk？jre？jvm？"></a>jdk？jre？jvm？</h1><ul><li>Java development kit             java开发工具包  jdk</li><li>Java Runtime Environment  java运行环境  jre</li><li>Java Virtual Machine              java虚拟机  jvm</li></ul><h1 id="jdk安装方法：以下可以用来复制粘贴"><a href="#jdk安装方法：以下可以用来复制粘贴" class="headerlink" title="jdk安装方法：以下可以用来复制粘贴"></a>jdk安装方法：以下可以用来复制粘贴</h1><h2 id="1-新建系统变量：JAVA-HOME"><a href="#1-新建系统变量：JAVA-HOME" class="headerlink" title="1.新建系统变量：JAVA_HOME"></a>1.新建系统变量：JAVA_HOME</h2><p>路径取jdk路径</p><p><strong>E:\xxx\jdk1.8</strong></p><h2 id="2-在系统变量Path后面追加"><a href="#2-在系统变量Path后面追加" class="headerlink" title="2.在系统变量Path后面追加"></a>2.在系统变量Path后面追加</h2><p>%JAVA_HOME%\bin</p><p>%JAVA_HOME%\jre\bin</p><h2 id="3-添加classpath"><a href="#3-添加classpath" class="headerlink" title="3. 添加classpath"></a>3. 添加classpath</h2><p>CLASSPATH</p><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h2><ul><li>javac -version</li><li>javac 1.8.0_241</li></ul><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM 注册使用</title>
      <link href="/posts/32514.html"/>
      <url>/posts/32514.html</url>
      
        <content type="html"><![CDATA[<h2 id="VMware-Workstation-17-Pro-密钥"><a href="#VMware-Workstation-17-Pro-密钥" class="headerlink" title="VMware Workstation 17 Pro 密钥"></a>VMware Workstation 17 Pro 密钥</h2><ul><li>4A4RR-813DK-M81A9-4U35H-06KND</li><li>NZ4RR-FTK5H-H81C1-Q30QH-1V2LA</li><li>JU090-6039P-08409-8J0QH-2YR7F</li><li>4Y09U-AJK97-089Z0-A3054-83KLA</li><li>4C21U-2KK9Q-M8130-4V2QH-CF810</li><li>MC60H-DWHD5-H80U9-6V85M-8280D</li><li>ZA30U-DXF84-4850Q-UMMXZ-W6K8F</li><li>AC590-2XW97-48EFZ-TZPQE-MYHEA</li><li>YF39K-DLFE5-H856Z-6NWZE-XQ2XD</li><li>AC15R-FNZ16-H8DWQ-WFPNV-M28E2</li><li>CZ1J8-A0D82-489LZ-ZMZQT-P3KX6</li><li>YA11K-6YE8H-H89ZZ-EXM59-Y6AR0</li></ul><h2 id="VMware-Workstation16-密钥："><a href="#VMware-Workstation16-密钥：" class="headerlink" title="VMware Workstation16 密钥："></a>VMware Workstation16 密钥：</h2><ul><li>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</li><li>YF390-0HF8P-M81RQ-2DXQE-M2UT6</li><li>ZF71R-DMX85-08DQY-8YMNC-PPHV8</li></ul><h2 id="VMware-Workstation-Pro-15-激活许可证："><a href="#VMware-Workstation-Pro-15-激活许可证：" class="headerlink" title="VMware Workstation Pro 15 激活许可证："></a>VMware Workstation Pro 15 激活许可证：</h2><ul><li>UY758-0RXEQ-M81WP-8ZM7Z-Y3HDA</li><li>VF750-4MX5Q-488DQ-9WZE9-ZY2D6</li><li>UU54R-FVD91-488PP-7NNGC-ZFAX6</li><li>YC74H-FGF92-081VZ-R5QNG-P6RY4</li><li>YC34H-6WWDK-085MQ-JYPNX-NZRA2</li></ul><h2 id="VMware-Workstation-Pro-14-激活许可证："><a href="#VMware-Workstation-Pro-14-激活许可证：" class="headerlink" title="VMware Workstation Pro 14 激活许可证："></a>VMware Workstation Pro 14 激活许可证：</h2><ul><li>FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA</li><li>CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</li></ul><h2 id="VMware-Workstation-Pro-12-激活许可证："><a href="#VMware-Workstation-Pro-12-激活许可证：" class="headerlink" title="VMware Workstation Pro 12 激活许可证："></a>VMware Workstation Pro 12 激活许可证：</h2><ul><li>5A02H-AU243-TZJ49-GTC7K-3C61N</li><li>VF5XA-FNDDJ-085GZ-4NXZ9-N20E6</li><li>UC5MR-8NE16-H81WY-R7QGV-QG2D8</li><li>ZG1WH-ATY96-H80QP-X7PEX-Y30V4</li><li>AA3E0-0VDE1-0893Z-KGZ59-QGAVF</li></ul>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/posts/41070.html"/>
      <url>/posts/41070.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-卸载旧版"><a href="#1-卸载旧版" class="headerlink" title="1.卸载旧版"></a>1.卸载旧版</h1><p>首先如果系统中已经存在旧的Docker，则先卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine \</span><br><span class="line">    docker-selinux </span><br></pre></td></tr></table></figure><h1 id="2-配置Docker的yum库"><a href="#2-配置Docker的yum库" class="headerlink" title="2.配置Docker的yum库"></a>2.配置Docker的yum库</h1><p>首先要安装一个yum工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>安装成功后，执行命令，配置Docker的yum源（已更新为阿里云源）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新yum，建立缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br></pre></td></tr></table></figure><h1 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3.安装Docker"></a>3.安装Docker</h1><p>最后，执行命令，安装Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h1 id="4-启动和校验"><a href="#4-启动和校验" class="headerlink" title="4.启动和校验"></a>4.启动和校验</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="5-配置镜像加速"><a href="#5-配置镜像加速" class="headerlink" title="5.配置镜像加速"></a>5.配置镜像加速</h1><p>镜像地址可能会变更，如果失效可以百度找最新的docker镜像。</p><p>配置镜像步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://mirrors.sohu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="5-配置镜像加速-阿里云已停用）"><a href="#5-配置镜像加速-阿里云已停用）" class="headerlink" title="5.配置镜像加速(阿里云已停用）"></a>5.配置镜像加速(阿里云已停用）</h1><p>这里以阿里云镜像加速为例。</p><h2 id="5-1-注册阿里云账号"><a href="#5-1-注册阿里云账号" class="headerlink" title="5.1.注册阿里云账号"></a>5.1.注册阿里云账号</h2><p>首先访问阿里云网站:</p><p><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p>注册一个账号。</p><h2 id="5-2-开通镜像服务"><a href="#5-2-开通镜像服务" class="headerlink" title="5.2.开通镜像服务"></a>5.2.开通镜像服务</h2><p>在首页的产品中，找到阿里云的<strong>容器镜像服务</strong>：</p><p><img src="https://i0.hdslb.com/bfs/article/e5fdc96e9b7801cb735d9f6fcd550d9e645325325.png" alt="img"></p><p>点击后进入控制台：</p><p><img src="https://i0.hdslb.com/bfs/article/ca35f5110bac0e539cee2da0f91f6ea8645325325.png" alt="img"></p><p>首次可能需要选择立刻开通，然后进入控制台。</p><h2 id="5-3-配置镜像加速"><a href="#5-3-配置镜像加速" class="headerlink" title="5.3.配置镜像加速"></a>5.3.配置镜像加速</h2><p>找到<strong>镜像工具</strong>下的<strong>镜像**</strong>加速器**：</p><p><img src="https://i0.hdslb.com/bfs/article/ea9c66a01669367115d6679813ca63a7645325325.png" alt="img"></p><p>页面向下滚动，即可找到配置的文档说明：</p><p><img src="https://i0.hdslb.com/bfs/article/43a13114af74eb85fc1abba0b81ff607645325325.png" alt="img"></p><p>具体命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://xxxx.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下搭建Docker环境</title>
      <link href="/posts/52689.html"/>
      <url>/posts/52689.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-准备Linux环境"><a href="#1-准备Linux环境" class="headerlink" title="1.准备Linux环境"></a>1.准备Linux环境</h1><p>首先，我们要准备一个Linux的系统，成本最低的方式就是在本地安装一台虚拟机。为了统一学习环境，不管是使用MacOS还是Windows系统的同学，都建议安装一台虚拟机。</p><p>windows采用VMware，Mac则采用Fusion</p><h2 id="1-1-安装VMware"><a href="#1-1-安装VMware" class="headerlink" title="1.1.安装VMware"></a>1.1.安装VMware</h2><p>VMware是业界最好用的虚拟机软件之一。</p><p>windows版本的网站如下：</p><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><p>Mac下也有对应版本，叫做VMware Fusion：</p><p><a href="https://www.vmware.com/cn/products/fusion.html">https://www.vmware.com/cn/products/fusion.html</a></p><p>特别注意，Windows10以上版本操作系统需要下载安装VMware Workstation Pro16及以上版本，安装方式此处略。</p><p>如果自己电脑上已经有了低版本的VMware，则需要先卸载，再重新安装。卸载过程比较麻烦。</p><h3 id="1-1-1-卸载旧版VMware（可选）"><a href="#1-1-1-卸载旧版VMware（可选）" class="headerlink" title="1.1.1.卸载旧版VMware（可选）"></a>1.1.1.卸载旧版VMware（可选）</h3><p>首先，在控制面板找到程序和功能选项，找到VMware，进行卸载操作：</p><p><img src="https://i0.hdslb.com/bfs/article/2f07fd9b47c3f21a452f3554df63aa03645325325.png" alt="img"></p><p>弹出确认框, 点击”下一步”:</p><p><img src="https://i0.hdslb.com/bfs/article/331412756a48eba0c4577958675fbf40645325325.png" alt="img"></p><p>下一步之后, 选择删除:</p><p><img src="https://i0.hdslb.com/bfs/article/2429c653c72005c1ae56d5b7e9c079c7645325325.png" alt="img"></p><p>接下来，按照提示完成卸载操作即可。</p><p>卸载完成后，还需要看看VMware的安装目录是否有旧数据，一并清理掉。</p><p>比如安装在<strong>C盘的**</strong>Program Files<strong><strong>(</strong></strong>x86<strong>**)</strong>：</p><p><img src="https://i0.hdslb.com/bfs/article/f74a9a058a13ff6f345250521430b995645325325.png" alt="img"></p><p>则需要直接删除整个VMware目录：</p><p><img src="https://i0.hdslb.com/bfs/article/e62dec4be580eb55b4b987fafcbaeaea645325325.png" alt="img"></p><p>接下来要清理注册表：</p><p>首先，按住Windows + R , 在弹出框中输入 “regedit” 调出注册表：</p><p><img src="https://i0.hdslb.com/bfs/article/511f204c591f912420076a3136959127645325325.png" alt="img"></p><p>进入注册表编辑器，如图：</p><p><img src="https://i0.hdslb.com/bfs/article/e3c3479f3c586d386d7fcd135204ea0b645325325.png" alt="img"></p><p>打开<strong><code>HKEY_CURRENT_USER</code></strong>文件夹，找到<strong><code>Software</code></strong>文件夹并打开</p><p><img src="https://i0.hdslb.com/bfs/article/1dc6a671248fbb962659da34c3baaa58645325325.png" alt="img"></p><p>找到“VMware.Inc”，右键删除：</p><p><img src="https://i0.hdslb.com/bfs/article/b1b1b6f38220f71dbb6c019a774b22f1645325325.png" alt="img"></p><h3 id="1-1-2-安装VMware"><a href="#1-1-2-安装VMware" class="headerlink" title="1.1.2.安装VMware"></a>1.1.2.安装VMware</h3><p>安装步骤略。。</p><p>安装以后可以免费试用，大家可以去官网购买正版许可证，或者去网上看看有没有好心人赠送你一个许可证。启动后的界面如图所示：</p><p><img src="https://i0.hdslb.com/bfs/article/ad973da49016bd1a891264233d29e8e8645325325.png" alt="img"></p><h3 id="1-1-3-常见错误"><a href="#1-1-3-常见错误" class="headerlink" title="1.1.3.常见错误"></a>1.1.3.常见错误</h3><p>如果VMware虚拟机运行报错，例如：</p><p><img src="https://i0.hdslb.com/bfs/article/44e4fcba1f0d4f6adde572d5f5457afa645325325.png" alt="img"></p><p>这个是由于英特尔的虚拟化技术, 没有开启, 需要进入系统的BIOS界面 , 开启英特尔的虚拟化技术 ; 不同的电脑型号 , 进入BIOS界面的方式不同, 需要百度查询一下自己电脑的型号 , 如何进BIOS ;</p><p>windows10系统可以参考: <a href="https://blog.csdn.net/biu_code/article/details/107504627">https://blog.csdn.net/biu_code/article/details/107504627</a></p><p>以ThinkPad为例，如图：</p><p><img src="https://i0.hdslb.com/bfs/article/d07ca10de8f7e45145b81032db503deb645325325.png" alt="img"></p><h2 id="1-2-创建虚拟机"><a href="#1-2-创建虚拟机" class="headerlink" title="1.2.创建虚拟机"></a>1.2.创建虚拟机</h2><p>Centos7是比较常用的一个Linux发行版本，在国内的使用比例还是比较高的。</p><p>大家首先要下载一个Centos7的iso文件，我在资料中给大家准备了一个mini的版本，体积不到1G，推荐大家使用：</p><p><img src="https://i0.hdslb.com/bfs/article/ad4a6250dcd48754a13c5c4beab8b0e8645325325.png" alt="img"></p><p>我们在VMware《主页》界面中点击《创建新的虚拟机》按钮：</p><p><img src="https://i0.hdslb.com/bfs/article/7497ba151fc4841372f987a8915d0cc8645325325.png" alt="img"></p><p>然后会弹出一个窗口，我们直接点击下一步：</p><p><img src="https://i0.hdslb.com/bfs/article/aaae45616f176682832b1a6b92c86095645325325.png" alt="img"></p><p>然后页面中选择你准备好的ISO文件，继续点击下一步：</p><p><img src="https://i0.hdslb.com/bfs/article/dd1c88a03aa9b5c683747dc567e2861a645325325.png" alt="img"></p><p>然后填写<code>虚拟机的名称</code>以及虚拟机将来<code>保存的位置</code>：</p><p><img src="https://i0.hdslb.com/bfs/article/f6618fa89d0c71249dc323a787b4102d645325325.png" alt="img"></p><p>再次下一步，填写虚拟机磁盘大小。这里建议给大一点，否则将来不够用调整起来麻烦。而且这里设置大小并不是立刻占用这么多，而是设置一个上限：</p><p><img src="https://i0.hdslb.com/bfs/article/3e9c3b919cd7d76eb97e75cb8826d57a645325325.png" alt="img"></p><p>继续下一步，然后选择虚拟机硬件设置：</p><p><img src="https://i0.hdslb.com/bfs/article/94a31baf537eed69567b0990c89625b4645325325.png" alt="img"></p><p>在弹出的窗口中设置虚拟机硬件，建议CPU给到4核，内存给到8G：</p><p><img src="https://i0.hdslb.com/bfs/article/eca9a4d13383ee098b07f5cecd94e7c8645325325.png" alt="img"></p><p>配置完成后，点击<code>关闭</code>，回到上一页面，继续点击<code>完成</code>：</p><p><img src="https://i0.hdslb.com/bfs/article/da3c311e082c7bbe7cebb2c5298f1153645325325.png" alt="img"></p><p>虚拟机就创建完毕了：</p><p><img src="https://i0.hdslb.com/bfs/article/cc2837244a6581ed631278dd09ebd8a2645325325.png" alt="img"></p><h2 id="1-3-安装Centos7"><a href="#1-3-安装Centos7" class="headerlink" title="1.3.安装Centos7"></a>1.3.安装Centos7</h2><p>接下来，我们启动刚刚创建的虚拟机，开始安装Centos7系统：</p><p><img src="https://i0.hdslb.com/bfs/article/9dd573c7fb87272650bd72098502a3c2645325325.png" alt="img"></p><p>启动后需要选择安装菜单，将鼠标移入黑窗口中后，将无法再使用鼠标，需要按上下键选择菜单。选中Install Centos 7 后按下回车：</p><p><img src="https://i0.hdslb.com/bfs/article/f63605e29248dba3f28b2266c61e0655645325325.png" alt="img"></p><p>然后会提示我们按下enter键继续：</p><p><img src="https://i0.hdslb.com/bfs/article/9692d998fa438e03cb042bb74a73a242645325325.png" alt="img"></p><p>过一会儿后，会进入语言选择菜单，这里可以使用鼠标选择。选择中文-简体中文，然后继续：</p><p><img src="https://i0.hdslb.com/bfs/article/72589b84d410b0197af1beb8672ca79c645325325.png" alt="img"></p><p>接下来，会进入安装配置页面：</p><p><img src="https://i0.hdslb.com/bfs/article/558e50c33b0f248308b62a27ee3b7d21645325325.png" alt="img"></p><p>鼠标向下滚动后，找到系统-安装位置配置，点击：</p><p><img src="https://i0.hdslb.com/bfs/article/60f824e56003175439a3a0e9ee4674ea645325325.png" alt="img"></p><p>选择刚刚添加的磁盘，并点击完成：</p><p><img src="https://i0.hdslb.com/bfs/article/c60556bdc94fcfbec2930f1cb4649ec2645325325.png" alt="img"></p><p>然后回到配置页面，这次点击《网络和主机名》：</p><p><img src="https://i0.hdslb.com/bfs/article/a2cb2982e5f260dc7d167d387dac4055645325325.png" alt="img"></p><p>在网络页面做下面的几件事情：</p><ol><li>修改主机名为自己喜欢的主机名，不要出现中文和特殊字符，建议用localhost</li><li>点击应用</li><li>将网络连接打开</li><li>点击配置，设置详细网络信息</li></ol><p><img src="https://i0.hdslb.com/bfs/article/a830c111e9d1270fb5d9eab2fe0e8b1d645325325.png" alt="img"></p><p>最好用一个截图软件，记住上图中的网络详细信息，接下来的配置要参考：</p><p><img src="https://i0.hdslb.com/bfs/article/4b606ca23f9883671bec903e380b0805645325325.png" alt="img"></p><p>点击配置按钮后，我们需要把网卡地址改为静态IP，这样可以避免每次启动虚拟机IP都变化。所有配置照搬你自己截图的网络信息填写，不要照抄我的：</p><p><img src="https://i0.hdslb.com/bfs/article/4980c7eda43c85ef5068141675a2e875645325325.png" alt="img"></p><p>上图中的四个信息参考之前的<strong>以太网**</strong>(ens33)<strong>**网卡</strong>的截图，不要照搬我的来写。</p><p>最后，点击完成按钮：</p><p><img src="https://i0.hdslb.com/bfs/article/67b63d5713f45dcde2ada79cd6f1dac8645325325.png" alt="img"></p><p>回到配置界面后，点击<code>开始安装</code>：</p><p><img src="https://i0.hdslb.com/bfs/article/3215f798fe87c0457cc3c9b78b5751f5645325325.png" alt="img"></p><p>接下来需要设置root密码：</p><p><img src="https://i0.hdslb.com/bfs/article/462b0780bffcd264b9a76bf88ea44e2e645325325.png" alt="img"></p><p>填写你要使用的root密码，然后点击完成：</p><p><img src="https://i0.hdslb.com/bfs/article/6cc801ddfe7e7fb88b56bdd17041649e645325325.png" alt="img"></p><p>接下来，耐心等待安装即可。</p><p><img src="https://i0.hdslb.com/bfs/article/25739c7dae60ef5d9de7a25febfc15db645325325.png" alt="img"></p><p>等待安装完成后，点击<strong>重启</strong>：</p><p><img src="https://i0.hdslb.com/bfs/article/f4f2f49c793c59afa50df42f3b35d281645325325.png" alt="img"></p><p>耐心等待一段时间，不要做任何操作，虚拟机即可启动完毕：</p><p><img src="https://i0.hdslb.com/bfs/article/b10006c6604f6be19d1d108149e9e6df645325325.png" alt="img"></p><p>输入用户名root，然后点击回车，会要求你输入密码：</p><p><img src="https://i0.hdslb.com/bfs/article/bfe1aa74ed1fbedd3e6ecff180f8c716645325325.png" alt="img"></p><p>此时你要输入密码，不过需要注意的是密码是<strong>隐藏</strong>的，输入了也看不见。所以放心输入，完成后回车即可：</p><p><img src="https://i0.hdslb.com/bfs/article/2749ce3f2a244a0552e5db4d46649322645325325.png" alt="img"></p><p>只要密码输入正确，就可以正常登录。此时可以用命令测试虚拟机网络是否畅通：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>如果看到这样的结果代表网络畅通：</p><p><img src="https://i0.hdslb.com/bfs/article/fd4a5a4773d616a9fa8576384e7916ec645325325.png" alt="img"></p><p>默认ping命令会持续执行，按下<code>CTRL</code>+ <code>C</code>后命令即可停止。</p><h2 id="1-4-设置虚拟机快照"><a href="#1-4-设置虚拟机快照" class="headerlink" title="1.4.设置虚拟机快照"></a>1.4.设置虚拟机快照</h2><p>在虚拟机安装完成后，最好立刻设置一个快照，这样一旦将来虚拟机出现问题，可以快速恢复。</p><p>我们先停止虚拟机，点击VMware顶部菜单中的<code>暂停</code><strong><code>下拉选框</code></strong>，选择<code>关闭客户机</code>：</p><p><img src="https://i0.hdslb.com/bfs/article/5649db35099ce698f827733446ddd8a7645325325.png" alt="img"></p><p>接着，点击VMware菜单中的🔧按钮:</p><p><img src="https://i0.hdslb.com/bfs/article/1c860ae7b7fb84fbe0528e2d7639de7c645325325.png" alt="img"></p><p>然后在弹出的快照管理窗口中，点击<strong>拍摄快照</strong>，填写新的快照信息：</p><p><img src="https://i0.hdslb.com/bfs/article/a95a0ddf10cd0efe0128d021d576343c645325325.png" alt="img"></p><p>快照拍摄完成了！而且我们可以在不同阶段拍摄多个不同快照作为备份，方便后期恢复数据。</p><p>假如以后虚拟机文件受损，需要恢复到初始状态的话，可以选中要恢复的快照，点击转到即可：</p><p><img src="https://i0.hdslb.com/bfs/article/f3b4045e22dc32024c51d8d447c1336e645325325.png" alt="img"></p><h1 id="2-SSH客户端"><a href="#2-SSH客户端" class="headerlink" title="2.SSH客户端"></a>2.SSH客户端</h1><p>在VMware界面中操作虚拟机非常不友好，所以一般推荐使用专门的SSH客户端。市面上常见的有：</p><ul><li>Xshell：个人免费，商业收费，之前爆出过有隐藏后门。不推荐</li><li>Finshell：基础功能免费，高级功能收费，基于Java，内存占用较高（在1个G左右）。不推荐</li><li>MobarXterm：基础功能免费、高级功能收费。开源、功能强大、内存占用低（只有10m左右），但是界面不太漂亮。推荐使用</li></ul><h2 id="2-1-安装MobarXterm"><a href="#2-1-安装MobarXterm" class="headerlink" title="2.1.安装MobarXterm"></a>2.1.安装MobarXterm</h2><p>这里我们会选择内存占用较低的MobarXterm作为SSH客户端，其官网地址：</p><p><a href="https://mobaxterm.mobatek.net/">https://mobaxterm.mobatek.net/</a></p><p>安装完成后界面如图所示：</p><p><img src="https://i0.hdslb.com/bfs/article/89b59772d91c2d446b84794600e7510a645325325.png" alt="img"></p><p>点击session按钮，进入会话管理：</p><p><img src="https://i0.hdslb.com/bfs/article/9331ad5c992910b8d9e9d807adb13234645325325.png" alt="img"></p><p>在弹出的session管理页面中，按照下图填写信息并保存：</p><p><img src="https://i0.hdslb.com/bfs/article/e01c25cc5235a3858e930ee7c65989c6645325325.png" alt="img"></p><p>点击OK后会提示你是第一次连接，询问你是信任连接的服务：</p><p><img src="https://i0.hdslb.com/bfs/article/3380d8ee2db528a028ad760cf12be8e3645325325.png" alt="img"></p><p>选择accept之后，会询问你是否要记住密码，选择yes：</p><p><img src="https://i0.hdslb.com/bfs/article/9e93ce5e3806be9b1233066bce15223b645325325.png" alt="img"></p><p>紧接着需要你设置一个MobarXterm的全局密码用于做密码管理，建议设置一个与虚拟机密码不同的：</p><p>输入密码：</p><p><img src="https://i0.hdslb.com/bfs/article/9f48ec7b9674da4aee74c7552d1eee01645325325.png" alt="img"></p><p>输入成功后，就会连接成功，并进入操作界面了：</p><p><img src="https://i0.hdslb.com/bfs/article/867f44ebf3871558f723b831f0397bac645325325.png" alt="img"></p><p>这里需要做一些基础的配置：</p><p><img src="https://i0.hdslb.com/bfs/article/79d1da0356cca425426c4ed30e3f9e64645325325.png" alt="img"></p><h2 id="2-2-配置默认编辑器"><a href="#2-2-配置默认编辑器" class="headerlink" title="2.2.配置默认编辑器"></a>2.2.配置默认编辑器</h2><p>首先建议设置一下默认编辑器，这样我们通过MobarXterm的FTP工具打开文件时会以指定的编辑器打开，方便修改。我这里配置的是vscode：</p><p><img src="https://i0.hdslb.com/bfs/article/803169276a026d5e4eb6a6dfda17daa2645325325.png" alt="img"></p><h2 id="2-3-配置右键粘贴"><a href="#2-3-配置右键粘贴" class="headerlink" title="2.3.配置右键粘贴"></a>2.3.配置右键粘贴</h2><p>复制粘贴是很常用的配置，MobarXterm默认左键选中即<strong>复制</strong>，但是需要配置右键点击为<strong>粘贴：</strong></p><p><img src="https://i0.hdslb.com/bfs/article/61d55313766f7286b0325cdb54f3f939645325325.png" alt="img"></p><p>这样，复制和粘贴可以全部通过鼠标操作，无需按键。</p><h2 id="2-4-SSH配置"><a href="#2-4-SSH配置" class="headerlink" title="2.4.SSH配置"></a>2.4.SSH配置</h2><p>接下来还有几个ssh配置：</p><p><img src="https://i0.hdslb.com/bfs/article/bd302b510f78a64f6d9dc33c018a3359645325325.png" alt="img"></p><p>分别是：</p><ul><li>默认的登录用户</li><li>ssh保持连接</li><li>取消连接成功后的欢迎banner</li></ul><h2 id="2-5-关闭X-Server服务"><a href="#2-5-关闭X-Server服务" class="headerlink" title="2.5.关闭X-Server服务"></a>2.5.关闭X-Server服务</h2><p>大多数情况下，我们没有x-server的需求，因此可以选择不要自启动：</p><p><img src="https://i0.hdslb.com/bfs/article/4d915dd7257704861f8f7e556a6f7d82645325325.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/posts/10048.html"/>
      <url>/posts/10048.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h1><h2 id="1-1-部署MySQL"><a href="#1-1-部署MySQL" class="headerlink" title="1.1.部署MySQL"></a>1.1.部署MySQL</h2><p>首先，我们利用Docker来安装一个MySQL软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p><p>如果是利用传统方式部署MySQL，大概的步骤有：</p><ul><li>搜索并下载MySQL安装包</li><li>上传至Linux环境</li><li>编译和配置环境</li><li>安装</li></ul><p>而使用Docker安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用CV大法）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>运行效果如图：</p><p><img src="https://i0.hdslb.com/bfs/article/082b0f5b5c6c7d41bffaaa7589874325645325325.png" alt="img"></p><p>MySQL安装完毕！通过任意客户端工具即可连接到MySQL.</p><p>大家可以发现，当我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL，我们完全不用插手，是不是非常方便。</p><p>而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是image</li><li>容器：英文是container</li></ul><blockquote><p>因此，Docker安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。</p></blockquote><p>Docker会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？</p><p>Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：</p><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储、管理Docker镜像的服务器，被称为DockerRegistry，可以翻译为镜像仓库。DockerHub网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p><p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p><p>总之，镜像的来源有两种：</p><ul><li>基于官方基础镜像自己制作</li><li>直接去DockerRegistry下载</li></ul><p><strong>总结一下</strong>：</p><p>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p><p>用一幅图标示如下：</p><p><img src="https://i0.hdslb.com/bfs/article/0352c747db4ecc27b68af7e5072c25d0645325325.png" alt="image-20240815184207816"></p><h2 id="1-2-命令解读"><a href="#1-2-命令解读" class="headerlink" title="1.2.命令解读"></a>1.2.命令解读</h2><p>利用Docker快速的安装了MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><div class="note danger no-icon flat"><p>解读：</p><ul><li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li><li><code>--name`` mysql</code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li><li><code>-p 3306:3306</code> : 设置端口映射。<ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将**</strong>宿主机<strong><strong>端口</strong></strong>映射容器内到端口**，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><code>-``e`` TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数<ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ``=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker会根据这个名字搜索并下载镜像<ul><li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li><li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li></ul></li></ul></div><p>镜像的名称不是随意的，而是要到DockerRegistry中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在DockerHub网站或者软件的官方网站中都能找到。</p><p>如果我们要安装其它软件，也可以到DockerRegistry中寻找对应的镜像名称和版本，阅读相关配置即可。</p><h1 id="2-Docker基础"><a href="#2-Docker基础" class="headerlink" title="2.Docker基础"></a>2.Docker基础</h1><p>接下来，我们一起来学习Docker使用的一些基础知识，为将来部署项目打下基础。具体用法可以参考Docker官方文档：</p><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h2 id="2-1-常见命令"><a href="#2-1-常见命令" class="headerlink" title="2.1.常见命令"></a>2.1.常见命令</h2><p>首先我们来学习Docker中的常见命令，可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/cli/">https://docs.docker.com/engine/reference/commandline/cli/</a></p><h3 id="2-1-1-命令介绍"><a href="#2-1-1-命令介绍" class="headerlink" title="2.1.1.命令介绍"></a>2.1.1.命令介绍</h3><p>其中，比较常见的命令有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>命令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td style="text-align:left">docker pull</td><td style="text-align:left">拉取镜像</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td style="text-align:left">docker push</td><td style="text-align:left">推送镜像到DockerRegistry</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td style="text-align:left">docker images</td><td style="text-align:left">查看本地镜像</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td style="text-align:left">docker rmi</td><td style="text-align:left">删除本地镜像</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td style="text-align:left">docker run</td><td style="text-align:left">创建并运行容器（不能重复创建）</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td style="text-align:left">docker stop</td><td style="text-align:left">停止指定容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td style="text-align:left">docker start</td><td style="text-align:left">启动指定容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td style="text-align:left">docker restart</td><td style="text-align:left">重新启动容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td style="text-align:left">docker rm</td><td style="text-align:left">删除指定容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker ps</td><td style="text-align:left">查看容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td style="text-align:left">docker logs</td><td style="text-align:left">查看容器运行日志</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td style="text-align:left">docker exec</td><td style="text-align:left">进入容器</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td style="text-align:left">docker save</td><td style="text-align:left">保存镜像到本地压缩文件</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td style="text-align:left">docker load</td><td style="text-align:left">加载本地压缩文件到镜像</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td style="text-align:left">docker inspect</td><td style="text-align:left">查看容器详细信息</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table></div><p>用一副图来表示这些命令的关系：</p><p><img src="https://i0.hdslb.com/bfs/article/36323eb5b52f6f6ea7c2ac56b5525f05645325325.png" alt="image-20240815184138146"></p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="literal">--restart</span>=always [容器名/容器<span class="type">id</span>]</span><br></pre></td></tr></table></figure><h3 id="2-1-2-演示"><a href="#2-1-2-演示" class="headerlink" title="2.1.2.演示"></a>2.1.2.演示</h3><p>教学环节说明：我们以Nginx为例给大家演示上述命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago   <span class="number">141</span>MB</span><br><span class="line">mysql        latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago   <span class="number">516</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步，查看运行中容器</span></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line"><span class="comment"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第8步，查看所有容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第9步，再次启动nginx容器</span></span><br><span class="line">docker <span class="built_in">start</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第10步，再次查看容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br><span class="line"><span class="comment"># 或者，可以进入MySQL</span></span><br><span class="line">docker exec <span class="literal">-it</span> mysql mysql <span class="literal">-uroot</span> <span class="literal">-p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第13步，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"><span class="comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> nginx</span><br></pre></td></tr></table></figure><h3 id="2-1-3-命令别名"><a href="#2-1-3-命令别名" class="headerlink" title="2.1.3.命令别名"></a>2.1.3.命令别名</h3><p>给常用Docker命令起别名，方便我们访问：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line">alias <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line">alias <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line">alias <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line">alias dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line">alias dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">etc</span>/<span class="type">bashrc</span> ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><p>接下来，试试看新的命令吧。</p><h2 id="2-2-数据卷"><a href="#2-2-数据卷" class="headerlink" title="2.2.数据卷"></a>2.2.数据卷</h2><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让Nginx代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器**</strong>解耦**。</p><h3 id="2-2-1-什么是数据卷"><a href="#2-2-1-什么是数据卷" class="headerlink" title="2.2.1.什么是数据卷"></a>2.2.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机**</strong>目录**之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p><img src="https://i0.hdslb.com/bfs/article/0bda30d3d0072fddf4eff420cc00d3e6645325325.png" alt="image-20240815184236280"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><p><strong>小提示</strong>：</p><p><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。</p><p><strong>为什么不让容器目录直接指向**</strong>宿主机<strong>**目录呢</strong>？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li></ul><p>不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与**</strong>宿主机<strong>**目录挂载而不使用数据卷</strong>，具体参考2.2.3小节。</p><h3 id="2-2-2-数据卷命令"><a href="#2-2-2-数据卷命令" class="headerlink" title="2.2.2.数据卷命令"></a>2.2.2.数据卷命令</h3><p>数据卷的相关命令有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>命令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td style="text-align:left">docker volume create</td><td style="text-align:left">创建数据卷</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td style="text-align:left">docker volume ls</td><td style="text-align:left">查看所有数据卷</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker volume rm</td><td style="text-align:left">删除指定数据卷</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker volume inspect</td><td style="text-align:left">查看某个数据卷的详情</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker volume prune</td><td style="text-align:left">清除数据卷</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table></div><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><p>教学<strong>演示环节</strong>：演示一下nginx的html目录挂载</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="literal">-v</span> html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     <span class="number">29524</span>ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span><br><span class="line">local     html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">ll /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">497</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> <span class="number">50</span>x.html</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">615</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开页面，查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br></pre></td></tr></table></figure><p>教学<strong>演示环节</strong>：演示一下MySQL的匿名数据卷</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看MySQL容器详细信息</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 关注其中.Config.Volumes部分和.Mounts部分</span></span><br></pre></td></tr></table></figure><p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;/var/lib/mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的<code>.Mounts</code>部分：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的MySQL的data文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span><br></pre></td></tr></table></figure><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面</p><h3 id="2-2-3-挂载本地目录或文件"><a href="#2-2-3-挂载本地目录或文件" class="headerlink" title="2.2.3.挂载本地目录或文件"></a>2.2.3.挂载本地目录或文件</h3><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><p><strong>教学演示</strong>，删除并重新创建mysql容器，并完成本地目录挂载：</p><ul><li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li><li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</li><li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li></ul><p>在课前资料中已经准备好了mysql的<code>init</code>目录和<code>conf</code>目录：</p><p><img src="https://i0.hdslb.com/bfs/article/69713f9bc4c38c2b3944b2c192ccee9f645325325.png" alt="img"></p><p>以及对应的初始化SQL脚本和配置文件：</p><p><img src="https://i0.hdslb.com/bfs/article/931bc742734f30260b76d6599cdc4fbf645325325.png" alt="img"></p><p><img src="https://i0.hdslb.com/bfs/article/d4f0f313c8f1a24e590d7dd3598a478d645325325.png" alt="img"></p><p>其中，hm.cnf主要是配置了MySQL的默认编码，改为utf8mb4；而hmall.sql则是后面我们要用到的黑马商城项目的初始化SQL脚本。</p><p>我们直接将整个mysql目录上传至虚拟机的<code>/root</code>目录下：</p><p><img src="https://i0.hdslb.com/bfs/article/0247b26ef22104b3889977724cbff547645325325.png" alt="img"></p><p>接下来，我们演示本地目录挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.删除原来的MySQL容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行新mysql容器，挂载本地目录</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了</span></span><br><span class="line"><span class="built_in">ls</span> -l mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf</span><br><span class="line">drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data</span><br><span class="line">drwxr-xr-x. 2 root    root   23 5月  19 15:11 init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化</span></span><br><span class="line"><span class="built_in">ls</span> -l data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查看MySQL容器内数据</span></span><br><span class="line"><span class="comment"># 5.1.进入MySQL</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql mysql -uroot -p123</span><br><span class="line"><span class="comment"># 5.2.查看编码表</span></span><br><span class="line">show variables like <span class="string">&quot;%char%&quot;</span>;</span><br><span class="line"><span class="comment"># 5.3.结果，发现编码是utf8mb4没有问题</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看数据</span></span><br><span class="line"><span class="comment"># 6.1.查看数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 结果，hmall是黑马商城数据库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| hmall              |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 6.2.切换到hmall数据库</span></span><br><span class="line">use hmall;</span><br><span class="line"><span class="comment"># 6.3.查看表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_hmall |</span><br><span class="line">+-----------------+</span><br><span class="line">| address         |</span><br><span class="line">| cart            |</span><br><span class="line">| item            |</span><br><span class="line">| order           |</span><br><span class="line">| order_detail    |</span><br><span class="line">| order_logistics |</span><br><span class="line">| pay_order       |</span><br><span class="line">| user            |</span><br><span class="line">+-----------------+</span><br><span class="line"><span class="comment"># 6.4.查看address表数据</span></span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| <span class="built_in">id</span> | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |</span><br><span class="line">| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |</span><br><span class="line">| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |</span><br><span class="line">| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |</span><br><span class="line">+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3.镜像"></a>2.3.镜像</h2><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？</p><h3 id="2-3-1-镜像结构"><a href="#2-3-1-镜像结构" class="headerlink" title="2.3.1.镜像结构"></a>2.3.1.镜像结构</h3><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="https://i0.hdslb.com/bfs/article/1714ad2b5e760fa81b2407903b3a56bd645325325.png" alt="img"></p><h3 id="2-3-2-Dockerfile"><a href="#2-3-2-Dockerfile" class="headerlink" title="2.3.2.Dockerfile"></a>2.3.2.Dockerfile</h3><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>指令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>FROM</strong></td><td style="text-align:left">指定基础镜像</td><td style="text-align:left"><code>FROM centos:6</code></td></tr><tr><td style="text-align:left"><strong>ENV</strong></td><td style="text-align:left">设置环境变量，可在后面指令使用</td><td style="text-align:left"><code>ENV key value</code></td></tr><tr><td style="text-align:left"><strong>COPY</strong></td><td style="text-align:left">拷贝本地文件到镜像的指定目录</td><td style="text-align:left"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td style="text-align:left"><strong>RUN</strong></td><td style="text-align:left">执行Linux的shell命令，一般是安装过程的命令</td><td style="text-align:left"><code>RUN yum install gcc</code></td></tr><tr><td style="text-align:left"><strong>EXPOSE</strong></td><td style="text-align:left">指定容器运行时监听的端口，是给镜像使用者看的</td><td style="text-align:left">EXPOSE 8080</td></tr><tr><td style="text-align:left"><strong>ENTRYPOINT</strong></td><td style="text-align:left">镜像中应用的启动命令，容器运行时调用</td><td style="text-align:left">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></div><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>同学们思考一下：以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>是不是简单多了。</p><h3 id="2-3-3-构建镜像"><a href="#2-3-3-构建镜像" class="headerlink" title="2.3.3.构建镜像"></a>2.3.3.构建镜像</h3><p>当Dockerfile文件写好以后，就可以利用命令来构建镜像了。</p><p>在课前资料中，我们准备好了一个demo项目及对应的Dockerfile：</p><p><img src="https://i0.hdslb.com/bfs/article/340547d80e3ad12520e50f6d300e710c645325325.png" alt="img"></p><p>首先，我们将课前资料提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="https://i0.hdslb.com/bfs/article/e4b279f2def1b5716fcaa9546c01b844645325325.png" alt="img"></p><p>然后，执行命令，构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><p><code>docker build</code>: 就是构建一个docker镜像</p></li><li><p><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</p></li><li><p><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接<code>指定Dockerfile目录</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 直接指定Dockerfile目录</span></span><br><span class="line">  docker build -t docker-demo:1.0 /root/demo</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">![img](https://i0.hdslb.com/bfs/article/95e8e280adadcc6721533da831610219645325325.png)</span><br><span class="line"></span><br><span class="line">查看镜像列表：</span><br><span class="line"></span><br><span class="line">```Bash</span><br><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br></pre></td></tr></table></figure></li></ul><p>然后尝试运行该镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建并运行容器</span></span><br><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8080:8080 docker-demo:1.0</span><br><span class="line"><span class="comment"># 2.查看容器</span></span><br><span class="line">dps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</span><br><span class="line">78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   <span class="built_in">dd</span></span><br><span class="line">f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.访问</span></span><br><span class="line">curl localhost:8080/hello/count</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;</span><br></pre></td></tr></table></figure><h2 id="2-4-网络"><a href="#2-4-网络" class="headerlink" title="2.4.网络"></a>2.4.网络</h2><p>上节课我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><p>常见命令有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>命令</strong></th><th style="text-align:left"><strong>说明</strong></th><th style="text-align:left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td style="text-align:left">docker network create</td><td style="text-align:left">创建一个网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td style="text-align:left">docker network ls</td><td style="text-align:left">查看所有网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network rm</td><td style="text-align:left">删除指定网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network prune</td><td style="text-align:left">清除未使用的网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network connect</td><td style="text-align:left">使指定容器连接加入某网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td style="text-align:left">docker network disconnect</td><td style="text-align:left">使指定容器连接离开某网络</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td style="text-align:left">docker network inspect</td><td style="text-align:left">查看网络详细信息</td><td style="text-align:left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table></div><p>教学演示：自定义网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看网络</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">403f16ec62a2   hmall     bridge    <span class="built_in">local</span></span><br><span class="line">0dc0f72a0fbb   host      host      <span class="built_in">local</span></span><br><span class="line">cd8d3e8df47b   none      null      <span class="built_in">local</span></span><br><span class="line"><span class="comment"># 其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect hmall mysql --<span class="built_in">alias</span> db</span><br><span class="line"><span class="comment"># 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect hmall <span class="built_in">dd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment"># 4.1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"><span class="comment"># 4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line"><span class="comment"># 4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><p>OK，现在无需记住IP地址也可以实现容器互联了。</p><p><strong>总结</strong>：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul><h1 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3.项目部署"></a>3.项目部署</h1><p>好了，我们已经熟悉了Docker的基本用法，接下来可以尝试部署项目了。</p><p>在课前资料中已经提供了一个黑马商城项目给大家，如图：</p><p>项目说明：</p><ul><li>hmall：商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码</li></ul><p>部署的容器及端口说明：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>项目</strong></th><th style="text-align:left"><strong>容器名</strong></th><th style="text-align:left"><strong>端口</strong></th><th style="text-align:left"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:left">hmall</td><td style="text-align:left">hmall</td><td style="text-align:left">8080</td><td style="text-align:left">黑马商城后端API入口</td></tr><tr><td style="text-align:left">hmall-portal</td><td style="text-align:left">nginx</td><td style="text-align:left">18080</td><td style="text-align:left">黑马商城用户端入口</td></tr><tr><td style="text-align:left">hmall-admin</td><td style="text-align:left">18081</td><td style="text-align:left">黑马商城管理端入口</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">mysql</td><td style="text-align:left">mysql</td><td style="text-align:left">3306</td><td style="text-align:left">数据库</td></tr></tbody></table></div><p>在正式部署前，我们先删除之前的nginx、dd两个容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx <span class="built_in">dd</span></span><br></pre></td></tr></table></figure><p>mysql容器中已经准备好了商城的数据，所以就不再删除了。</p><h2 id="3-1-部署Java项目"><a href="#3-1-部署Java项目" class="headerlink" title="3.1.部署Java项目"></a>3.1.部署Java项目</h2><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p><p><img src="https://i0.hdslb.com/bfs/article/57df5ad4e2f3802d1791227f0bf02e81645325325.png" alt="img"></p><p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：</p><p><img src="https://i0.hdslb.com/bfs/article/e1384cf237e137cd6db7c6228dbf9c16645325325.png" alt="img"></p><p>其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。</p><p>查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：</p><p><img src="https://i0.hdslb.com/bfs/article/79f016ab015522b045a9e56ebabf1bb6645325325.png" alt="img"></p><p>这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：</p><p><img src="https://i0.hdslb.com/bfs/article/d2583b6e4a043ee5fce902890043e84b645325325.png" alt="img"></p><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>我们将项目打包：</p><p><img src="https://i0.hdslb.com/bfs/article/5ffdfc84dc1673a826a0a2c1074a33e3645325325.png" alt="img"></p><p>结果：</p><p><img src="https://i0.hdslb.com/bfs/article/4932ec87eddd453fdd468eaacc04ae42645325325.png" alt="img"></p><p>将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：</p><p><img src="https://i0.hdslb.com/bfs/article/c8b495ce1034c6ce3e1e2e1c228ce518645325325.png" alt="img"></p><p>部署项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line">docker build -t hmall .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">hmall         latest    0bb07b2c34b9   43 seconds ago   362MB</span><br><span class="line">docker-demo   1.0       49743484da68   24 hours ago     327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql</span></span><br><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：<a href="http://你的虚拟机地址:8080/search/list">http://你的虚拟机地址:8080/search/list</a></p><h2 id="3-2-部署前端"><a href="#3-2-部署前端" class="headerlink" title="3.2.部署前端"></a>3.2.部署前端</h2><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在课前资料中已经给大家提供了nginx的部署目录：</p><p><img src="https://i0.hdslb.com/bfs/article/4c0e95846cc679e855c3e31ab773b662645325325.png" alt="img"></p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li></ul><p>我们现在要做的就是把整个nginx目录上传到虚拟机的<code>/root</code>目录下：</p><p><img src="https://i0.hdslb.com/bfs/article/ae0a0e7d419ca1cd07e8c615f09e0199645325325.png" alt="img"></p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -p 18081:18081 \</span><br><span class="line">  -v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  --network hmall \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p>测试，通过浏览器访问：<a href="http://你的虚拟机ip:18080">http://你的虚拟机ip:18080</a></p><p><img src="https://i0.hdslb.com/bfs/article/65a25367961ad775cd893a1873c8ba3f645325325.png" alt="img"></p><h2 id="3-3-DockerCompose"><a href="#3-3-DockerCompose" class="headerlink" title="3.3.DockerCompose"></a>3.3.DockerCompose</h2><p>大家可以看到，我们部署一个简单的java项目，其中包含3个容器：</p><ul><li>MySQL</li><li>Nginx</li><li>Java项目</li></ul><p>而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h3 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1.基本语法"></a>3.3.1.基本语法</h3><p>docker-compose.yml文件的基本语法可以参考官方文档：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p><p>举例来说，用docker run部署MySQL的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network hmall</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><p>对比如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>docker run 参数</strong></th><th style="text-align:left"><strong>docker compose 指令</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">—name</td><td style="text-align:left">container_name</td><td style="text-align:left">容器名称</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">ports</td><td style="text-align:left">端口映射</td></tr><tr><td style="text-align:left">-e</td><td style="text-align:left">environment</td><td style="text-align:left">环境变量</td></tr><tr><td style="text-align:left">-v</td><td style="text-align:left">volumes</td><td style="text-align:left">数据卷配置</td></tr><tr><td style="text-align:left">—network</td><td style="text-align:left">networks</td><td style="text-align:left">网络</td></tr></tbody></table></div><p>明白了其中的对应关系，相信编写<code>docker-compose</code>文件应该难不倒大家。</p><p>黑马商城部署文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-基础命令"><a href="#3-3-2-基础命令" class="headerlink" title="3.3.2.基础命令"></a>3.3.2.基础命令</h3><p>编写好docker-compose.yml文件，就可以部署项目了。常见的命令：</p><p><a href="https://docs.docker.com/compose/reference/">https://docs.docker.com/compose/reference/</a></p><p>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><p>其中，OPTIONS和COMMAND都是可选参数，比较常见的有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>类型</strong></th><th style="text-align:left"><strong>参数或指令</strong></th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">Options</td><td style="text-align:left">-f</td><td style="text-align:left">指定compose文件的路径和名称</td></tr><tr><td style="text-align:left">-p</td><td style="text-align:left">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Commands</td><td style="text-align:left">up</td><td style="text-align:left">创建并启动所有service容器</td></tr><tr><td style="text-align:left">down</td><td style="text-align:left">停止并移除所有容器、网络</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">ps</td><td style="text-align:left">列出所有启动的容器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">logs</td><td style="text-align:left">查看指定容器的日志</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">stop</td><td style="text-align:left">停止容器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">start</td><td style="text-align:left">启动容器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">restart</td><td style="text-align:left">重启容器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">top</td><td style="text-align:left">查看运行的进程</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">exec</td><td style="text-align:left">在指定的运行中容器中执行命令</td></tr></tbody></table></div><p>教学演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.进入root目录</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.删除旧容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -qa)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除hmall镜像</span></span><br><span class="line">docker rmi hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.清空MySQL数据</span></span><br><span class="line"><span class="built_in">rm</span> -rf mysql/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.启动所有, -d 参数是后台启动</span></span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[+] Building 15.5s (8/8) FINISHED</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                    0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                         0.0s</span><br><span class="line"> =&gt; [internal] load metadata <span class="keyword">for</span> docker.io/library/openjdk:11.0-jre-buster             15.4s</span><br><span class="line"> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                       0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 98B                                                        0.0s</span><br><span class="line"> =&gt; CACHED [2/3] RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span>   0.0s</span><br><span class="line"> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s</span><br><span class="line"> =&gt; exporting to image                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; exporting layers                                                                 0.0s</span><br><span class="line"> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s</span><br><span class="line"> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s</span><br><span class="line">[+] Running 4/4</span><br><span class="line"> ✔ Network hmall    Created                                                             0.2s</span><br><span class="line"> ✔ Container mysql  Started                                                             0.5s</span><br><span class="line"> ✔ Container hmall  Started                                                             0.9s</span><br><span class="line"> ✔ Container nginx  Started                                                             1.5s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看镜像</span></span><br><span class="line">docker compose images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE</span><br><span class="line">hmall               root-hmall          latest              32eebee16acd        362MB</span><br><span class="line">mysql               mysql               latest              3218b38490ce        516MB</span><br><span class="line">nginx               nginx               latest              605c77e624dd        141MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查看容器</span></span><br><span class="line">docker compose ps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS</span><br><span class="line">hmall               root-hmall          <span class="string">&quot;java -jar /app.jar&quot;</span>     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br><span class="line">mysql               mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp</span><br><span class="line">nginx               nginx               <span class="string">&quot;/docker-entrypoint.…&quot;</span>   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp</span><br></pre></td></tr></table></figure><p>打开浏览器，访问：<a href="http://yourIp:8080">http://yourIp:8080</a></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus学习笔记</title>
      <link href="/posts/18374.html"/>
      <url>/posts/18374.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h1><h2 id="1-1-常见注解"><a href="#1-1-常见注解" class="headerlink" title="1.1 常见注解"></a>1.1 常见注解</h2><p>在刚刚的入门案例中，我们仅仅引入了依赖，继承了 <code>BaseMapper</code>就能使用 MybatisPlus，非常简单。但是问题来了： MybatisPlus如何知道我们要查询的是哪张表？表中有哪些字段呢？</p><p>大家回忆一下，UserMapper 在继承 BaseMapper 的时候指定了一个泛型：</p><p><img src="https://i0.hdslb.com/bfs/article/908d7bb2784a2898ef4e62058a34a8ae645325325.png" alt="img"></p><p>泛型中的 User 就是与数据库对应的 PO。</p><p>Mybatis Plus 就是根据 PO 实体的信息来推断出表的信息，从而生成 SQL 的。默认情况下：</p><ul><li>MybatisPlus 会把 PO 实体的类名驼峰转下划线作为表名</li><li>MybatisPlus 会把 PO 实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li>MybatisPlus 会把名为 id 的字段作为主键</li></ul><p>但很多情况下，默认的实现与实际场景不符，因此 MybatisPlus 提供了一些注解便于我们声明表信息。</p><h3 id="1-1-1-TableName"><a href="#1-1-1-TableName" class="headerlink" title="1.1.1 @TableName"></a>1.1.1 <strong>@TableName</strong></h3><p>说明：</p><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TableName 注解除了指定表名以外，还可以指定很多其它属性：</p><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必须指定</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>schema</td><td>String</td><td>否</td><td>“”</td><td>schema</td></tr><tr><td>keepGlobalPrefix</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td></tr><tr><td>resultMap</td><td>String</td><td>否</td><td>“”</td><td>xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td></tr><tr><td>autoResultMap</td><td>boolean</td><td>否</td><td>false</td><td>是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td></tr><tr><td>excludeProperty</td><td>String[]</td><td>否</td><td>{}</td><td>需要排除的属性名 @since 3.3.1</td></tr></tbody></table></div><h3 id="1-1-2-TableId"><a href="#1-1-2-TableId" class="headerlink" title="1.1.2 @TableId"></a>1.1.2 <strong>@TableId</strong></h3><p>说明：</p><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TableId</code>注解支持两个属性：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>属性</strong></th><th style="text-align:left"><strong>类型</strong></th><th style="text-align:left"><strong>必须指定</strong></th><th style="text-align:left"><strong>默认值</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left">value</td><td style="text-align:left">String</td><td style="text-align:left">否</td><td style="text-align:left">“”</td><td style="text-align:left">表名</td></tr><tr><td style="text-align:left">type</td><td style="text-align:left">Enum</td><td style="text-align:left">否</td><td style="text-align:left">IdType.NONE</td><td style="text-align:left">指定主键类型</td></tr></tbody></table></div><p><code>IdType</code>支持的类型有：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>值</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left">AUTO</td><td style="text-align:left">数据库 ID 自增</td></tr><tr><td style="text-align:left">NONE</td><td style="text-align:left">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td style="text-align:left">INPUT</td><td style="text-align:left">insert 前自行 set 主键值</td></tr><tr><td style="text-align:left">ASSIGN_ID</td><td style="text-align:left">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td></tr><tr><td style="text-align:left">ASSIGN_UUID</td><td style="text-align:left">分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td></tr><tr><td style="text-align:left">ID_WORKER</td><td style="text-align:left">分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td></tr><tr><td style="text-align:left">UUID</td><td style="text-align:left">32 位 UUID 字符串(please use ASSIGN_UUID)</td></tr><tr><td style="text-align:left">ID_WORKER_STR</td><td style="text-align:left">分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td></tr></tbody></table></div><p>这里比较常见的有三种：</p><ul><li><code>AUTO</code>：利用数据库的id自增长</li><li><code>INPUT</code>：手动生成id</li><li><code>ASSIGN_ID</code>：雪花算法生成<code>Long</code>类型的全局唯一id，这是默认的ID策略</li></ul><h3 id="1-1-3-TableField"><a href="#1-1-3-TableField" class="headerlink" title="1.1.3  @TableField"></a>1.1.3  <strong>@TableField</strong></h3><p>说明：</p><blockquote><p>描述：普通字段注解</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(&quot;isMarried&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isMarried;</span><br><span class="line">    <span class="meta">@TableField(&quot;concat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String concat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下我们并不需要给字段添加 <code>@TableField</code> 注解，一些特殊情况除外：</p><ul><li>成员变量名与数据库字段名不一致</li><li>成员变量是以 <code>isXXX</code> 命名，按照 <code>JavaBean</code> 的规范，<code>MybatisPlus</code> 识别字段时会把 <code>is</code> 去除，这就导致与数据库不符。</li><li>成员变量名与数据库一致，但是与数据库的关键字冲突。使用 <code>@TableField</code>注解给字段名添加````转义</li></ul><p>支持的其它属性如下：</p><p><img src="https://i0.hdslb.com/bfs/article/5c8452a9b933bebd25f94405e0812d25645325325.png" alt="image-20240812115447764"></p><h2 id="1-2-常见配置"><a href="#1-2-常见配置" class="headerlink" title="1.2 常见配置"></a>1.2 常见配置</h2><p>大多数的配置都有默认值，因此我们都无需配置。但还有一些是没有默认值的，例如:</p><ul><li>实体类的别名扫描包</li><li>全局 id 类型</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局id类型为自增长</span></span><br></pre></td></tr></table></figure><p>需要注意的是，MyBatisPlus 也支持手写 SQL 的，而 mapper 文件的读取地址可以自己配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址，当前这个是默认值。</span></span><br></pre></td></tr></table></figure><p>可以看到默认值是 <code>classpath*:/mapper/**/*.xml</code>，也就是说我们只要把 mapper.xml 文件放置这个目录下就一定会被加载。</p><h1 id="2-核心功能"><a href="#2-核心功能" class="headerlink" title="2. 核心功能"></a>2. 核心功能</h1><h2 id="2-1-条件构造器"><a href="#2-1-条件构造器" class="headerlink" title="2.1 条件构造器"></a>2.1 条件构造器</h2><p>除了新增以外，修改、删除、查询的 SQL 语句都需要指定 where 条件。因此 BaseMapper 中提供的相关方法除了以 <code>id</code> 作为<code>where</code>条件以外，还支持更加复杂的 <code>where</code> 条件。</p><p><img src="https://i0.hdslb.com/bfs/article/83b88d49024ae990ae7a846a5064d544645325325.png" alt="img"></p><p>参数中的 <code>Wrapper</code> 就是条件构造的抽象类，其下有很多默认实现，继承关系如图：</p><p><img src="https://i0.hdslb.com/bfs/article/d541317263975a081620f75986e222a3645325325.png" alt="img"></p><p><code>Wrapper</code> 的子类 <code>AbstractWrapper</code> 提供了 where 中包含的所有条件构造方法：</p><p><img src="https://i0.hdslb.com/bfs/article/818872329e442d41009e962926cb1ccf645325325.png" alt="img"></p><p>而 QueryWrapper 在 AbstractWrapper 的基础上拓展了一个select 方法，允许指定查询字段：</p><p><img src="https://i0.hdslb.com/bfs/article/99f02662a31cec7c3c3d263d29285e48645325325.png" alt="img"></p><p>而 UpdateWrapper 在 AbstractWrapper 的基础上拓展了一个 set方法，允许指定 SQL 中的 SET 部分：</p><p><img src="https://i0.hdslb.com/bfs/article/91bc8b8eab09babcb736a7f21a417fd1645325325.png" alt="img"></p><p>接下来，我们就来看看如何利用 <code>Wrapper</code> 实现复杂查询。</p><h3 id="2-1-1-QueryWrapper"><a href="#2-1-1-QueryWrapper" class="headerlink" title="2.1.1 QueryWrapper"></a>2.1.1 QueryWrapper</h3><p>无论是修改、删除、查询，都可以使用 QueryWrapper 来构建查询条件。接下来看一些例子： </p><p><strong>查询</strong>：查询出名字中带 <code>o</code> 的，存款大于等于 1000 元的人。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;balance&quot;</span>)</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 2.查询数据</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新</strong>：更新用户名为jack的用户的余额为2000，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name = &quot;Jack&quot;</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.更新数据，user中非null字段都会作为set语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    userMapper.update(user, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-UpdateWrapper"><a href="#2-1-2-UpdateWrapper" class="headerlink" title="2.1.2 UpdateWrapper"></a><strong>2.1.2 UpdateWrapper</strong></h3><p>基于 BaseMapper 中的 update 方法更新时只能直接赋值，对于一些复杂的需求就难以实现。 例如：更新id为 <code>1,2,4</code> 的用户的余额，扣 200，对应的 SQL 应该是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user <span class="type">SET</span> <span class="variable">balance</span> <span class="operator">=</span> balance - <span class="number">200</span> WHERE id <span class="title function_">in</span> <span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span></span><br></pre></td></tr></table></figure><p>SET 的赋值结果是基于字段现有值的，这个时候就要利用UpdateWrapper 中的 setSql 功能了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    <span class="comment">// 1.生成SQL</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">            .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>) <span class="comment">// SET balance = balance - 200</span></span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids); <span class="comment">// WHERE id in (1, 2, 4)</span></span><br><span class="line">        <span class="comment">// 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据，</span></span><br><span class="line">    <span class="comment">// 而是基于UpdateWrapper中的setSQL来更新</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-LambdaQueryWrapper"><a href="#2-1-3-LambdaQueryWrapper" class="headerlink" title="2.1.3 LambdaQueryWrapper"></a><strong>2.1.3 LambdaQueryWrapper</strong></h3><p>无论是 QueryWrapper 还是 UpdateWrapper 在构造条件的时候都需要写死字段名称，会出现字符串 <code>魔法值</code> 。这在编程规范中显然是不推荐的。 那怎么样才能不写字段名，又能知道字段名呢？</p><p>其中一种办法是基于变量的 <code>gettter</code> 方法结合反射技术。因此我们只要将条件对应的字段的 <code>getter</code> 方法传递给 MybatisPlus，它就能计算出对应的变量名了。而传递方法可以使用 JDK8 中的 <code>方法引用</code> 和 <code>Lambda</code> 表达式。 因此 MybatisPlus 又提供了一套基于 Lambda 的 Wrapper，包含两个：</p><ul><li>LambdaQueryWrapper</li><li>LambdaUpdateWrapper</li></ul><p>分别对应 QueryWrapper 和 UpdateWrapper</p><p>其使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件 WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.lambda()</span><br><span class="line">            .select(User::getId, User::getUsername, User::getInfo, User::getBalance)</span><br><span class="line">            .like(User::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getBalance, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-自定义SQL"><a href="#2-2-自定义SQL" class="headerlink" title="2.2 自定义SQL"></a>2.2 自定义SQL</h2><p>在演示 UpdateWrapper 的案例中，我们在代码中编写了更新的 SQL 语句：<img src="https://i0.hdslb.com/bfs/article/c2ca59f15e262d5b0878375f8e4cac55645325325.png" alt="img"></p><p>这种写法在某些企业也是不允许的，因为 SQL 语句最好都维护在持久层，而不是业务层。就当前案例来说，由于条件是 in 语句，只能将 SQL 写在 Mapper.xml 文件，利用 foreach 来生成动态 SQL 。 这实在是太麻烦了。假如查询条件更复杂，动态 SQL 的编写也会更加复杂。</p><p>所以，MybatisPlus 提供了自定义 SQL 功能，可以让我们利用Wrapper 生成查询条件，再结合 Mapper.xml 编写 SQL</p><h3 id="2-2-1-基本用法"><a href="#2-2-1-基本用法" class="headerlink" title="2.2.1.基本用法"></a><strong>2.2.1.基本用法</strong></h3><p>以当前案例来说，我们可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用mapper的自定义方法，直接传递Wrapper</span></span><br><span class="line">    userMapper.deductBalanceByIds(<span class="number">200</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在UserMapper中自定义SQL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;money&quot;)</span> <span class="type">int</span> money, <span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就省去了编写复杂查询条件的烦恼了。</p><h3 id="2-2-2-多表关联"><a href="#2-2-2-多表关联" class="headerlink" title="2.2.2 多表关联"></a><strong>2.2.2 多表关联</strong></h3><p>理论上来讲 MyBatisPlus 是不支持多表查询的，不过我们可以利用 Wrapper 中自定义条件结合自定义 SQL 来实现多表查询的效果。 例如，我们要查询出所有收货地址在北京的并且用户 id 在 1、2、4 之中的用户</p><p>要是自己基于 mybatis 实现 SQL，大概是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">      SELECT *</span><br><span class="line">      FROM user u</span><br><span class="line">      INNER JOIN address a ON u.id = a.user_id</span><br><span class="line">      WHERE u.id</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">          #&#123;id&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      AND a.city = #&#123;city&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出其中最复杂的就是 WHERE 条件的编写，如果业务复杂一些，这里的 SQL 会更变态。</p><p>但是基于自定义 SQL 结合 Wrapper 的玩法，我们就可以利用Wrapper 来构建查询条件，然后手写 SELECT 及 FROM 部分，实现多表查询。</p><p>查询条件这样来构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomJoinWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .in(<span class="string">&quot;u.id&quot;</span>, List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>))</span><br><span class="line">            .eq(<span class="string">&quot;a.city&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用mapper的自定义方法</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.queryUserByWrapper(wrapper);</span><br><span class="line"></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在UserMapper中自定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT u.* FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">queryUserByWrapper</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>QueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure><p>当然，也可以在 <code>UserMapper.xml</code> 中写 SQL ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Service接口"><a href="#2-3-Service接口" class="headerlink" title="2.3 Service接口"></a>2.3 Service接口</h2><p>MybatisPlus 不仅提供了 BaseMapper，还提供了通用的 Service 接口及默认实现，封装了一些常用的 service 模板方法。 通用接口为 <code>IService</code>，默认实现为 <code>ServiceImpl</code>，其中封装的方法可以分为以下几类：</p><ul><li><code>save</code>：新增</li><li><code>remove</code>：删除</li><li><code>update</code>：更新</li><li><code>get</code>：查询单个结果</li><li><code>list</code>：查询集合结果</li><li><code>count</code>：计数</li><li><code>page</code>：分页查询</li></ul><h3 id="2-3-1-CRUD"><a href="#2-3-1-CRUD" class="headerlink" title="2.3.1 CRUD"></a>2.3.1 CRUD</h3><p>我们先俩看下基本的 CRUD 接口。 <strong>新增</strong>：</p><p><img src="https://i0.hdslb.com/bfs/article/42fd7711fb375c03501eaf2793e73f27645325325.png" alt="img"></p><ul><li><code>save</code>是新增单个元素</li><li><code>saveBatch</code>是批量新增</li><li><code>saveOrUpdate</code> 是根据 id 判断，如果数据存在就更新，不存在则新增</li><li><code>saveOrUpdateBatch</code>是批量的新增或修改</li></ul><p><strong>删除：</strong></p><p><img src="https://i0.hdslb.com/bfs/article/8f65a72b8fd5acca75bd261262f7b8bb645325325.png" alt="img"></p><ul><li><code>removeById</code>：根据 id 删除</li><li><code>removeByIds</code>：根据 id 批量删除</li><li><code>removeByMap</code>：根据 Map 中的键值对为条件删除</li><li><code>remove(Wrapper&lt;T&gt;)</code>：根据 Wrapper 条件删除</li><li><code>~~removeBatchByIds~~</code>：暂不支持</li></ul><p><strong>修改：</strong></p><p><img src="https://i0.hdslb.com/bfs/article/43bff06f7511ad106dfe3708ce7c217b645325325.png" alt="img"></p><ul><li><code>updateById</code>：根据 id 修改</li><li><code>update(Wrapper&lt;T&gt;)</code>：根据 <code>UpdateWrapper</code> 修改，<code>Wrapper</code>中包含 <code>set</code> 和 <code>where</code> 部分</li><li><code>update(T，Wrapper&lt;T&gt;)</code>：按照 <code>T</code> 内的数据修改与 <code>Wrapper</code>匹配到的数据</li><li><code>updateBatchById</code>：根据 id 批量修改</li></ul><p><strong>Get：</strong></p><p><img src="https://i0.hdslb.com/bfs/article/8f548b70dc679ce4afc846782b5b7f47645325325.png" alt="img"></p><ul><li><code>getById</code>：根据 id 查询 1 条数据</li><li><code>getOne(Wrapper&lt;T&gt;)</code>：根据 <code>Wrapper</code>查询 1 条数据</li><li><code>getBaseMapper</code>：获取 <code>Service</code> 内的 <code>BaseMapper</code> 实现，某些时候需要直接调用 <code>Mapper</code> 内的自定义 <code>SQL</code> 时可以用这个方法获取到 <code>Mapper</code></li></ul><p><strong>List：</strong></p><p><img src="https://i0.hdslb.com/bfs/article/905c6fdfd49ba5dde28e1ceaf20d5c7f645325325.png" alt="img"></p><ul><li><code>listByIds</code>：根据 id 批量查询</li><li><code>list(Wrapper&lt;T&gt;)</code>：根据 Wrapper 条件查询多条数据</li><li><code>list()</code>：查询所有</li></ul><p><strong>Count</strong>：</p><p><img src="https://i0.hdslb.com/bfs/article/56513bcf3044ff17d9c5f1411434ed46645325325.png" alt="img"></p><ul><li><code>count()</code>：统计所有数量</li><li><code>count(Wrapper&lt;T&gt;)</code>：统计符合 <code>Wrapper</code> 条件的数据数量</li></ul><p><strong>getBaseMapper</strong>： 当我们在 service 中要调用 Mapper 中自定义 SQL 时，就必须获取 service 对应的 Mapper，就可以通过这个方法：</p><p><img src="https://i0.hdslb.com/bfs/article/e507ac2922fda90f6ebd2159ddd252d5645325325.png" alt="img"></p><h3 id="2-3-2-基本用法"><a href="#2-3-2-基本用法" class="headerlink" title="2.3.2.基本用法"></a><strong>2.3.2.基本用法</strong></h3><p>由于 <code>Service</code> 中经常需要定义与业务有关的自定义方法，因此我们不能直接使用 <code>IService</code> ，而是自定义 <code>Service</code> 接口，然后继承 <code>IService</code> 以拓展方法。同时，让自定义的 <code>Service实现类</code> 继承 <code>ServiceImpl</code> ，这样就不用自己实现 <code>IService</code> 中的接口了。</p><p>首先，定义 <code>IUserService</code>，继承 <code>IService</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 拓展自定义方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，编写 <code>UserServiceImpl</code> 类，继承 <code>ServiceImpl</code>，实现 <code>IUserService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">                                                                                                        <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目结构如下：</p><p><img src="https://i0.hdslb.com/bfs/article/e9b3f97fd179215eaea9d16e58d9f4c3645325325.png" alt="img"></p><p>接下来，我们快速实现下面4个接口：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>编号</strong></th><th style="text-align:left"><strong>接口</strong></th><th style="text-align:left"><strong>请求方式</strong></th><th style="text-align:left"><strong>请求路径</strong></th><th style="text-align:left"><strong>请求参数</strong></th><th style="text-align:left"><strong>返回值</strong></th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">新增用户</td><td style="text-align:left">POST</td><td style="text-align:left">/users</td><td style="text-align:left">用户表单实体</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">删除用户</td><td style="text-align:left">DELETE</td><td style="text-align:left">/users/{id}</td><td style="text-align:left">用户id</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">根据id查询用户</td><td style="text-align:left">GET</td><td style="text-align:left">/users/{id}</td><td style="text-align:left">用户id</td><td style="text-align:left">用户VO</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">根据id批量查询</td><td style="text-align:left">GET</td><td style="text-align:left">/users</td><td style="text-align:left">用户id集合</td><td style="text-align:left">用户VO集合</td></tr></tbody></table></div><p>首先，我们在项目中引入几个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要配置 swagger 信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure><p>然后，接口需要两个实体：</p><ul><li>UserFormDTO：代表新增时的用户表单</li><li>UserVO：代表查询的返回结果</li></ul><p>首先是 UserFormDTO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFormDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 UserVO：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，按照 Restful 风格编写 Controller 接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.dto.UserFormDTO;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.转换DTO为PO</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class="line">        <span class="comment">// 2.新增</span></span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">        userService.removeById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        <span class="comment">// 2.处理vo</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询用户</span></span><br><span class="line">        List&lt;User&gt; users = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">// 2.处理vo</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上述接口都直接在 controller 即可实现，无需编写任何 service 代码，非常方便。</p><p>不过，一些带有业务逻辑的接口则需要在 service 中自定义实现了。例如下面的需求：</p><ul><li>根据 id 扣减用户余额</li></ul><p>这看起来是个简单修改功能，只要修改用户余额即可。但这个业务包含一些业务逻辑处理：</p><ul><li>判断用户状态是否正常</li><li>判断用户余额是否充足</li></ul><p>这些业务逻辑都要在 service 层来做，另外更新余额需要自定义 SQL，要在 mapper 中来实现。因此，我们除了要编写 controller 以外，具体的业务还要在 service 和 mapper 中编写。</p><p>首先在 UserController 中定义一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;扣减用户余额&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@PathVariable(&quot;money&quot;)</span>Integer money)</span>&#123;</span><br><span class="line">    userService.deductBalance(id, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 UserService 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是 UserServiceImpl 实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">// 2.判断用户状态</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.判断用户余额</span></span><br><span class="line">        <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.扣减余额</span></span><br><span class="line">        baseMapper.deductMoneyById(id, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是 mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;UPDATE user SET balance = balance - #&#123;money&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deductMoneyById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;money&quot;)</span> Integer money)</span>;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Lambda"><a href="#2-3-3-Lambda" class="headerlink" title="2.3.3 Lambda"></a><strong>2.3.3 Lambda</strong></h3><p>IService 中还提供了 Lambda 功能来简化我们的复杂查询及更新功能。我们通过两个案例来学习一下。</p><p>案例一：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li>name：用户名关键字，可以为空</li><li>status：用户状态，可以为空</li><li>minBalance：最小余额，可以为空</li><li>maxBalance：最大余额，可以为空</li></ul><p>可以理解成一个用户的后台管理界面，管理员可以自己选择条件来筛选用户，因此上述条件不一定存在，需要做判断。</p><p>我们首先需要定义一个查询条件实体，UserQuery 实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们在 UserController 中定义一个 controller 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> query.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> query.getMaxBalance();</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().lambda()</span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance);</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.list(wrapper);</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组织查询条件的时候，我们加入了  <code>username != null</code>  这样的参数，意思就是当条件成立时才会添加这个查询条件，类似 Mybatis 的 mapper.xml 文件中的 <code>&lt;if&gt;</code> 标签。这样就实现了动态查询条件效果了。</p><p>不过，上述条件构建的代码太麻烦了。 因此 Service 中对  <code>LambdaQueryWrapper</code>  和  <code>LambdaUpdateWrapper</code>  的用法进一步做了简化。我们无需自己通过 <code>new</code> 的方式来创建  <code>Wrapper</code> ，而是直接调用 <code>lambdaQuery</code> 和 <code>lambdaUpdate</code> 方法：</p><p>基于 Lambda 查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> query.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> query.getMaxBalance();</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.lambdaQuery()</span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 lambdaQuery 方法中除了可以构建条件，还需要在链式编程的最后添加一个 <code>list()</code> ，这是在告诉 MP 我们的调用结果需要是一个 list 集合。这里不仅可以用 <code>list()</code> ，可选的方法有：</p><ul><li><code>.one()</code>：最多1个结果</li><li><code>.list()</code>：返回集合结果</li><li><code>.count()</code>：返回计数结果</li></ul><p>MybatisPlus 会根据链式编程的最后一个方法来判断最终的返回结果。</p><p>与 lambdaQuery 方法类似， IService 中的 lambdaUpdate 方法可以非常方便的实现复杂更新业务。</p><p>例如下面的需求：</p><blockquote><p>需求：改造根据 id 修改用户余额的接口，要求如下</p><ul><li>如果扣减后余额为 0，则将用户 status 修改为冻结状态（2）</li></ul></blockquote><p>也就是说我们在扣减用户余额时，需要对用户剩余余额做出判断，如果发现剩余余额为 0，则应该将 status 修改为 2，这就是说 update 语句的 set 部分是动态的。</p><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">// 2.校验用户状态</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.校验余额是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.扣减余额 update tb_user set balance = balance - ?</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance() - money;</span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(User::getBalance, remainBalance) <span class="comment">// 更新余额</span></span><br><span class="line">            .set(remainBalance == <span class="number">0</span>, User::getStatus, <span class="number">2</span>) <span class="comment">// 动态判断，是否更新status</span></span><br><span class="line">            .eq(User::getId, id)</span><br><span class="line">            .eq(User::getBalance, user.getBalance()) <span class="comment">// 乐观锁</span></span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-批量新增"><a href="#2-3-4-批量新增" class="headerlink" title="2.3.4 批量新增"></a><strong>2.3.4 批量新增</strong></h3><p>再试试 MybatisPlus 的批处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 准备10万条数据</span></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">// 每1000条批量插入一次</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时：&quot;</span> + (e - b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用了批处理以后，比逐条新增效率提高了 10 倍左右，性能还是不错的。</p><p>不过，我们简单查看一下 <code>MybatisPlus</code> 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> getSqlStatement(SqlMethod.INSERT_ONE);</span><br><span class="line">    <span class="keyword">return</span> executeBatch(entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...SqlHelper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="type">boolean</span> <span class="title function_">executeBatch</span><span class="params">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class="type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;</span><br><span class="line">    Assert.isFalse(batchSize &lt; <span class="number">1</span>, <span class="string">&quot;batchSize must not be less than one&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxLimit</span> <span class="operator">=</span> Math.min(batchSize, size);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (E element : list) &#123;</span><br><span class="line">            consumer.accept(sqlSession, element);</span><br><span class="line">            <span class="keyword">if</span> (i == idxLimit) &#123;</span><br><span class="line">                sqlSession.flushStatements();</span><br><span class="line">                idxLimit = Math.min(idxLimit + batchSize, size);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现其实 <code>MybatisPlus</code> 的批处理是基于 <code>PrepareStatement</code> 的预编译模式，然后批量提交，最终在数据库执行时还是会有多条 insert 语句，逐条插入数据。</p><p>MySQL 的客户端连接参数中有这样的一个参数： <code>rewriteBatchedStatements</code> 。顾名思义，就是重写批处理的 <code>statement</code> 语句。</p><p>这个参数的默认值是 false，我们需要修改连接参数，将其配置为 true</p><p>修改项目中的 application.yml 文件，在 jdbc 的 url 后面添加参数<code>&amp;rewriteBatchedStatements=true</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">MySQL123</span></span><br></pre></td></tr></table></figure><h1 id="3-扩展功能"><a href="#3-扩展功能" class="headerlink" title="3. 扩展功能"></a><strong>3. 扩展功能</strong></h1><h2 id="3-1-代码生成"><a href="#3-1-代码生成" class="headerlink" title="3.1 代码生成"></a><strong>3.1 代码生成</strong></h2><p>在使用 MybatisPlus 以后，基础的 <code>Mapper</code>、<code>Service</code>、<code>PO</code> 代码相对固定，重复编写也比较麻烦。因此 MybatisPlus 官方提供了代码生成器根据数据库表结构生成 <code>PO</code>、<code>Mapper</code>、<code>Service</code> 等相关代码。只不过代码生成器同样要编码使用，也很麻烦。</p><p>这里推荐大家使用一款 <code>MybatisPlus</code> 的插件，它可以基于图形化界面完成 <code>MybatisPlus</code> 的代码生成，非常简单。</p><h2 id="3-2-静态工具"><a href="#3-2-静态工具" class="headerlink" title="3.2 静态工具"></a><strong>3.2 静态工具</strong></h2><p>有的时候 Service 之间也会相互调用，为了避免出现循环依赖问题，MybatisPlus 提供一个静态工具类： <code>Db</code> ，其中的一些静态方法与 <code>IService</code> 中方法签名基本一致，也可以帮助我们实现 CRUD 功能：</p><p><img src="https://i0.hdslb.com/bfs/article/fe9a9a2a1aeb4141d104f7329e5ccd88645325325.png" alt="img"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Db.getById(<span class="number">1L</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 利用Db实现复杂条件查询</span></span><br><span class="line">    List&lt;User&gt; list = Db.lambdaQuery(User.class)</span><br><span class="line">            .like(User::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getBalance, <span class="number">1000</span>)</span><br><span class="line">            .list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    Db.lambdaUpdate(User.class)</span><br><span class="line">            .set(User::getBalance, <span class="number">2000</span>)</span><br><span class="line">            .eq(User::getUsername, <span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：改造根据 id 用户查询的接口，查询用户的同时返回用户收货地址列表</p><p>首先，我们要添加一个收货地址的 VO 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;收货地址VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressVO</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;省&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;市&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;县/区&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;手机&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细地址&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;联系人&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否是默认 1默认 0否&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;备注&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，改造原来的 UserVO，添加一个地址属性：</p><p><img src="https://i0.hdslb.com/bfs/article/4b30d0a2ff33b4bfa191535a37d80ba4645325325.png" alt="img"></p><p>接下来，修改 UserController 中根据 id 查询用户的业务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">    <span class="comment">// 基于自定义service方法查询</span></span><br><span class="line">    <span class="keyword">return</span> userService.queryUserAndAddressById(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于查询业务复杂，所以要在 service 层来实现。首先在 IUserService 中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(Long id, Integer money)</span>;</span><br><span class="line"></span><br><span class="line">    UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在 UserServiceImpl 中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">queryUserAndAddressById</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询收货地址</span></span><br><span class="line">    List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)</span><br><span class="line">            .eq(Address::getUserId, userId)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    userVO.setAddresses(BeanUtil.copyToList(addresses, AddressVO.class));</span><br><span class="line">    <span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查询地址时，我们采用了 Db 的静态方法，因此避免了注入 AddressService，减少了循环依赖的风险。</p><h2 id="3-3-逻辑删除"><a href="#3-3-逻辑删除" class="headerlink" title="3.3 逻辑删除"></a><strong>3.3 逻辑删除</strong></h2><p>对于一些比较重要的数据，我们往往会采用逻辑删除的方案，即：</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为 true</li><li>查询时过滤掉标记为 true 的数据</li></ul><p>一旦采用了逻辑删除，所有的查询和删除逻辑都要跟着变化，非常麻烦。</p><p>为了解决这个问题，MybatisPlus 就添加了对逻辑删除的支持。</p><p><strong>注意</strong>，只有 MybatisPlus 生成的 SQL 语句才支持自动的逻辑删除，自定义 SQL 需要自己手动处理逻辑删除。</p><p>例如，我们给 <code>address</code> 表添加一个逻辑删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> address <span class="keyword">add</span> deleted bit <span class="keyword">default</span> b<span class="string">&#x27;0&#x27;</span> <span class="keyword">null</span> comment <span class="string">&#x27;逻辑删除&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后给 <code>Address</code> 实体添加 <code>deleted</code> 字段：</p><p><img src="https://i0.hdslb.com/bfs/article/cfc433d2efeb24305c3fee24f3b68638645325325.png" alt="img"></p><p>接下来，我们要在 <code>application.yml</code> 中配置逻辑删除字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><p>测试： 首先，我们执行一个删除操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteByLogic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 删除方法与以前没有区别</span></span><br><span class="line">    addressService.removeById(<span class="number">59L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法与普通删除一模一样，但是底层的SQL逻辑变了：</p><p><img src="https://i0.hdslb.com/bfs/article/90fd1a32a082d0e31f3b13f8455ae48a645325325.png" alt="img"></p><p>查询一下试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Address&gt; list = addressService.list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现id为59的确实没有查询出来，而且SQL中也对逻辑删除字段做了判断：</p><p><img src="https://i0.hdslb.com/bfs/article/7f72510ccb7e5bf81c4cbdaf0e465686645325325.png" alt="img"></p><p>综上， 开启了逻辑删除功能以后，我们就可以像普通删除一样做 CRUD ，基本不用考虑代码逻辑问题。还是非常方便的。</p><p><strong>注意</strong>： 逻辑删除本身也有自己的问题，比如：</p><ul><li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li><li>SQL 中全都需要对逻辑删除字段做判断，影响查询效率</li></ul><p>因此，我不太推荐采用逻辑删除功能，如果数据不能删除，可以采用把数据迁移到其它表的办法。</p><h2 id="3-3-通用枚举"><a href="#3-3-通用枚举" class="headerlink" title="3.3 通用枚举"></a><strong>3.3 通用枚举</strong></h2><p>User 类中有一个用户状态字段：</p><p><img src="https://i0.hdslb.com/bfs/article/e5e725a68a8127269ff02f6fd351ad99645325325.png" alt="img"></p><p>像这种字段我们一般会定义一个枚举，做业务判断的时候就可以直接基于枚举做比较。但是我们数据库采用的是 <code>int</code> 类型，对应的PO也是 <code>Integer</code> 。因此业务操作时必须手动把 <code>枚举</code> 与 <code>Integer</code> 转换，非常麻烦。</p><p>因此，MybatisPlus 提供了一个处理枚举的类型转换器，可以帮我们<strong>把枚举类型与数据库类型自动转换</strong>。</p><h3 id="3-3-1-定义枚举"><a href="#3-3-1-定义枚举" class="headerlink" title="3.3.1 定义枚举"></a><strong>3.3.1 定义枚举</strong></h3><p>我们定义一个用户状态的枚举：</p><p><img src="https://i0.hdslb.com/bfs/article/5656c78242b92db82f007507eb595f3e645325325.png" alt="img"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把 <code>User</code> 类中的 <code>status</code> 字段改为 <code>UserStatus</code>  类型：</p><p><img src="https://i0.hdslb.com/bfs/article/20bd888067095da7294b7125597524cb645325325.png" alt="img"></p><p>要让 <code>MybatisPlus</code> 处理枚举与数据库类型自动转换，我们必须告诉 <code>MybatisPlus</code> ，枚举中的哪个字段的值作为数据库值。 <code>MybatisPlus</code> 提供了 <code>@EnumValue</code> 注解来标记枚举属性：</p><p><img src="https://i0.hdslb.com/bfs/article/94467a2a29bc795dbfc9f1c2c3e044eb645325325.png" alt="img"></p><h3 id="3-3-2-配置枚举处理器"><a href="#3-3-2-配置枚举处理器" class="headerlink" title="3.3.2 配置枚举处理器"></a><strong>3.3.2 配置枚举处理器</strong></h3><p>在 application.yaml 文件中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a><strong>3.3.3 测试</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; list = userService.list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，查询出的 <code>User</code> 类的 <code>status</code> 字段会是枚举类型：</p><p><img src="https://i0.hdslb.com/bfs/article/cf70d49e02247ee6c944f6350fa13144645325325.png" alt="img"></p><p>同时，为了使页面查询结果也是枚举格式，我们需要修改 UserVO 中的 status 属性：</p><p><img src="https://i0.hdslb.com/bfs/article/d2b88642d4cea8da3b180a67997251c3645325325.png" alt="img"></p><p>并且，在 UserStatus 枚举中通过 <code>@JsonValue</code> 注解标记 JSON 序列化时展示的字段：</p><p><img src="https://i0.hdslb.com/bfs/article/5325b3d7a57f762dccb7592adba6c305645325325.png" alt="img"></p><p>最后，在页面查询，结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/ccb45e126313fd44bb8d8a56a6e658a9645325325.png" alt="img"></p><h2 id="3-4-JSON类型处理器"><a href="#3-4-JSON类型处理器" class="headerlink" title="3.4 JSON类型处理器"></a><strong>3.4 JSON类型处理器</strong></h2><p>数据库的 user 表中有一个 <code>info</code> 字段，是 JSON 类型：</p><p><img src="https://i0.hdslb.com/bfs/article/fd1c4f4ff0397a51a15c7040048b8ae6645325325.png" alt="img"></p><p>格式像这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;佛系青年&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而目前 <code>User</code> 实体类中却是 <code>String</code> 类型：</p><p><img src="https://i0.hdslb.com/bfs/article/1d15c93540cb442a3f1a7081e74d950f645325325.png" alt="img"></p><p>这样一来，我们要读取 info 中的属性时就非常不方便。如果要方便获取，info 的类型最好是一个 <code>Map</code> 或者实体类。</p><p>而一旦我们把 <code>info</code>改为 <code>对象</code> 类型，就需要在写入数据库时手动转为 <code>String</code> ，再读取数据库时，手动转换为 <code>对象</code> ，这会非常麻烦。</p><p>因此 MybatisPlus 提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理 JSON 就可以使用 <code>JacksonTypeHandler</code> 处理器。</p><p>接下来，我们就来看看这个处理器该如何使用。</p><h3 id="3-4-1-定义实体"><a href="#3-4-1-定义实体" class="headerlink" title="3.4.1 定义实体"></a><strong>3.4.1 定义实体</strong></h3><p>首先，我们定义一个单独实体类来与 info 字段的属性匹配：</p><p><img src="https://i0.hdslb.com/bfs/article/ce9f1c2df159682a9cbb6373ea3d78d5645325325.png" alt="img"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-使用类型处理器"><a href="#3-4-2-使用类型处理器" class="headerlink" title="3.4.2 使用类型处理器"></a><strong>3.4.2 使用类型处理器</strong></h3><p>接下来，将 User 类的 info 字段修改为 UserInfo 类型，并声明类型处理器：</p><p><img src="https://i0.hdslb.com/bfs/article/987bb9313e449a6a45fb8bafc3e2e669645325325.png" alt="img"></p><p>测试可以发现，所有数据都正确封装到 UserInfo 当中了：</p><p><img src="https://i0.hdslb.com/bfs/article/f2da69b1573c55e614bd91af775ec1ca645325325.png" alt="img"></p><p>同时，为了让页面返回的结果也以对象格式返回，我们要修改 UserVO 中的 info 字段：</p><p><img src="https://i0.hdslb.com/bfs/article/c0df955c4b881feb98ee469612e59480645325325.png" alt="img"></p><p>此时，在页面查询结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/3f9e1e417112c7cd1cad4c27e7a2cb8e645325325.png" alt="img"></p><h1 id="4-插件功能"><a href="#4-插件功能" class="headerlink" title="4. 插件功能"></a>4. 插件功能</h1><p>MybatisPlus 提供了很多的插件功能，进一步拓展其功能。目前已有的插件有：</p><ul><li><code>PaginationInnerInterceptor</code>：自动分页</li><li><code>TenantLineInnerInterceptor</code>：多租户</li><li><code>DynamicTableNameInnerInterceptor</code>：动态表名</li><li><code>OptimisticLockerInnerInterceptor</code>：乐观锁</li><li><code>IllegalSQLInnerInterceptor</code>：sql 性能规范</li><li><code>BlockAttackInnerInterceptor</code>：防止全表更新与删除</li></ul><p><strong>注意：</strong> 使用多个分页插件的时候需要注意插件定义顺序，建议使用顺序如下：</p><ul><li>多租户，动态表名</li><li>分页，乐观锁</li><li>sql 性能规范，防止全表更新与删除</li></ul><p>这里我们以分页插件为里来学习插件的用法。</p><h2 id="4-1-分页插件"><a href="#4-1-分页插件" class="headerlink" title="4.1 分页插件"></a><strong>4.1 分页插件</strong></h2><p>在未引入分页插件的情况下，<code>MybatisPlus</code> 是不支持分页功能的， <code>IService</code> 和 <code>BaseMapper</code> 中的分页方法都无法正常起效。 所以，我们必须配置分页插件。</p><h3 id="4-1-1-配置分页插件"><a href="#4-1-1-配置分页插件" class="headerlink" title="4.1.1 配置分页插件"></a><strong>4.1.1 配置分页插件</strong></h3><p>在项目中新建一个配置类：</p><p><img src="https://i0.hdslb.com/bfs/article/056e58ac0dbd415152662940613f3bdb645325325.png" alt="img"></p><p>其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-分页-API"><a href="#4-1-2-分页-API" class="headerlink" title="4.1.2 分页 API"></a><strong>4.1.2 分页 API</strong></h3><p>编写一个分页查询的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class="line">    Page&lt;User&gt; p = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 2.总条数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + p.getTotal());</span><br><span class="line">    <span class="comment">// 3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + p.getPages());</span><br><span class="line">    <span class="comment">// 4.数据</span></span><br><span class="line">    List&lt;User&gt; records = p.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的SQL如下：</p><p><img src="https://i0.hdslb.com/bfs/article/08c90fb72fdcb69efccaaa13f126f56d645325325.png" alt="img"></p><p>这里用到了分页参数，Page，即可以支持分页参数，也可以支持排序参数。常见的 API 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>, pageSize = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 分页参数</span></span><br><span class="line">Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line"><span class="comment">// 排序参数, 通过OrderItem来指定</span></span><br><span class="line">page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">userService.page(page);</span><br></pre></td></tr></table></figure><h2 id="4-2-通用分页实体"><a href="#4-2-通用分页实体" class="headerlink" title="4.2 通用分页实体"></a><strong>4.2 通用分页实体</strong></h2><p>现在要实现一个用户分页查询的接口，接口规范如下：</p><div class="table-container"><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>请求方式</td><td>GET</td></tr><tr><td>请求路径</td><td>/users/page</td></tr><tr><td>请求参数</td><td><code>&#123;    &quot;pageNo&quot;: 1,    &quot;pageSize&quot;: 5,    &quot;sortBy&quot;: &quot;balance&quot;,    &quot;isAsc&quot;: false,    &quot;name&quot;: &quot;o&quot;,    &quot;status&quot;: 1 &#125;</code></td></tr><tr><td>返回值</td><td><code>&#123;    &quot;total&quot;: 100006,    &quot;pages&quot;: 50003,    &quot;list&quot;: [        &#123;            &quot;id&quot;: 1685100878975279298,            &quot;username&quot;: &quot;user_9****&quot;,            &quot;info&quot;: &#123;                &quot;age&quot;: 24,                &quot;intro&quot;: &quot;英文老师&quot;,                &quot;gender&quot;: &quot;female&quot;            &#125;,            &quot;status&quot;: &quot;正常&quot;,            &quot;balance&quot;: 2000        &#125;    ] &#125;</code></td></tr><tr><td>特殊说明</td><td>如果排序字段为空，默认按照更新时间排序排序字段不为空，则按照排序字段排序</td></tr></tbody></table></div><p>这里需要定义 3 个实体：</p><ul><li><code>UserQuery</code>：分页查询条件的实体，包含分页、排序参数、过滤条件</li><li><code>PageDTO</code>：分页结果实体，包含总条数、总页数、当前页数据</li><li><code>UserVO</code>：用户页面视图实体</li></ul><h3 id="4-2-1-实体"><a href="#4-2-1-实体" class="headerlink" title="4.2.1 实体"></a><strong>4.2.1 实体</strong></h3><p>由于 UserQuery 之前已经定义过了，并且其中已经包含了过滤条件，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中缺少的仅仅是分页条件，而分页条件不仅仅用户分页查询需要，以后其它业务也都有分页查询的需求。因此建议将分页查询条件单独定义为一个 <code>PageQuery</code> 实体：</p><p><img src="https://i0.hdslb.com/bfs/article/9116162f2064a8cc9d7df82bcc427824645325325.png" alt="img"></p><p><code>PageQuery</code> 是前端提交的查询参数，一般包含四个属性：</p><ul><li><code>pageNo</code>：页码</li><li><code>pageSize</code>：每页数据条数</li><li><code>sortBy</code>：排序字段</li><li><code>isAsc</code>：是否升序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;分页查询实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAsc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，让我们的UserQuery继承这个实体：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值的用户实体沿用之前定一个 <code>UserVO</code> 实体：</p><p><img src="https://i0.hdslb.com/bfs/article/08e32a5796145c2b4aa21767e8334953645325325.png" alt="img"></p><p>最后，则是分页实体 PageDTO :</p><p><img src="https://i0.hdslb.com/bfs/article/583247ca7fd04f092635dac6e775d9db645325325.png" alt="img"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;分页结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总条数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;总页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;集合&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-开发接口"><a href="#4-2-2-开发接口" class="headerlink" title="4.2.2 开发接口"></a><strong>4.2.2 开发接口</strong></h3><p>我们在 <code>UserController</code> 中定义分页查询用户的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.dto.PageDTO;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.query.PageQuery;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.vo.UserVO;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;users&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryUsersPage(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 。。。 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>IUserService</code> 中创建 <code>queryUsersPage</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(PageQuery query)</span>;</span><br></pre></td></tr></table></figure><p>接下来，在 UserServiceImpl 中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(PageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件</span></span><br><span class="line">    <span class="comment">// 1.1.分页条件</span></span><br><span class="line">    Page&lt;User&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">    <span class="comment">// 1.2.排序条件</span></span><br><span class="line">    <span class="keyword">if</span> (query.getSortBy() != <span class="literal">null</span>) &#123;</span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(query.getSortBy(), query.getIsAsc()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 默认按照更新时间排序</span></span><br><span class="line">        page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    page(page);</span><br><span class="line">    <span class="comment">// 3.数据非空校验</span></span><br><span class="line">    List&lt;User&gt; records = page.getRecords();</span><br><span class="line">    <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(page.getTotal(), page.getPages(), Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.有数据，转换</span></span><br><span class="line">    List&lt;UserVO&gt; list = BeanUtil.copyToList(records, UserVO.class);</span><br><span class="line">    <span class="comment">// 5.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;UserVO&gt;(page.getTotal(), page.getPages(), list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，在页面查看：</p><p><img src="https://i0.hdslb.com/bfs/article/1553ff22ef4e097186845bbb7ce4f0d8645325325.png" alt="img"></p><h3 id="4-2-3-改造-PageQuery-实体"><a href="#4-2-3-改造-PageQuery-实体" class="headerlink" title="4.2.3 改造 PageQuery 实体"></a><strong>4.2.3 改造 PageQuery 实体</strong></h3><p>在刚才的代码中，从 <code>PageQuery</code> 到 <code>MybatisPlus</code> 的 <code>Page</code> 之间转换的过程还是比较麻烦的。</p><p>我们完全可以在 <code>PageQuery</code> 这个实体中定义一个工具方法，简化开发。 像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> Boolean isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;  Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(OrderItem ... orders)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.分页条件</span></span><br><span class="line">        Page&lt;T&gt; p = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="comment">// 2.排序条件</span></span><br><span class="line">        <span class="comment">// 2.1.先看前端有没有传排序字段</span></span><br><span class="line">        <span class="keyword">if</span> (sortBy != <span class="literal">null</span>) &#123;</span><br><span class="line">            p.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(sortBy, isAsc));</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2.再看有没有手动指定排序字段</span></span><br><span class="line">        <span class="keyword">if</span>(orders != <span class="literal">null</span>)&#123;</span><br><span class="line">            p.addOrder(orders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(String defaultSortBy, <span class="type">boolean</span> isAsc)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toMpPage(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(defaultSortBy, isAsc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByCreateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;create_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByUpdateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在开发也时就可以省去对从 <code>PageQuery</code> 到 <code>Page</code> 的的转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.构建条件</span></span><br><span class="line">Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br></pre></td></tr></table></figure><h3 id="4-2-4-改造-PageDTO-实体"><a href="#4-2-4-改造-PageDTO-实体" class="headerlink" title="4.2.4 改造 PageDTO 实体"></a><strong>4.2.4 改造 PageDTO 实体</strong></h3><p>在查询出分页结果后，数据的非空校验，数据的 vo 转换都是模板代码，编写起来很麻烦。</p><p>我们完全可以将其封装到 PageDTO 的工具方法中，简化整个过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.bean.BeanUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="keyword">private</span> List&lt;V&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回空分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">empty</span><span class="params">(Page&lt;P&gt; p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voClass 目标VO类型的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Class&lt;V&gt; voClass)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = BeanUtil.copyToList(records, voClass);</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> convertor PO到VO的转换函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Function&lt;P, V&gt; convertor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = records.stream().map(convertor).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，业务层的代码可以简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUserByPage</span><span class="params">(PageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    page(page);</span><br><span class="line">    <span class="comment">// 3.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> PageDTO.of(page, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是希望自定义 PO 到 VO 的转换过程，可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUserByPage</span><span class="params">(PageQuery query)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件</span></span><br><span class="line">    Page&lt;User&gt; page = query.toMpPageDefaultSortByCreateTimeDesc();</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    page(page);</span><br><span class="line">    <span class="comment">// 3.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> PageDTO.of(page, user -&gt; &#123;</span><br><span class="line">        <span class="comment">// 拷贝属性到VO</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">vo</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">        <span class="comment">// 用户名脱敏</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> vo.getUsername();</span><br><span class="line">        vo.setUsername(username.substring(<span class="number">0</span>, username.length() - <span class="number">2</span>) + <span class="string">&quot;**&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> vo;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终查询的结果如下：</p><p><img src="https://i0.hdslb.com/bfs/article/252a338f2d0322d1588c70b5134ccc50645325325.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tag Plugins</title>
      <link href="/posts/12220.html"/>
      <url>/posts/12220.html</url>
      
        <content type="html"><![CDATA[<div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>每次使用标签外挂都要去特意的搜索 ，这里把自己常用的内容给写下来 ，方便以后自己使用！</p></div><h2 id="1-Note-Bootstrap-Callout"><a href="#1-Note-Bootstrap-Callout" class="headerlink" title="1. Note (Bootstrap Callout)"></a>1. Note (Bootstrap Callout)</h2><mark class="hl-label pink">这里使用的是自定义方式</mark> <p>### simple<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="modern"><a href="#modern" class="headerlink" title="modern"></a>modern</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><h3 id="no-icon"><a href="#no-icon" class="headerlink" title="no-icon"></a>no-icon</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div><h2 id="2-tag-hide"><a href="#2-tag-hide" class="headerlink" title="2. tag-hide"></a>2. tag-hide</h2><p>block独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字(可选)</li><li>bg: 按钮的背景颜色(可选)</li><li>color: 按钮文字的颜色(可选)</li></ul><blockquote><p>案例：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案<br><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div></p><h2 id="3-Button"><a href="#3-Button" class="headerlink" title="3. Button"></a>3. Button</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn-center&quot;&gt;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h2 id="4-inlineImg"><a href="#4-inlineImg" class="headerlink" title="4. inlineImg"></a>4. inlineImg</h2><p>题中的图片都是默认以块级元素显示，如果你想以内联元素显示，可以使用这个标签外挂。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    图片链接</span><br><span class="line">[height]   ：   图片高度限制【可选】</span><br></pre></td></tr></table></figure><p>示例：我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><h2 id="5-label"><a href="#5-label" class="headerlink" title="5. label"></a>5. label</h2><blockquote><p>建议 不要 在段落开头使用 label 标签外挂</p></blockquote><p>高亮所需的文字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><ul><li>参数    解释</li><li>text    文字</li><li>color    【可选】背景颜色，默认为 default : default/blue/pink/red/purple/orange/green</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h2 id="6-timeline"><a href="#6-timeline" class="headerlink" title="6. timeline"></a>6. timeline</h2><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><ul><li>title    标题/时间线</li><li>color    timeline 颜色 : default(留空) / blue / pink / red / purple / orange / green</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用bilibili图床</title>
      <link href="/posts/62197.html"/>
      <url>/posts/62197.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><ol><li>安装<a href="https://github.com/Molunerfinn/PicGo">PicGo</a> , 然后再安装</li><li>获取B站SESSDATA<ol><li>登录<a href="https://www.bilibili.com/">B站</a></li><li>按<code>F12</code>​打开控制台</li><li>找到<code>SESSDATA</code>​还有<code>bli_jct</code>​复制即可</li></ol></li></ol><h2 id="图片样式"><a href="#图片样式" class="headerlink" title="图片样式"></a>图片样式</h2><p>例如原图： <a href="https://i0.hdslb.com/bfs/article/ce0946fa9b4dbb61dde1ae65ad153ada645325325.png">https://i0.hdslb.com/bfs/article/ce0946fa9b4dbb61dde1ae65ad153ada645325325.png</a></p><p>规定高宽，质量压缩: <a href="https://i0.hdslb.com/bfs/article/ce0946fa9b4dbb61dde1ae65ad153ada645325325.png@104w_104h_1e_1c.jpg">https://i0.hdslb.com/bfs/article/ce0946fa9b4dbb61dde1ae65ad153ada645325325.png@104w_104h_1e_1c.jpg</a></p><div class="table-container"><table><thead><tr><th>Type</th><th>Url</th></tr></thead><tbody><tr><td>原图</td><td>baseURL/1.jpg</td></tr><tr><td>原分辨率，质量压缩</td><td>baseURL/<a href="mailto:1.jpg@1e_1c.jpg">1.jpg@1e_1c.jpg</a></td></tr><tr><td>规定宽，高度自适应，质量压缩</td><td>baseURL/<a href="mailto:1.jpg@104w_1e_1c.jpg">1.jpg@104w_1e_1c.jpg</a></td></tr><tr><td>规定高，宽度自适应，质量压缩</td><td>baseURL/<a href="mailto:1.jpg@104h_1e_1c.jpg">1.jpg@104h_1e_1c.jpg</a></td></tr><tr><td>规定高宽，质量压缩</td><td>baseURL/<a href="mailto:1.jpg@104w_104h_1e_1c.jpg">1.jpg@104w_104h_1e_1c.jpg</a></td></tr><tr><td>原分辨率，webp格式(占用最小)</td><td>baseURL/<a href="mailto:1.jpg@104w_104h_1e_1c.webp">1.jpg@104w_104h_1e_1c.webp</a></td></tr><tr><td>规定高度，webp格式(占用最小)</td><td>baseURL/<a href="mailto:1.jpg@104w_104h_1e_1c.webp">1.jpg@104w_104h_1e_1c.webp</a></td></tr></tbody></table></div><p>格式：(图像原链接)@(\d+[whsepqoc]_?)*(.(|webp|gif|png|jpg|jpeg))?$</p><ul><li>w:[1, 9223372036854775807] (width，图像宽度)</li><li>h:[1, 9223372036854775807] (height，图像高度)</li><li>s:[1, 9223372036854775807] (作用未知)</li><li>e:[0,2] (resize，0:保留比例取其小，1:保留比例取其大，2:不保留原比例，不与c混用)</li><li>p:[1,1000] (默认100，放大倍数，不与c混用)</li><li>q:[1,100] (quality，默认75，图像质量)</li><li>o:[0,1] (作用未知)</li><li>c:[0,1] (clip，0:默认，1:裁剪)</li><li>webp,png,jpeg,gif(不加则保留原格式)</li><li>不区分大小写，相同的参数后面覆盖前面</li><li>计算后的实际w<em>h不能大于原w</em>h，否则wh参数失效</li></ul><h2 id="解决B站防盗链（403）"><a href="#解决B站防盗链（403）" class="headerlink" title="解决B站防盗链（403）"></a>解决B站防盗链（403）</h2><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>B站开启了防盗链，利用的是HTTP的Referer属性做判断。如果Referer是他白名单之外的网站，就会返回403</p></div><h4 id="全站图片使用"><a href="#全站图片使用" class="headerlink" title="全站图片使用"></a>全站图片使用</h4><p>在html的head标签中设置如下标志，那么全站资源引用都不会携带referrer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新窗口打开"><a href="#新窗口打开" class="headerlink" title="新窗口打开"></a>新窗口打开</h4><p>主要设置<code>rel=&quot;noreferrer&quot;</code>​，使用<code>window.open</code>​打开的话是会默认携带<code>referrer</code>​的，第一次还是会403</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>图片测试：<br>‍<br><img src="https://i0.hdslb.com/bfs/article/17b5b67790c291b15ad6930078b0b1da645325325.png@1e_1c.webp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健身日记</title>
      <link href="/posts/5413be0e.html"/>
      <url>/posts/5413be0e.html</url>
      
        <content type="html"><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>行万里路 ，练百万拳</p></div><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>TimeLine</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-08-13 07:33</p></div></div><div class='timeline-item-content'><p>更像是健身日寄</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 月影墨书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空话艺术2：我觉得工作实习都很忙，没空去学习和积累</title>
      <link href="/posts/50040.html"/>
      <url>/posts/50040.html</url>
      
        <content type="html"><![CDATA[<div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>核心矛盾不是在忙不忙上，而是你的欲望是否真的在这件事情上面。很多人自己先自我催眠上了</p></div><h2 id="最常见的两种沟通是这样子的"><a href="#最常见的两种沟通是这样子的" class="headerlink" title="最常见的两种沟通是这样子的"></a><span data-type="text" style="color: var(--b3-font-color10);">最常见的两种沟通是这样子的</span></h2><ol><li>一种和我说，陈老师，我现在很忙，或者我觉得未来我学习很忙，又要毕业又要忙实习，但我觉得这些没有啥价值，浪费了我的时间，我根本没时间去学习，去社交</li><li>另外一种就是和我说，哎呀，我现在工作很忙，加班很严重，balabala。然后说自己没空去学习，去社交</li><li>然后还有一种呢就是说让我二选一的，比如现在有个什么offer或者有个什么硕士要不要去读，然后说自己想更好的做商业，去积累，要去学习等等，要找一些空一点的或者说就是相对加班不那么严重的选择</li><li>说真的，有时候我也是傻逼，我真的被他们带过去了，然后开始认真分析这些选择，然后我就突然意识到，不对啊</li><li>核心矛盾是在忙上面么？？？？</li></ol><h2 id="核心矛盾"><a href="#核心矛盾" class="headerlink" title="核心矛盾"></a><span data-type="text" style="color: var(--b3-font-color4);">核心矛盾</span></h2><ol><li>我们以前就说过，学习本身是<span data-type="text" style="background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);">需要方法的</span>，也是<span data-type="text" style="background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);">需要毅力的</span>。而方法和实践是相辅相成的</li><li>就比如我们说社交，社交层面怎么和别人自我介绍呢？介绍之后又应该说点什么呢？和人怎么开始沟通，到沟通业务，到合作呢？</li><li>你说有没有方法论，也有，但其实如何让你自己融会贯通是需要你不停的去实践的</li><li>而在社会上，成功本来就是小概率事件，也就是说你碰见的大部分人其实无法和你合作或者说会直接拒绝你。那么你就需要不停的去尝试，复盘，修正，实践</li><li>所以核心矛盾其实是两个，<span data-type="text" style="background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);">一个是有没有比较好的学习的方法，或者说搜索信息的能力</span>，<span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">另外一个就是你有没有毅力</span></li></ol><h2 id="现在的信息其实都是碎片化的，甚至很多都不是有效信息"><a href="#现在的信息其实都是碎片化的，甚至很多都不是有效信息" class="headerlink" title="现在的信息其实都是碎片化的，甚至很多都不是有效信息"></a>现在的信息其实都是碎片化的，甚至很多都不是有效信息</h2><ol><li>其实到了现在，我每次就会反问他们，如果你们空了，或者选择了一个放弃一个循规蹈矩的选择之后，你真的会去学习么？而不是刷dy呢？而不是去谈恋爱呢？</li><li>但如果你根本不能有毅力的去积累去学习，那么你当初为什么要去做这个选择呢？等你回过神来的时候，是不是就后悔了</li><li>其实大概率是这样的问题，很多人其实在这个时代，只要没人去教，没有系统性的学习资料，自己基本上已经不会学习了，<span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">什么都要别人教</span></li><li>那么你说自己很忙，没空balabala，就已经毫无意义了</li></ol><h2 id="所以反向也是一样的，你不能说工作或者读书太忙就没空学习"><a href="#所以反向也是一样的，你不能说工作或者读书太忙就没空学习" class="headerlink" title="所以反向也是一样的，你不能说工作或者读书太忙就没空学习"></a>所以反向也是一样的，你不能说工作或者读书太忙就没空学习</h2><ol><li>能忙到哪儿去？完全不能摸鱼？就现在这种生产力过剩的情况下，我不能说完全没有这种现象吧，但是那么多人都和我这样说，就过分了吧</li><li>而且大部分人也都是年轻人，我他妈每次问他们，怎么了，这公司开了5-10年了，就缺你这样一个人？你摸鱼了，甚至未来你不做了，怎么了？倒闭了？</li><li><span data-type="text" style="background-color: var(--b3-card-success-background); color: var(--b3-card-success-color);">所以本质上还是自己没有动起来，没有走出第一步</span>，所以就下意识的去说工作忙，自己累，或者怎么样。</li><li>咱就这样说，当下 这个时代，谁不累？谁不忙？<span data-type="text" style="background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);">既然要有所突破，要0到1，不得付出比其他人更多的时间么？</span>否则呢？</li></ol>]]></content>
      
      
      <categories>
          
          <category> 月湖笔谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 空话艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空话艺术1：xxx决定了下限</title>
      <link href="/posts/1705.html"/>
      <url>/posts/1705.html</url>
      
        <content type="html"><![CDATA[<h3 id="很多人就喜欢说空话"><a href="#很多人就喜欢说空话" class="headerlink" title="很多人就喜欢说空话"></a>很多人就喜欢说空话</h3><ol><li>比如这种<code>xx决定下限</code>​比如什么学历啊 ，工作经历啊 ，大厂啊 ，和谁谁合作啊 ，决定下限</li><li>我们就分开来说 ，某个东西是决定了大众的下限？如果摸个东西决定了大众的下限 ，那么下限是什么？找得到工作？还是最低薪资？但现在保证了么？并没有啊？那决定什么下限？</li><li>如果说一个东西宏观层面决定了大众的下限 ，并没有特定的案例或者case by case的去分析 ，不就是空话嘛</li><li>如果这个决定的下限和你无关 ，和某个特定的人无关 ，那么这不就屁话吗？</li></ol><h3 id="我问几个问题"><a href="#我问几个问题" class="headerlink" title="我问几个问题"></a>我问几个问题</h3><ol><li>你出了社会之后，去哪工作你能决定嘛？你能很稳定的工作到几岁你能决定吗？未来会发生什么你能决定吗？或者话有说回来 ，你能决定什么？</li><li>你对社会了解多少？还是你做不做 ，随便做 ，家里都能兜底</li><li>无论谁都无法再任何事情上做出肯定的一种决定 ，这就是社会本身 ，那么也就是说 ，要真的说下限只有你自己 ，特定情况特定分析 ，比如你什么性格 ，你什么做事儿的态度 ，你什么行业 ，你大概会什么 ，综合来讲决定你的下限</li><li>而不是一个什么学历 ，学校或者说一个工作经验就决定你的下限了。要真的能那么简单和容易 ，大家也没有必要卷了</li></ol><h3 id="无法理解下限指的是什么？"><a href="#无法理解下限指的是什么？" class="headerlink" title="无法理解下限指的是什么？"></a>无法理解下限指的是什么？</h3><ol><li>下限指的是啥 ，我一直不明太 ，工作？收入 ？ 对象？资产？还是户口？还是啥？</li><li>因为这一切里面没有肯定的因果关系 ，既然没有肯定的因果关系 ，这就是一个空话</li><li>这话放出来就是为了 pua 自己 ，恶心哪些没有下限的人 ，就让自己感觉到 ，可以了 ，反正有了一个学历 ，去了大厂就好了 ，就有了下限了 。然后告诉哪些没有这些学历 ，没有这些经验的人 ，你们不行</li><li>我话就扔着了 ，30多岁开始 ，决定下限的只有关系和资源 ，别的任何用处都没有 ，因为有同样的牌的人太多了 ，怎么了 ？大家下限都一样 ？你们自己可以多想想</li></ol><h3 id="真正明白决定一个人发展的也是说不出这种话的"><a href="#真正明白决定一个人发展的也是说不出这种话的" class="headerlink" title="真正明白决定一个人发展的也是说不出这种话的"></a>真正明白决定一个人发展的也是说不出这种话的</h3><ol><li>说白了 ，网路上也好 ，你们领导也罢 ，但凡和你们说这种话的 ，你们就要清楚 ，多方要么自己就是没想明白 ，要么就是pua你 ，肯定是不靠谱的</li><li>真正明白一个人怎么发展 ，怎么生存 ，一定要结合你个人的实际情况下 ，来讲到底什么东西能给你带来什么影响 ，以及某些东旭也许是加分项 ，但也是比例加分 ，不是固定的加分</li><li>俗话说得好 ，死也要死的明白 ，我就算没有天赋 ，没有什么特殊技能 ，我就算最后就是下限很低 ，但我也清楚的确有这种关系 ，我不想一直活在被别人pua的世界里 ，直到某一天发现和我认知的不同</li><li>所以我还是那句话 ，宏观的正确的话不要说出来 ，都是空话 ，除了pua自己 ，就是害了别人</li></ol><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 月湖笔谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 空话艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思源笔记常用代码片段</title>
      <link href="/posts/42038.html"/>
      <url>/posts/42038.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景色设置"><a href="#背景色设置" class="headerlink" title="背景色设置"></a>背景色设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--b3-font-background1</span>: <span class="number">#423a3a</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background2</span>: <span class="number">#4b3722</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background3</span>: <span class="number">#203854c2</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background4</span>: <span class="number">#2c5438a3</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background5</span>: <span class="number">#4c525778</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background6</span>: <span class="number">#1b3f758a</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background7</span>: <span class="number">#664a1c73</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background8</span>: <span class="number">#5b1d1770</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background9</span>: <span class="number">#541b3594</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background10</span>: <span class="number">#6b2f6b70</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background11</span>: <span class="number">#2f4c264f</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background12</span>: <span class="number">#72390f54</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attr">--b3-font-background13</span>: <span class="number">#3c3c3cd9</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文字加粗颜色"><a href="#文字加粗颜色" class="headerlink" title="文字加粗颜色"></a>文字加粗颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">strong</span>, <span class="selector-class">.b3-typography</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">strong</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=strong]</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#73a6ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用块美化"><a href="#引用块美化" class="headerlink" title="引用块美化"></a>引用块美化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.b3-typography</span> <span class="selector-class">.bq</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.bq</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#0b960e</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--b3-list-hover);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="底部栏颜色"><a href="#底部栏颜色" class="headerlink" title="底部栏颜色"></a>底部栏颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.status</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#3C3C3C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status</span> * &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#Dadada</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Cascadia Mono&#x27;</span>, <span class="string">&#x27;Cascadia Code&#x27;</span>, <span class="string">&#x27;Microsoft YaHei UI&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=a]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#7badff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--b3-border-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题头图"><a href="#题头图" class="headerlink" title="题头图"></a>题头图</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-background__img</span> &#123;</span><br><span class="line"><span class="attribute">opacity</span>:<span class="number">1</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用快字体颜色"><a href="#引用快字体颜色" class="headerlink" title="引用快字体颜色"></a>引用快字体颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.b3-typography</span> <span class="selector-class">.bq</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.bq</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#DADADA</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#0b960e</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--b3-list-hover);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改图片亮度"><a href="#修改图片亮度" class="headerlink" title="修改图片亮度"></a>修改图片亮度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-class">.img</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    user-<span class="selector-tag">select</span>: none;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大纲字体大小"><a href="#大纲字体大小" class="headerlink" title="大纲字体大小"></a>大纲字体大小</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fn__flex-column</span><span class="selector-class">.layout__dockr</span> <span class="selector-class">.file-tree</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块字体样式"><a href="#代码块字体样式" class="headerlink" title="代码块字体样式"></a>代码块字体样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-class">.hljs</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.hljs</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Consolas <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-comment</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="钉住的同时显示-icon-和标题-CSS-片段"><a href="#钉住的同时显示-icon-和标题-CSS-片段" class="headerlink" title="钉住的同时显示 icon 和标题 CSS 片段"></a>钉住的同时显示 icon 和标题 CSS 片段</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 钉住的同时显示 icon 和标题 CSS片段 */</span></span><br><span class="line"><span class="selector-class">.layout-tab-bar</span> <span class="selector-class">.item</span><span class="selector-class">.item--pin</span> <span class="selector-class">.item__text</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">max-width</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类似-logseq-的层次子弹线-CSS-片段"><a href="#类似-logseq-的层次子弹线-CSS-片段" class="headerlink" title="类似 logseq 的层次子弹线 CSS 片段"></a>类似 logseq 的层次子弹线 CSS 片段</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 类似 logseq 的层次子弹线 CSS片段 */</span></span><br><span class="line"><span class="comment">/* REF https://github.com/svchord/Rem-Craft */</span></span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span> <span class="selector-tag">svg</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">0px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">pointer-events</span>:none;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>))<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>:-<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-class">.li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>))<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">24px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">28px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">pointer-events</span>:none;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:solid;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">:has</span>(+<span class="selector-class">.list</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:auto;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-attr">[data-type=NodeHeading]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">185%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.bq</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.bq</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.sb</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-class">.sb</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)~<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[fold=<span class="string">&quot;1&quot;</span>]</span>&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>,<span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">:has</span>(&gt;<span class="selector-class">.block-focus</span>)&gt;<span class="selector-attr">[data-node-id]</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=o]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">28px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">70</span>, <span class="number">110</span>, <span class="number">220</span>);;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.protyle-action</span> <span class="selector-tag">svg</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">0px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">14px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">32px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.protyle-wysiwyg</span> <span class="selector-attr">[data-node-id]</span><span class="selector-class">.li</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-attr">[data-subtype=t]</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)<span class="selector-class">.protyle-task--done</span>&gt;<span class="selector-class">.list</span><span class="selector-pseudo">:has</span>(<span class="selector-class">.block-focus</span>)&gt;<span class="selector-class">.li</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="built_in">rgba</span>(<span class="number">139</span>, <span class="number">139</span>, <span class="number">139</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类似-logseq-的层次子弹线-JS-片段"><a href="#类似-logseq-的层次子弹线-JS-片段" class="headerlink" title="类似 logseq 的层次子弹线 JS 片段"></a>类似 logseq 的层次子弹线 JS 片段</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 类似 logseq 的层次子弹线 JS片段 */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得指定块位于的编辑区</span></span><br><span class="line"><span class="comment"> * @params &#123;HTMLElement&#125;</span></span><br><span class="line"><span class="comment"> * @return &#123;HTMLElement&#125; 光标所在块位于的编辑区</span></span><br><span class="line"><span class="comment"> * @return &#123;null&#125; 光标不在块内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function getTargetEditor(block) &#123;</span><br><span class="line">    while (block != null &amp;&amp; !block<span class="selector-class">.classList</span><span class="selector-class">.contains</span>(&#x27;protyle-wysiwyg&#x27;)) block = block<span class="selector-class">.parentElement</span>;</span><br><span class="line">    return block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得焦点所在的块</span></span><br><span class="line"><span class="comment"> * @return &#123;HTMLElement&#125; 光标所在块</span></span><br><span class="line"><span class="comment"> * @return &#123;null&#125; 光标不在块内</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">function getFocusedBlock() &#123;</span><br><span class="line">    if (document<span class="selector-class">.activeElement</span><span class="selector-class">.classList</span><span class="selector-class">.contains</span>(&#x27;protyle-wysiwyg&#x27;)) &#123;</span><br><span class="line">        let block = window<span class="selector-class">.getSelection</span>()?<span class="selector-class">.focusNode</span>?<span class="selector-class">.parentElement</span>; // 当前光标</span><br><span class="line">        while (block != null &amp;&amp; block<span class="selector-class">.dataset</span><span class="selector-class">.nodeId</span> == null) block = block<span class="selector-class">.parentElement</span>;</span><br><span class="line">        return block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function focusHandler() &#123;</span><br><span class="line">    <span class="comment">/* 获取当前编辑区 */</span></span><br><span class="line">    let block = getFocusedBlock(); // 当前光标所在块</span><br><span class="line">    <span class="comment">/* 当前块已经设置焦点 */</span></span><br><span class="line">    if (block?<span class="selector-class">.classList</span><span class="selector-class">.contains</span>(`block-focus`)) return;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 当前块未设置焦点 */</span></span><br><span class="line">    const editor = getTargetEditor(block); // 当前光标所在块位于的编辑区</span><br><span class="line">    if (editor) &#123;</span><br><span class="line">        editor<span class="selector-class">.querySelectorAll</span>(`<span class="selector-class">.block-focus</span>`)<span class="selector-class">.forEach</span>((element) =&gt; element<span class="selector-class">.classList</span><span class="selector-class">.remove</span>(`block-focus`));</span><br><span class="line">        block<span class="selector-class">.classList</span><span class="selector-class">.add</span>(`block-focus`);</span><br><span class="line">        // setSelector(block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bulletMain() &#123;</span><br><span class="line">    // 跟踪当前所在块</span><br><span class="line">    window<span class="selector-class">.addEventListener</span>(&#x27;mouseup&#x27;, focusHandler, true);</span><br><span class="line">    window<span class="selector-class">.addEventListener</span>(&#x27;keyup&#x27;, focusHandler, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    bulletMain();</span><br><span class="line">    console<span class="selector-class">.log</span>(&#x27;加载子弹线成功&#x27;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="去除图片后的多余空行-CSS-片段"><a href="#去除图片后的多余空行-CSS-片段" class="headerlink" title="去除图片后的多余空行 CSS 片段"></a>去除图片后的多余空行 CSS 片段</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 去除图片后的多余空行 CSS片段 */</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-class">.img</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[style]</span>), <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.img</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[style]</span>) &#123;</span><br><span class="line">   <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码块字体设置"><a href="#代码块字体设置" class="headerlink" title="代码块字体设置"></a>代码块字体设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-theme-on-background);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.b3-typography</span> <span class="selector-class">.bq</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.bq</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--b3-list-hover);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚线备注"><a href="#虚线备注" class="headerlink" title="虚线备注"></a>虚线备注</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 虚线备注 CSS片段 https://github.com/TCOTC/siyuan-css-dashed-line-memo */</span></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=inline-memo]</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">span</span><span class="selector-attr">[data-type~=inline-memo]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> dashed <span class="built_in">var</span>(--b3-theme-primary) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="隐藏大纲前面的块标记-H"><a href="#隐藏大纲前面的块标记-H" class="headerlink" title="隐藏大纲前面的块标记 H"></a>隐藏大纲前面的块标记 H</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sy__outline</span> <span class="selector-class">.b3-list-item__graphic</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-wysiwyg</span>&gt;<span class="selector-class">.p</span> &#123;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">2.3</span>;  <span class="comment">/*段落块的行间距，段间距的话前面该改成margin*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="文档树块间距"><a href="#文档树块间距" class="headerlink" title="文档树块间距"></a>文档树块间距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.b3-list-item</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--b3-theme-on-background);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b3-typography</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.b3-typography</span> <span class="selector-class">.bq</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.protyle-wysiwyg</span> <span class="selector-class">.bq</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--b3-list-hover);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标题居中"><a href="#标题居中" class="headerlink" title="标题居中"></a>标题居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.protyle-title__input</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="plugin-custom-fonts-style"><a href="#plugin-custom-fonts-style" class="headerlink" title="plugin-custom-fonts-style"></a>plugin-custom-fonts-style</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Twemoji Mozilla: https://github.com/mozilla/twemoji-colr */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Twemoji Mozilla&quot;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;plugins/custom-fonts/static/fonts/Twemoji.Mozilla/Twemoji.Mozilla-0.7.0.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attr">--b3-font-family-emoji</span>: <span class="string">&quot;Twemoji Mozilla&quot;</span>, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>, <span class="string">&quot;Segoe UI&quot;</span>, <span class="string">&quot;Apple Color Emoji&quot;</span>, <span class="string">&quot;Noto Color Emoji&quot;</span>, <span class="string">&quot;Android Emoji&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 思源笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思源笔记相关CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Callout样式</title>
      <link href="/posts/442fdc66.html"/>
      <url>/posts/442fdc66.html</url>
      
        <content type="html"><![CDATA[<p>使用插件：<code>Savor Callout</code></p><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240630102100-xcvud18.png" alt="image">​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Info&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;🎐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New Callout&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(8, 109, 221, 0.15)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(53, 76, 75, .5)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(238, 245, 248, .3)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgbaa(53, 76, 75, 1)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240630102033-95ggmba.png" alt="image">​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;🍃&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New Callout&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(8, 185, 78, 0.1)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(53, 76, 75, .5)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(238, 245, 248, .3)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgbaa(53, 76, 75, 1)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240630102115-gje9wuz.png" alt="image">​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Example&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;📌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New Callout&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(217, 201, 248, 0.38)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(53, 76, 75, .5)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(238, 245, 248, .3)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgbaa(53, 76, 75, 1)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/image-20240630102144-uvspsd3.png" alt="image">​</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Danger&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;🖌&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New Callout&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(255, 235, 236, 80)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(53, 76, 75, .5)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgba(238, 245, 248, .3)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgbaa(53, 76, 75, 1)&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hide&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 思源笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思源笔记相关CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于独处</title>
      <link href="/posts/750cb0cc.html"/>
      <url>/posts/750cb0cc.html</url>
      
        <content type="html"><![CDATA[<p>你开始有一点抑郁的迹象了，是不是最近学习压力大，或者是与宿友同学的关系处理不太好，建议你不要总是把自己封闭在一个狭小的空间，多出去走走，也可以出去做做运动，或者是参加学校一些集体活动，或者去图书馆几本书看，心情会舒畅很多，孤独感也会自然而然消除了，如果你总是习惯性的回到宿舍躺在床上玩手机，久而久之你会对手机产生依赖，甚至网络上的一些错误的观念会直接影响你的思想，沉迷与短视频后，它会占用你大量的个人时间，一旦产生依赖，就是很难专注的学习，制定的学习计划也会沉迷网络难以执行下去，甚至会因为网络上一些错误的观念中途停止计划。还有就是你的身体，由于你习惯性躺在床上玩手机，沉迷于网络，久而久之你的身体素质会慢慢变差，身体开始会出现一些疾病，到后期的话你可能就需要经常去医院了。你的社交圈也会因为你经常封闭在一个空间里面无法拓展，你的思维能力与表达能力也会逐渐衰退。还有就是你认为二本不好，那你知不知道其实在中国，能够有拥有本科学历的比例其实并不高，绝大多人学历只有初中到大专的学历，你这个学历，你去那些知名的公司与政府单位可能不会受待见，但如果是去一些普通的工厂，你已经是算是高学历的人才，能够胜任技术工程师与办公室的文职工作，而不是去流水线打螺丝。还有就是你觉得二本不好，可能是别人给你灌输的观念，但如果你接受了这种观念，你的思想与行为会收到很大影响，思想会变得自卑，不思进取，行为也会变得缺乏动力，因为从心理上你已经定义了你自己是不行，你给自己贴上的标签，会很大程度影响日后的所有行动。不要小瞧心理对人的影响，往正面看他可以使一个人变得越来越上进，往负面看它也可以在无形中废掉一个人。抱怨是不会对现状有任何改变的，只会逐渐让你丧失斗志对生活失去希望，你唯有抱有一种永不服输的精神，你才会有那勇气，恒心，毅力去克服阻碍前进道路的所有困难。其实也没有什么好悲哀，如果是生活给你制造各种困难，那你应该想着如何解决这个困难，又或者是某些人给你制造了问题，你就要想如何去解决这个问题，当你能够凭借你的智慧把困难解决，那么在你前进道路上的阻碍就变少了，你的人生道路会越来越顺畅。甚至一些曾经的缺点也会因为经过改变后变成你的优点。</p>]]></content>
      
      
      <categories>
          
          <category> 月影墨书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly-自用数据记录</title>
      <link href="/posts/59798.html"/>
      <url>/posts/59798.html</url>
      
        <content type="html"><![CDATA[<h2 id="博客宽屏适配（自用）"><a href="#博客宽屏适配（自用）" class="headerlink" title="博客宽屏适配（自用）"></a>博客宽屏适配（自用）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 全局宽度 */</span></span><br><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1460px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 侧边卡片栏宽度 */</span></span><br><span class="line"><span class="selector-class">.aside-content</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">318px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板尺寸自适应(不启用侧边栏宽度限制) */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside-content</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.hide-aside</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人信息卡片背景图"><a href="#个人信息卡片背景图" class="headerlink" title="个人信息卡片背景图"></a>个人信息卡片背景图</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://s11.ax1x.com/2023/05/02/p9GWEin.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: inherit;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://s11.ax1x.com/2023/05/02/p9GWVGq.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: inherit;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息卡片背景图 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人卡片信息 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">24px</span> <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章卡片擦亮动画"><a href="#文章卡片擦亮动画" class="headerlink" title="文章卡片擦亮动画"></a>文章卡片擦亮动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: -webkit-transform .<span class="number">3s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: -moz-transform .<span class="number">3s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: -o-transform .<span class="number">3s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: -ms-transform .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">3s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">15%</span>,-<span class="number">150%</span>,<span class="number">0</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">15%</span>,-<span class="number">150%</span>,<span class="number">0</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">15%</span>,-<span class="number">150%</span>,<span class="number">0</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">15%</span>,-<span class="number">150%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">15%</span>,-<span class="number">150%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span> <span class="selector-class">.post_cover</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">130%</span>,<span class="number">0</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">130%</span>,<span class="number">0</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">130%</span>,<span class="number">0</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">130%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">130%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章卡片擦亮动画 */</span></span><br></pre></td></tr></table></figure><h2 id="翻页按钮"><a href="#翻页按钮" class="headerlink" title="翻页按钮"></a>翻页按钮</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 翻页按钮居中 */</span></span><br><span class="line"><span class="selector-id">#pagination</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章标题居中"><a href="#文章标题居中" class="headerlink" title="文章标题居中"></a>文章标题居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#page-header</span> <span class="selector-id">#post-info</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">/* 这里的bottom：的值可以调节标题的上下位置 */</span></span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章字体"><a href="#文章字体" class="headerlink" title="文章字体"></a>文章字体</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;HarmonyOS_Sans_SC_Medium&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>:HarmonyOS_Sans_SC_Medium;<span class="attribute">font-style</span>: normal;<span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/irozhi/HarmonyOS-Sans/HarmonyOS_Sans_SC/HarmonyOS_Sans_SC_Medium.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">&#x27;https://cdn.jsdelivr.net/gh/irozhi/HarmonyOS-Sans/HarmonyOS_Sans_SC/HarmonyOS_Sans_SC_Medium.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章行间距"><a href="#文章行间距" class="headerlink" title="文章行间距"></a>文章行间距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章行间距 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2.3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间轴背景图"><a href="#时间轴背景图" class="headerlink" title="时间轴背景图"></a>时间轴背景图</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 时间轴样式 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* background-color: #49b1f5; */</span></span><br><span class="line">  <span class="attribute">background-position</span>: center center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/NorthPoet/images/images/picture-2312336.jpg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜单字体样式"><a href="#菜单字体样式" class="headerlink" title="菜单字体样式"></a>菜单字体样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 字体 */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;ZhuZiAYuanJWD&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航栏居中"><a href="#导航栏居中" class="headerlink" title="导航栏居中"></a>导航栏居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 导航栏 */</span></span><br><span class="line"><span class="comment">/* 一级菜单居中 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: fit-content <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子菜单横向展示 */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */</span></span><br><span class="line"><span class="selector-class">.menus_items</span> <span class="selector-class">.menus_item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-class">.menus_item_child</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">125px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡片边框"><a href="#卡片边框" class="headerlink" title="卡片边框"></a>卡片边框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cardHover</span>,</span><br><span class="line"><span class="selector-class">.error404</span> <span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span>,</span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>),</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>,</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-class">.recent-posts</span> <span class="selector-class">.pagination</span>&gt;*<span class="selector-pseudo">:not</span>(<span class="selector-class">.space</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-box-shadow);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-box-shadow);</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cardHover</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.error404</span> <span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>)<span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-class">.recent-posts</span> <span class="selector-class">.pagination</span>&gt;*<span class="selector-pseudo">:not</span>(<span class="selector-class">.space</span>)<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-hover-box-shadow);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-hover-box-shadow);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#425AEF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带框框的分类样式"><a href="#带框框的分类样式" class="headerlink" title="带框框的分类样式"></a>带框框的分类样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.category-lists</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2em</span> <span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5em</span> <span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">  -webkit-<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid <span class="number">#e3e8f7</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category-lists</span> <span class="selector-class">.category-list</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5em</span> <span class="number">0</span> <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带框框的标签样式"><a href="#带框框的标签样式" class="headerlink" title="带框框的标签样式"></a>带框框的标签样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tag-cloud-list</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.2em</span> <span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5em</span> <span class="number">0.5em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">  -webkit-<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1.5px</span> solid <span class="number">#e3e8f7</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tag-cloud-list</span><span class="selector-class">.is-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5em</span> <span class="number">0</span> <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文章头部增加高度"><a href="#文章头部增加高度" class="headerlink" title="文章头部增加高度"></a>文章头部增加高度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">460px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="侧边栏标签统一字体大小"><a href="#侧边栏标签统一字体大小" class="headerlink" title="侧边栏标签统一字体大小"></a>侧边栏标签统一字体大小</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 侧边栏标签统一字体大小 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻语时光</title>
      <link href="/posts/8ebfad52.html"/>
      <url>/posts/8ebfad52.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>小北の碎碎念</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-19 16:20</p></div></div><div class='timeline-item-content'><p>理想主义的花，不会开在浪漫主义的土地里，终有一天，你会放弃理想，对浪漫不再期待，就像把自己的灵魂浸入那臭不可闻的下水道淤泥里，既不死也不活</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-16 14:20</p></div></div><div class='timeline-item-content'><p>再重新听一遍剑来也是个不错的选择<br><img src="https://i0.hdslb.com/bfs/article/ec67f2cda72f3c63d4813ac65f0e3332645325325.jpg" alt=""></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-16 07:00</p></div></div><div class='timeline-item-content'><p>开始百天打卡了！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-14 07:29</p></div></div><div class='timeline-item-content'><p>我与我周旋久,宁作我!<br><img src="https://i0.hdslb.com/bfs/article/71385bd1b888173d9ea65a4857b62083645325325.jpg" alt=""></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-14 07:29</p></div></div><div class='timeline-item-content'><p>愿许秋风离别意 ，散我心中意难平<br>哈哈 ，最近有点太悲观了 ，好好调整下心态和作息🐳🐳🐳</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-13 20:43</p></div></div><div class='timeline-item-content'><p>看不良人，得到最好的结论就是：前期你看不懂李星云，因为那时你就是李星云，年幼时你不想负任何责任，只想着无忧无虑的过日子，而大帅就像是你家里的人，前期帮你各种铺路，可是等你长大了，家里人不在了，你发现你离开家里人，其实啥也不会。你开始无助、不安、焦虑，你不得已才开始在社会上努力学习试错，和各种自己不服的事和人做着抗争。<br>看到第四季以后，终于你明白了，当初说那个烂泥扶不上墙的人，其实就是你自己啊，你又何尝不是想像李星云说的那样，过闲云野鹤般的生活，可是无奈时代不允许，生活不允许，家人不允许。<br>到最后你也发现了，其实你就是李星云，你也明白了，其实并不是每个人都能做自己想做的事，成为自己想成为的人。<br><img src="https://i0.hdslb.com/bfs/article/4c081d91e2501773ba1ce4d9c07aca31645325325.jpg" alt=""></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-13 10:24</p></div></div><div class='timeline-item-content'><p>闲来无事 ，新增藏宝阁样式页面</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-13 07:50</p></div></div><div class='timeline-item-content'><p>我该失望的事 ，从来没有辜负我</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-11 23:57</p></div></div><div class='timeline-item-content'><p>少年大笑出门去，千里落花风；如今青衫仗剑回，山河满春风；美人赠我金刀错，剑气长城剑气近；人间清都山水郎，少年最为思无邪！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-11 16:40</p></div></div><div class='timeline-item-content'><p>真是糟糕的一天<br><img src="https://testingcf.jsdelivr.net/gh/LunaNorth/img-cloud/images/Snipaste_2024-08-10_09-45-22.png" alt="north"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-09 21:07</p></div></div><div class='timeline-item-content'><p>重新调整了下标签样式</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-09 11:14</p></div></div><div class='timeline-item-content'><p>刚好没什么事 ，魔改了下友链样式</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-08 11:38</p></div></div><div class='timeline-item-content'><p>这糟糕的人啊！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-05 20:36</p></div></div><div class='timeline-item-content'><p>看看明天有时间没 ，有时间的话就把最后的尾巴也给重写一下！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-05 17:26</p></div></div><div class='timeline-item-content'><p>今天把主题给重构了一下 ，主要是以阅读为主 ，基本上每个版块都进行的小小的重构 ，其他的等后续有时间了再慢慢进行更改</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-08-01 17:21</p></div></div><div class='timeline-item-content'><p>我们看惯了小说和电影中的美好结局 ，却忘了现实中的遗憾才是常态</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-31 18:21</p></div></div><div class='timeline-item-content'><p>看下一下午的小说 ，罪恶啊！🥱🥱🥱</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-31 11:24</p></div></div><div class='timeline-item-content'><p>年少轻狂的岁月，沉淀下来的是那些再也回不到的过去，总让人感叹，这是未曾珍惜而那失去的那些，但这些恰恰也是我们想让你去体会的，因为年少轻狂的岁月，一生只有一次，世间最珍贵的，不是得不到和已失去的，而是现在能把握的，我们生活在一个复杂而又充满无奈的世界，身上背负太多太多的责任和使命，有时候我们处理不当，就会不堪重负，难以忍受，最宽阔的是海洋，比海洋更宽阔的是天空，比天空更宽阔的是人的胸怀，当你紧握双手里面什么都没有，当你打开双手，世界就在你手中</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-29 18:42</p></div></div><div class='timeline-item-content'><p>自今日起 ，恢复锻炼</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-28 20:52</p></div></div><div class='timeline-item-content'><p>给博客分类和标签页面换个样式 ，后面差不多应该不会进行样式美化了 ，主要原因参考：<a href="https://northpoet.github.io/posts/undefined.html">Butterfly 主题美化之旅：从绚烂回归质朴</a></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-28 10:52</p></div></div><div class='timeline-item-content'><p>还是不要熬夜的好 ，昨天睡太晚了 ，导致今天的精神状态都不是很好😴😴😴</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-27 16:12</p></div></div><div class='timeline-item-content'><p>加了个卡片背景 ，看起来好看多了</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-27 15:27</p></div></div><div class='timeline-item-content'><p>花了一小点时间将博客进行了下简单的重构！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-25 10:38</p></div></div><div class='timeline-item-content'><p>争取两天时间学完黑马点评！！！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-23 10:36</p></div></div><div class='timeline-item-content'><p>程序员的悲哀是什么？<br>沾沾自喜学了一辈子技术，最终不过是一个自带优越感的工具人。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-22 06:53</p></div></div><div class='timeline-item-content'><p>好像快一个月没有学习了！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-19 20:20</p></div></div><div class='timeline-item-content'><p>电子游戏无感了！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-20 19:20</p></div></div><div class='timeline-item-content'><p>后面的话 ，也打算开始记录自己的学习生活了 ，希望自己可以坚持下来吧！<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/027EB789.jpg" alt="img"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-18 20:55</p></div></div><div class='timeline-item-content'><p>锻炼完感觉我状态又回来了 ，明天准备早起学习 ✨✨✨</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-18 17:20</p></div></div><div class='timeline-item-content'><p>真的烦 ，发现自己好像又回到了之前的状态了 ，不行 ，我要给自己来个强制开机 ，先准备锻炼去🦉</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-18 13:33</p></div></div><div class='timeline-item-content'><p>其实人一辈子是需要一些建议的，寻求答案，就是当自己寻找不出答案做不出正确的选择时，需要借鉴别人的建议，供自己做出选择，他人的高度确实可能限制了你的视野，但如果当自己没有别人的高度时，是可以借鉴别人的视野来，看清自己，答案永远是自己认同，并不需要追求别人的认同，这样才不能被世人的高墙围住。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-18 09:37</p></div></div><div class='timeline-item-content'><p>先迁移一部分学习笔记 ，有时间的话 ，再把另外的笔记也给迁移上面去</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-18 07:26</p></div></div><div class='timeline-item-content'><p>准备继续锻炼 ，开始自律 ，还是继续三分化训练加早起空腹有氧运动 ，贵在坚持 ，冲冲冲！！！<br><img src="https://cdn.jsdelivr.net/gh/NorthPoet/images/images/000CDDD2.gif" alt="img"></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-17 23:09</p></div></div><div class='timeline-item-content'><p>明天准备做一下笔记的迁移 ，把大部分的学习笔记都迁移到该博客上面去！</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-17 22:48</p></div></div><div class='timeline-item-content'><p>遇事不决 ，可问春风</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p> 2024-07-17 22:37</p></div></div><div class='timeline-item-content'><p>我永远喜欢喜多川海梦！！<br><img src="https://i0.hdslb.com/bfs/article/bd1509913091b89448e0657d19ec5441645325325.jpg" alt=""></p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 月影墨书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly 主题美化之旅：从绚烂回归质朴</title>
      <link href="/posts/a0708e01.html"/>
      <url>/posts/a0708e01.html</url>
      
        <content type="html"><![CDATA[<p>在这个充满各种可能的时代，博客不仅是个人展示才华与知识的窗口，也是技术爱好者分享经验、记录成长的平台。对于许多博主来说，博客的主题不仅仅是简单的视觉呈现，更是个性与品味的展现。然而，在追求完美的过程中，我们往往会陷入一个误区——过度美化博客主题，以至于忘记了博客最核心的价值所在：内容本身。</p><h2 id="美化之旅的起点"><a href="#美化之旅的起点" class="headerlink" title="美化之旅的起点"></a>美化之旅的起点</h2><p>记得当初选择了Hexo作为我的静态站点生成器，并安装了Butterfly主题时，我对它的第一印象是简洁而优雅。Butterfly主题以其轻量级、高性能而著称，它在开发者社区中有着良好的口碑。起初，我并没有过多地考虑主题的个性化设置，只是简单地调整了一些基本的配置项，如网站标题、logo等。</p><p>随着时间的推移，我开始觉得这个主题过于朴素，缺乏个性。于是，我踏上了主题美化的征程。我开始学习CSS、Sass等前端技术，研究了Butterfly主题的源码结构，尝试着改变背景颜色、字体样式、布局结构……每一步都让我感到兴奋，也让我更加沉迷于主题的设计之中。</p><p>我花费了大量的时间在寻找合适的字体、背景图以及动画效果上。我还为博客添加了各种插件，例如代码高亮、文章目录、阅读进度条等等。这些功能不仅让博客看起来更加专业，也让用户体验得到了提升。但是，当我回过头来看自己的文章时，我发现这段时间里我几乎没有更新过任何有价值的内容。我开始思考，这种过分关注外观的行为是否值得？</p><h2 id="从绚烂到回归质朴"><a href="#从绚烂到回归质朴" class="headerlink" title="从绚烂到回归质朴"></a>从绚烂到回归质朴</h2><p>经过一段时间的努力，我的博客终于变得五彩斑斓、独具特色。我甚至开始在社交媒体上分享我的主题美化心得，收到了不少好评。然而，当我静下心来反思这段时间的经历时，我意识到一个问题：我花了太多的时间在博客的外观上，却忽视了最重要的部分——内容创作。</p><h3 id="美化的尽头"><a href="#美化的尽头" class="headerlink" title="美化的尽头"></a>美化的尽头</h3><p>随着思考的深入，我逐渐意识到，无论主题多么华丽，如果博客没有高质量的文章支撑，那它就像是一座空壳。真正的美感不仅仅体现在视觉效果上，更在于文字所传达的思想与情感。我开始重新审视那些花费无数时间精心设计的主题元素，发现它们虽然能够吸引眼球，但却不能长久留住读者的心。</p><h3 id="回归默认"><a href="#回归默认" class="headerlink" title="回归默认"></a>回归默认</h3><p>最终，我决定回归到Butterfly主题的默认样式。这并不是说我不再关心博客的外观，而是我认为简约而不失个性的设计更适合博客的定位。通过这种方式，我可以将更多的精力投入到创作优质内容上，让文字本身成为博客最吸引人的地方。</p><p>回归默认的过程中，我删除了许多之前添加的插件和特效，只保留了最基本的功能。这样的变化使得页面加载速度更快，用户访问体验更好。我也开始重新审视自己的写作计划，规划未来要发表的文章内容，确保它们既有深度又有趣味性。</p><h2 id="写作与审美的平衡"><a href="#写作与审美的平衡" class="headerlink" title="写作与审美的平衡"></a>写作与审美的平衡</h2><p>经历了这段旅程之后，我意识到博客的成功不仅仅取决于美观的主题，更重要的是内容的质量。我开始更加专注于提高自己的写作技巧，学习如何更好地组织语言，如何让文章更具吸引力。同时，我也意识到，适度的美化是可以提升用户体验的，但关键是要找到一个平衡点。</p><h3 id="持续改进"><a href="#持续改进" class="headerlink" title="持续改进"></a>持续改进</h3><p>现在，每当我在键盘上敲下一行行文字时，我都感到格外的满足与幸福。因为我深知，这些文字将会是连接我和读者之间最坚固的桥梁。我也会定期对博客进行微调，保持其新鲜感，但不再沉迷于无休止的美化工作。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>美化博客主题的过程是一段宝贵的旅程，它让我学到了很多技能，也让我明白了一个道理：真正的美不在于外表的华丽，而在于内容的深度。我鼓励每一位博主都要找到自己的平衡点，让博客成为一个既美观又充满价值的地方。在这个过程中，也许你会发现，最美好的状态往往是最简单、最自然的样子。</p>]]></content>
      
      
      <categories>
          
          <category> 月影墨书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在人间凑数的日子</title>
      <link href="/posts/facab7a2.html"/>
      <url>/posts/facab7a2.html</url>
      
        <content type="html"><![CDATA[<div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>捞月亮の小北</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>如果离别是尽头 ，那么相遇的意义是什么</p></div></div><div class='timeline-item-content'><p>相遇的意义在于彼此照亮，成为彼此人生某一段旅程的精神寄托，为平凡的生活添一份美好，为冷漠的世界加一份安定，无论我们最后结局如何，在相遇的那一刻、在对视的那一刻，我们便是彼此昏暗世界中的一束微光</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>珍惜眼前人吧……</p></div></div><div class='timeline-item-content'><p>总有一天，你会明白，能够治愈你的，从来都不是时间，而是你心里的那股释怀和格局。只要内心不慌乱，连世界都难影响你。你可以消沉，也可以抱怨，甚至可以崩溃，但不能丧失自愈的能力，要学会及时止损。人生不一定要赢，但绝不能输给过去的错误和愚蠢。人生哪有白走的路，每一步都是成长，你要把头抬起来，一直往前走，天总会亮的。一辈子很短，要好好爱自己，你的优秀要遇到识货的人，你的真心要遇到珍惜你的人，你的善良要遇到感恩的人。谋生的路上不抛弃良知，谋爱的路不放弃尊严。你该有的样子就是：十分沉静，九分气质，八分遗憾，七分现实，三分颜值，两分糊涂，一分自知之明。无论身在何方，陷于何地，都要向下扎根，向上开花，不负生活</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>以前志气很大 ，总想走出家乡 ，现在不行了没出息了 ，总想在家待一辈子</p></div></div><div class='timeline-item-content'><p>时光流转，经历过人生的起起落落，我们或许渐渐感受到了家的温暖与安宁。在家待一辈子，也许并不是一种逃避，而是一种选择，一种对平淡生活的热爱与向往。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>没有用实际行动表达的爱意都是错觉吗</p></div></div><div class='timeline-item-content'><p>真正喜欢的东西，不会一直放在购物车里，真正喜欢的人，也不会一直不确定关系，态度就是答案</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>释怀的尽头是遗忘吗</p></div></div><div class='timeline-item-content'><p>或许它更像是一场内心的蜕变，让我们在时光的洗礼中，逐渐放下过去的包袱，拥抱未来的无限可能。遗忘并不是终点，而是我们心灵得以自由飞翔的起点。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>孤独才是生命的常态吗？</p></div></div><div class='timeline-item-content'><p>孤独从不来自陌生人，城市中互不相识的人们似乎戴着罩子，各自穿梭，漫天雨水敲击不到心灵。孤独来自生命中那些重要的人，他们的影子扎根在旧时光，笑容不知道去了何方。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>成年人的世界有爱情吗？</p></div></div><div class='timeline-item-content'><p>大海永远会映照着天上的星辰，天上的星辰永远不会孤单，幸运的海风也会一直吹拂着你的脸庞，而你！我的朋友，你的爱情也不会太迟</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>麻绳专挑细处断 ，厄运专挑苦命人</p></div></div><div class='timeline-item-content'><p>我假装生病不上课 ，父亲假装健康去上班</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>为什么人与人决定要分开的时候 ，总会说一些难听的话</p></div></div><div class='timeline-item-content'><p>欲与人绝，言中恶语，非无情，惧悔也。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>关于迷茫</p></div></div><div class='timeline-item-content'><p>当你迷茫，不确定脚下的路如何走的时候，就看一看史铁生的这一句话：   “要紧的是果敢地迈出第一步，对与错先都不管自古就没有把一切都设计好再开步的事。别想把一切都弄清楚，再去走路。鲁莽者要学会思考，善思者要克服的是犹豫。”</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>如何做到喜欢却不联系的</p></div></div><div class='timeline-item-content'><p>爱到极致不纠缠，思到极致不想见。  那时候太喜欢了，以至于那碗夹生饭，咽了又咽，也毫无怨言。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>关于对家庭的讨厌</p></div></div><div class='timeline-item-content'><p>你讨厌妈妈的市侩圆滑，却不知道她曾经跟你一样憧憬过未来，你讨厌父亲的平庸，却不知道他曾经也是个怀揣梦想的男孩</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>明明已经失去了，那为何还会时长想起</p></div></div><div class='timeline-item-content'><p>宫崎骏说过：其实我很早就知道，我们不合适，但我还是拒绝了所有人，陪你走了一段没有结果的路，虽然时间不长，但毕生难忘。我喜欢你，以为你也喜欢我，但是，湖是湖，海是海。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>支支吾吾也很浪漫 叙意不清也代表喜欢</p></div></div><div class='timeline-item-content'><p>我词不达意的表白，饱含真诚喜感，快餐式的恋爱年代。太多人麻木爱个大概，谁都不明白。玫瑰在沙漠盛开，大雨别离会停下来。让海风吹走喧嚣腐烂的爱，满怀真心而来。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>当你实现财富自由了，你最想做的事情是什么？</p></div></div><div class='timeline-item-content'><p>抹去母亲羡慕的眼神 ，扶正父亲弯下的腰杆</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>自由二字本就条条框框 ，牢笼二字反倒是四面透风</p></div></div><div class='timeline-item-content'><p>自由看似条条框框但是总有一笔出头，牢笼看着透风却被罩住了头</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>所以真爱还是无敌吗？</p></div></div><div class='timeline-item-content'><p>理想主义的花，不会开在浪漫主义的土地里，终有一天，你会放弃理想，对浪漫不再期待，就像把自己的灵魂浸入那臭不可闻的下水道淤泥里，既不死也不活</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>关于建议</p></div></div><div class='timeline-item-content'><p>其实人一辈子是需要一些建议的，寻求答案，就是当自己寻找不出答案做不出正确的选择时，需要借鉴别人的建议，供自己做出选择，他人的高度确实可能限制了你的视野，但如果当自己没有别人的高度时，是可以借鉴别人的视野来，看清自己，答案永远是自己认同，并不需要追求别人的认同，这样才不能被世人的高墙围住。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>关于离开</p></div></div><div class='timeline-item-content'><p>走进一个人的时候 ，要慢一点 ，以免看不清 。离开一个人的时候要快一点 ，以免舍不得.<br>人海茫茫 ，先有不甘 ，后有心安 ，乐知天命 ，故不忧 !</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 月影墨书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我在人间凑数的日子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
